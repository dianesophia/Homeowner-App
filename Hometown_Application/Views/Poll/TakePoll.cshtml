@model Hometown_Application.ViewModel.PollResponseViewModel
@using Hometown_Application.Models

@{
    ViewData["Title"] = "Take Poll";
}

<div class="container">
    <div class="row mb-4">
        <div class="col-md-12">
            <h1 class="display-4">@Model.PollTitle</h1>
            @if (!string.IsNullOrEmpty(Model.PollDescription))
            {
                <p class="lead">@Model.PollDescription</p>
            }
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    @{
                        ViewData["Title"] = "Take Poll";
                    }

                    <h2>@Model.PollTitle</h2>
                    <p>@Model.PollDescription</p>

                    <form asp-action="SubmitPoll" method="post">
                        @Html.AntiForgeryToken()

                        <!-- Hidden fields for PollResponseViewModel properties -->
                        @Html.HiddenFor(model => model.PollId)
                        @Html.HiddenFor(model => model.PollTitle)
                        @Html.HiddenFor(model => model.PollDescription)

                        <!-- Loop through each question -->
                        @for (int i = 0; i < Model.Questions.Count; i++)
                        {
                            <div class="form-group">
                                <h4>@Model.Questions[i].QuestionText @(Model.Questions[i].IsRequired ? " (Required)" : "")</h4>

                                <!-- Hidden fields for question properties -->
                                @Html.HiddenFor(model => model.Questions[i].QuestionId)
                                @Html.HiddenFor(model => model.Questions[i].QuestionText)
                                @Html.HiddenFor(model => model.Questions[i].QuestionType)
                                @Html.HiddenFor(model => model.Questions[i].IsRequired)
                                @Html.HiddenFor(model => model.Questions[i].DisplayOrder)

                                <!-- Render multiple-choice questions -->
                                @if (Model.Questions[i].QuestionType == Hometown_Application.Data.QuestionType.MultipleChoice)
                                {
                                    @foreach (var option in Model.Questions[i].Options)
                                    {
                                        <div class="form-check">
                                            <input type="radio"
                                                   asp-for="@Model.Questions[i].SelectedOptionId"
                                                   value="@option.OptionId"
                                                   id="option_@option.OptionId"
                                                   class="form-check-input" />
                                            <label for="option_@option.OptionId" class="form-check-label">@option.OptionText</label>
                                        </div>
                                    }
                                    @Html.ValidationMessageFor(model => model.Questions[i].SelectedOptionId, "", new { @class = "text-danger" })
                                }
                                <!-- Render open-ended questions -->
                                else if (Model.Questions[i].QuestionType == Hometown_Application.Data.QuestionType.OpenEnded)
                                {
                                <div>
                                    @Html.TextAreaFor(model => model.Questions[i].TextResponse, new { @class = "form-control", rows = "3" })
                                    @Html.ValidationMessageFor(model => model.Questions[i].TextResponse, "", new { @class = "text-danger" })
                                </div>
                                }
                            </div>
                        }

                        <!-- Display validation summary for general errors -->
                        <div asp-validation-summary="All" class="text-danger"></div>

                        <!-- Submit button -->
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
                $(document).ready(function () {
            const QuestionType = {
                MultipleChoice: @((int)Hometown_Application.Data.QuestionType.MultipleChoice),
                OpenEnded: @((int)Hometown_Application.Data.QuestionType.OpenEnded)
            };

            $("form").on("submit", function (e) {
                let hasErrors = false;
                $(".question-container.border-danger").each(function (index) {
                    const $container = $(this);
                    const questionType = parseInt($container.find("input[name$='.QuestionType']").val());
                    const questionId = $container.find("input[name$='.QuestionId']").val();

                    // Use dynamic name-based selector
                    const checked = $container.find(`input[name='Questions[${index}].SelectedOptionId']:checked`).length;
                    const selectedValue = $container.find(`input[name='Questions[${index}].SelectedOptionId']:checked`).val() || 'none';
                    console.log(`Question ${index}, Type: ${questionType}, Checked: ${checked}, Selected Value: ${selectedValue}, Name: Questions[${index}].SelectedOptionId`);

                    if (questionType === QuestionType.MultipleChoice && checked === 0) {
                        hasErrors = true;
                        $container.append('<span class="text-danger-custom">Please select an option.</span>');
                        $container.find("input[type='radio']").addClass("is-invalid");
                        $("#error_" + questionId).text("Please select an option.");
                    } else if (questionType === QuestionType.OpenEnded && !$container.find("textarea").val().trim()) {
                        hasErrors = true;
                        $container.append('<span class="text-danger-custom">Please provide a response.</span>');
                        $container.find("textarea").addClass("is-invalid");
                    }
                });

                if (hasErrors) {
                    e.preventDefault();
                    $('html, body').animate({
                        scrollTop: $(".text-danger-custom").first().offset().top - 100
                    }, 500);
                }
            });

            // Clear error on input change
            $("textarea, input[type='radio']").on("input change", function () {
                const $container = $(this).closest(".question-container");
                $container.find(".text-danger-custom").remove();
                $container.find("textarea, input").removeClass("is-invalid");
                const questionId = $container.find("input[name$='.QuestionId']").val();
                $("#error_" + questionId).text("");
            });
        });
    </script>
    <style>
        .text-danger-custom {
            color: #dc3545;
            font-size: 0.875em;
            margin-top: 0.25rem;
            display: block;
        }

        .is-invalid {
            border-color: #dc3545 !important;
        }
    </style>
}