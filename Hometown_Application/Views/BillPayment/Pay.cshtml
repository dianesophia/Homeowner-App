<div class="container mt-5">
    <div class="row justify-content-center">
        <!-- Outstanding Balance Card -->
        <div class="col-md-4">
            <div class="card balance-card shadow-lg p-4">
                <div class="card-body text-center">
                    <h5 class="card-title text-uppercase fw-bold text-secondary">Outstanding Balance</h5>
                    <h2 id="outstandingBalance" class="fw-bold text-primary display-5">₱0.00</h2>
                </div>
            </div>
        </div>

        <!-- Payment Form -->
        <div class="col-md-8">
            <div class="card shadow-lg p-4">
                <div class="card-body">
                    <h5 class="card-title fw-bold text-secondary">Make a Payment</h5>
                    <form method="post" asp-action="PayBill">
                        <div class="mb-3">
                            <label class="form-label">Enter Amount:</label>
                            <input type="number" class="form-control form-control-lg" name="AmountPaid" id="amountInput" required min="1" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Payment Method:</label>
                            <select class="form-select form-select-lg" name="PaymentMethod">
                                <option value="Bank Transfer">Bank Transfer</option>
                                <option value="Credit Card">Credit Card</option>
                                <option value="GCash">GCash</option>
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Payment Reference:</label>
                            <input type="text" class="form-control form-control-lg" name="PaymentReference" id="paymentReference" readonly />
                        </div>

                        <button type="submit" class="btn btn-primary btn-lg w-100">Pay Now</button>
                    </form>
                </div>
            </div>
        </div>


    <!-- Transaction History (Liquidation) -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card shadow-lg p-4">
                <div class="card-body">
                    <h5 class="card-title fw-bold text-secondary">Transaction History</h5>
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Date</th>
                                <th>Amount Paid</th>
                                <th>Payment Method</th>
                                <th>Reference</th>
                            </tr>
                        </thead>
                        <tbody id="transactionHistory">
                            <tr>
                                <td colspan="4" class="text-center">Loading...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                let outstandingBalance = 0;

                // Function to fetch and update the outstanding balance
                function fetchOutstandingBalance() {
                    fetch('/BillPayment/GetUserBalance')
                        .then(response => response.json())
                        .then(data => {
                            if (data.balance !== undefined) {
                                outstandingBalance = data.balance;
                                animateBalance(outstandingBalance);
                            }
                        })
                        .catch(error => console.error("Error fetching balance:", error));
                }

                // Function to generate a payment reference
                function generatePaymentReference() {
                    const now = new Date();
                    const timestamp = now.getFullYear().toString() +
                                      (now.getMonth() + 1).toString().padStart(2, "0") +
                                      now.getDate().toString().padStart(2, "0") +
                                      now.getHours().toString().padStart(2, "0") +
                                      now.getMinutes().toString().padStart(2, "0") +
                                      now.getSeconds().toString().padStart(2, "0");
                    const randomNum = Math.floor(1000 + Math.random() * 9000);
                    return `PAY-${timestamp}-${randomNum}`;
                }

                // Set the generated reference to the input field
                document.getElementById("paymentReference").value = generatePaymentReference();

                // Handle form submission
                document.querySelector("form").addEventListener("submit", function (event) {
                    event.preventDefault(); // Prevent form submission to handle it manually

                    let amountPaid = parseFloat(document.getElementById("amountInput").value);

                    if (isNaN(amountPaid) || amountPaid <= 0) {
                        alert("Please enter a valid amount.");
                        return;
                    }

                    if (amountPaid > outstandingBalance) {
                        alert("You cannot pay more than your outstanding balance.");
                        return;
                    }

                    let paymentData = {
                        AmountPaid: amountPaid,
                        PaymentMethod: document.querySelector("select[name='PaymentMethod']").value,
                        PaymentReference: document.getElementById("paymentReference").value
                    };

                    fetch('/BillPayment/PayBill', {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(paymentData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            outstandingBalance -= amountPaid; // Deduct amount
                            animateBalance(outstandingBalance);
                            alert("Payment successful!");
                            document.getElementById("amountInput").value = ""; // Reset form
                            document.getElementById("paymentReference").value = generatePaymentReference(); // Generate new reference
                            fetchTransactionHistory(); // Update transaction list
                        } else {
                            alert("Payment failed. Please try again.");
                        }
                    })
                    .catch(error => console.error("Error processing payment:", error));
                });

                // Function to update balance animation
                function animateBalance(finalValue) {
                    let balanceElement = document.getElementById("outstandingBalance");
                    let start = parseFloat(balanceElement.innerText.replace("₱", "")) || 0;
                    let end = finalValue;
                    let duration = 1500;
                    let stepTime = 20;
                    let increment = (end - start) / (duration / stepTime);

                    let timer = setInterval(() => {
                        start += increment;
                        if (increment > 0 && start >= end || increment < 0 && start <= end) {
                            clearInterval(timer);
                            start = end;
                        }
                        balanceElement.innerText = `₱${start.toFixed(2)}`;
                    }, stepTime);
                }

                // Function to fetch transaction history
                function fetchTransactionHistory() {
                    fetch('/BillPayment/GetTransactionHistory')
                        .then(response => response.json())
                        .then(data => {
                            let historyTable = document.getElementById("transactionHistory");
                            historyTable.innerHTML = "";

                            if (data.length > 0) {
                                data.forEach(transaction => {
                                    let row = `<tr>
                                        <td>${new Date(transaction.paymentDate).toLocaleDateString()}</td>
                                        <td>₱${transaction.amountPaid.toFixed(2)}</td>
                                        <td>${transaction.paymentMethod}</td>
                                        <td>${transaction.paymentReference}</td>
                                    </tr>`;
                                    historyTable.innerHTML += row;
                                });
                            } else {
                                historyTable.innerHTML = `<tr><td colspan="4" class="text-center">No transactions found.</td></tr>`;
                            }
                        })
                        .catch(error => console.error("Error fetching transactions:", error));
                }

                // Load balance and transactions on page load
                fetchOutstandingBalance();
                fetchTransactionHistory();
            });
        </script>
        }