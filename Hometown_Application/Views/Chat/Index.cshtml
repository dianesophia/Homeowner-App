@model IEnumerable<Hometown_Application.Models.ChatMessageModel>
@{
    ViewData["Title"] = "Chat";
}

<h2>Chat</h2>

<!-- Notification Bell -->
<div id="notificationBell" class="notification-container">
    <span class="bell-icon">🔔</span>
    <span id="notificationCount" class="notification-badge">0</span>
</div>

<!-- Select recipient -->
<label for="recipientSelect">Select User:</label>
<select id="recipientSelect">
    <option value="">-- Choose a user --</option>
    @foreach (var user in ViewBag.Users)
    {
        <option value="@user.Id">@user.UserName</option>
    }
</select>

<div id="chatContainer">
    <div id="chatBox"></div>
</div>

<div class="message-input">
    <input type="text" id="messageInput" placeholder="Type a message..." />
    <button id="sendButton">Send</button>
</div>

<!-- Sound alert for new messages -->
<audio id="messageSound" src="https://www.myinstants.com/media/sounds/facebook_messenger.mp3" preload="auto"></audio>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        let unreadCount = 0; // Track unread messages
        const messageSound = document.getElementById("messageSound");

        connection.start().then(() => {
            console.log("✅ SignalR Connected!");
        }).catch(err => console.error("❌ SignalR Error:", err));

        function addMessageToChatBox(sender, message, isSender) {
            const chatBox = document.getElementById("chatBox");

            if (!chatBox) {
                console.error("❌ Error: Chat box not found.");
                return;
            }

            const newMessage = document.createElement("div");
            newMessage.classList.add("chat-message", isSender ? "sent" : "received");
            newMessage.innerHTML = `<p>${message}</p>`;

            chatBox.appendChild(newMessage);
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        document.getElementById("sendButton").addEventListener("click", function () {
            const messageInput = document.getElementById("messageInput");
            const message = messageInput.value.trim();
            const recipientId = document.getElementById("recipientSelect").value;

            if (!recipientId) {
                alert("Please select a recipient.");
                return;
            }

            if (!message) {
                alert("Message cannot be empty!");
                return;
            }

            fetch("/Chat/SendPrivateMessage", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ recipientId, message })
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text); });
                }
                addMessageToChatBox("You", message, true);
                messageInput.value = "";
            })
            .catch(err => console.error("❌ Error sending message:", err));
        });

        document.getElementById("recipientSelect").addEventListener("change", function () {
            const recipientId = this.value;
            const chatBox = document.getElementById("chatBox");

            if (!chatBox) {
                console.error("❌ Error: Chat box not found.");
                return;
            }

            if (!recipientId) {
                chatBox.innerHTML = "<p>Select a user to start chatting.</p>";
                return;
            }

            fetch(`/Chat/GetMessages?recipientId=${recipientId}`)
                .then(response => response.json())
                .then(messages => {
                    chatBox.innerHTML = "";
                    messages.forEach(msg => addMessageToChatBox(msg.sender, msg.message, msg.sender === "You"));

                    // Clear unread notifications when user opens chat
                    unreadCount = 0;
                    updateNotificationBadge();
                })
                .catch(err => console.error("❌ Error loading messages:", err));
        });

        connection.on("ReceivePrivateMessage", (sender, message) => {
            console.log(`📩 New message from ${sender}: ${message}`);
            addMessageToChatBox(sender, message, false);

            // Play notification sound 🔊
            if (messageSound) {
                messageSound.play().catch(err => console.error("🔇 Sound play error:", err));
            }

            // Increment unread count and update badge
            unreadCount++;
            updateNotificationBadge();
        });

        function updateNotificationBadge() {
            const badge = document.getElementById("notificationCount");
            if (unreadCount > 0) {
                badge.innerText = unreadCount;
                badge.style.display = "block";
            } else {
                badge.style.display = "none";
            }
        }
    </script>
}

<style>
    /* Chat Container */
    #chatContainer {
        width: 100%;
        max-width: 500px;
        height: 400px;
        overflow-y: scroll;
        border: 1px solid #ddd;
        padding: 10px;
        background-color: #f9f9f9;
        display: flex;
        flex-direction: column;
    }

    #chatBox {
        display: flex;
        flex-direction: column;
        gap: 8px;
        padding: 10px;
    }

    .chat-message {
        max-width: 75%;
        padding: 10px;
        border-radius: 10px;
        word-wrap: break-word;
        font-size: 14px;
    }

    .sent {
        align-self: flex-end;
        background-color: #007bff;
        color: white;
        text-align: right;
    }

    .received {
        align-self: flex-start;
        background-color: #e5e5e5;
        color: black;
        text-align: left;
    }

    .message-input {
        display: flex;
        margin-top: 10px;
    }

    #messageInput {
        width: 80%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    #sendButton {
        padding: 8px 15px;
        background-color: #007bff;
        color: white;
        border: none;
        cursor: pointer;
    }

        #sendButton:hover {
            background-color: #0056b3;
        }

    /* Notification Bell */
    .notification-container {
        position: relative;
        display: inline-block;
        cursor: pointer;
        margin-bottom: 10px;
    }

    .bell-icon {
        font-size: 24px;
    }

    .notification-badge {
        position: absolute;
        top: -5px;
        right: -5px;
        background: red;
        color: white;
        font-size: 12px;
        padding: 4px 7px;
        border-radius: 50%;
        display: none;
    }
</style>
