@model IEnumerable<Hometown_Application.Models.ChatMessageModel>
@{
    ViewData["Title"] = "Chat";
}

<h2>Chat</h2>

<!-- Select recipient -->
<label for="recipientSelect">Select User:</label>
<select id="recipientSelect">
    <option value="">-- Choose a user --</option>
    @foreach (var user in ViewBag.Users)
    {
        <option value="@user.Id">@user.UserName</option>
    }
</select>

<!-- Chatbox container -->
<div id="chat-container"></div>

<!-- Message input -->
<div id="chat-input">
    <input type="text" id="messageInput" placeholder="Type a message..." />
    <button id="sendButton">Send</button>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.start().then(() => {
            console.log("✅ SignalR Connected!");
        }).catch(err => console.error("❌ SignalR Error:", err));

        let currentRecipientId = "";

        // Function to load chat history for the selected user
        function loadChatHistory(recipientId) {
            fetch(`/Chat/GetMessages?recipientId=${recipientId}`)
                .then(response => response.json())
                .then(messages => {
                    const chatBox = document.getElementById("chat-container");
                    chatBox.innerHTML = ""; // Clear chat box
                    messages.forEach(msg => {
                        addMessageToChatbox(msg.sender, msg.message, msg.isSender ? "sent" : "received");
                    });
                })
                .catch(err => console.error("❌ Error loading chat:", err));
        }

        // Listen for recipient change
        document.getElementById("recipientSelect").addEventListener("change", function () {
            currentRecipientId = this.value;
            if (currentRecipientId) {
                loadChatHistory(currentRecipientId);
            } else {
                document.getElementById("chat-container").innerHTML = ""; // Clear chat if no user selected
            }
        });

        // Send message
        document.getElementById("sendButton").addEventListener("click", function () {
            const messageInput = document.getElementById("messageInput");
            const message = messageInput.value.trim();

            if (!currentRecipientId) {
                alert("Please select a recipient.");
                return;
            }

            if (!message) {
                alert("Message cannot be empty!");
                return;
            }

            // Append sent message immediately
            addMessageToChatbox("You", message, "sent");

            fetch("/Chat/SendPrivateMessage", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ recipientId: currentRecipientId, message })
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text); });
                }
                messageInput.value = ""; // Clear input after sending
            })
            .catch(err => console.error("❌ Error sending message:", err));
        });

        // Function to add messages to the chatbox
        function addMessageToChatbox(sender, message, type) {
            const chatBox = document.getElementById("chat-container");
            const newMessage = document.createElement("div");
            newMessage.classList.add("message", type);
            newMessage.innerHTML = `<strong>${sender}:</strong> ${message}`;
            chatBox.appendChild(newMessage);
            chatBox.scrollTop = chatBox.scrollHeight; // Auto-scroll to latest message
        }

        // Handle received messages
        connection.on("ReceivePrivateMessage", (sender, message, senderId) => {
            if (senderId === currentRecipientId) {
                addMessageToChatbox(sender, message, "received");
            }
        });
    </script>
}

<style>
    #chat-container {
        width: 100%;
        max-width: 500px;
        margin: auto;
        border: 1px solid #ddd;
        padding: 10px;
        height: 400px;
        overflow-y: scroll;
        background-color: #f9f9f9;
        display: flex;
        flex-direction: column;
    }

    .message {
        padding: 8px;
        border-radius: 5px;
        margin: 5px 0;
        max-width: 75%;
    }

    .sent {
        background-color: #dcf8c6;
        align-self: flex-end;
        text-align: right;
    }

    .received {
        background-color: #ebebeb;
    }

    #chat-input {
        display: flex;
        justify-content: space-between;
        margin-top: 10px;
    }

    #messageInput {
        flex-grow: 1;
        padding: 8px;
    }

    #sendButton {
        padding: 8px 15px;
    }
</style>
