// <auto-generated />
using System;
using Hometown_Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hometown_Application.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250419084138_ASFAWERAWERAWER")]
    partial class ASFAWERAWERAWER
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hometown_Application.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AdminProfilesAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("BillAssignmentModelBillAssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FacebookProfile")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("HomeownerProfilesHomeownerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActiveUser")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBirthdayPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGenderPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LinkedInProfile")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("MakeFacebookPublic")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffProfilesStaffId")
                        .HasColumnType("int");

                    b.Property<string>("TwitterProfile")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AdminProfilesAdminId");

                    b.HasIndex("BillAssignmentModelBillAssignmentId");

                    b.HasIndex("HomeownerProfilesHomeownerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StaffProfilesStaffId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "100",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77fc66b7-737f-487b-8459-c6998b7554a3",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elon.musk@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elon",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Musk",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "ELON.MUSK@EXAMPLE.COM",
                            NormalizedUserName = "ELON.MUSK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA6ea6/UpNWfoJtrkVi6vJQRQulg+bLBbHukcqJIP4b3ni8ane3v63gIeVWfs/hK/g==",
                            PhoneNumberConfirmed = false,
                            ProfilePicturePath = "wwwroot/images/picc.png",
                            SecurityStamp = "6c271dfe-5c2d-40bd-a643-f9628b686ab8",
                            TwoFactorEnabled = false,
                            UserName = "elon.musk@example.com"
                        },
                        new
                        {
                            Id = "102",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de499ee4-af76-46db-86dd-12bdd203a5ba",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bill.gates@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bill",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Gates",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "BILL.GATES@EXAMPLE.COM",
                            NormalizedUserName = "BILL.GATES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEdwnsIbicUWMifNTwJn6n0WRGdE8QkB3OjdXJU2rWWCbN2hnuOsfK3LIpNUanZ0Dg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34b650e9-7cf8-4a9f-9c18-9a99c1deba98",
                            TwoFactorEnabled = false,
                            UserName = "bill.gates@example.com"
                        },
                        new
                        {
                            Id = "103",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8478a67-d451-4404-8844-7ae65b294879",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mark.zuckerberg@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Zuckerberg",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARK.ZUCKERBERG@EXAMPLE.COM",
                            NormalizedUserName = "MARK.ZUCKERBERG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOAo/MOk+y/BAQn2Gxced9ca2EB7oX5wPglJUeNvakG0ot/qb/HJBlaRZWtjN7cK2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0daf0964-80a8-4a46-8604-03c5dcb4e1cd",
                            TwoFactorEnabled = false,
                            UserName = "mark.zuckerberg@example.com"
                        },
                        new
                        {
                            Id = "104",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48724795-c092-434d-a244-a6ce08c9c973",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sundar.pichai@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sundar",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Pichai",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SUNDAR.PICHAI@EXAMPLE.COM",
                            NormalizedUserName = "SUNDAR.PICHAI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBGz8MwJbFShf75VDVWGCLihnoxSkkXhJsieUXYgdTsGtSgIe0pdEeo7T1HNe9tTXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b2567eaf-32d9-451e-aafa-69e77abd91a3",
                            TwoFactorEnabled = false,
                            UserName = "sundar.pichai@example.com"
                        },
                        new
                        {
                            Id = "105",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "659a7679-92c6-47a6-b76b-77d60be34cc2",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tim.cook@example.com",
                            EmailConfirmed = true,
                            FirstName = "Tim",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Cook",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "TIM.COOK@EXAMPLE.COM",
                            NormalizedUserName = "TIM.COOK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIyyPmmoJpXb0eSBjWCKpzAtwmsiMGzE1ikLu1XGsCQWR5hqOttMeiWrXztR3p/MUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d631f15-a496-488d-b92f-e879004323d5",
                            TwoFactorEnabled = false,
                            UserName = "tim.cook@example.com"
                        },
                        new
                        {
                            Id = "106",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d2082e6-5eea-4a66-b987-edeadaab02dc",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "satya.nadella@example.com",
                            EmailConfirmed = true,
                            FirstName = "Satya",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Nadella",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SATYA.NADELLA@EXAMPLE.COM",
                            NormalizedUserName = "SATYA.NADELLA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHqGDi7do/KCbWvMc2+VlLX3BveGoDNkXQVmDLTXk7Wtld2zCtyqY+fcDg47y/SIuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0686dbdb-1a1e-4bc5-a182-f9791d9de1fb",
                            TwoFactorEnabled = false,
                            UserName = "satya.nadella@example.com"
                        },
                        new
                        {
                            Id = "107",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f8346de-ae69-4fb6-ac94-e2091ddcbca7",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jack.dorsey@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jack",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Dorsey",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JACK.DORSEY@EXAMPLE.COM",
                            NormalizedUserName = "JACK.DORSEY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN2jIvs3hGg7zaP4HROsZV2v5pytrUJAb7ygFwevtYtOovzLcgEexC7TmpLGc2E4Zw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f24af47-842f-491f-a74a-39d6157ad9ca",
                            TwoFactorEnabled = false,
                            UserName = "jack.dorsey@example.com"
                        },
                        new
                        {
                            Id = "108",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3cec3b05-98fe-4096-bede-8cb7283d6b6b",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "larry.page@example.com",
                            EmailConfirmed = true,
                            FirstName = "Larry",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Page",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "LARRY.PAGE@EXAMPLE.COM",
                            NormalizedUserName = "LARRY.PAGE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELkerk/JmRmEiUT8SkcMUefig+youMpSp3B6+YXsc+5ae3RMEDhhduYJnAJlavT1Ew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "972a2ed8-d3be-47ff-87e7-b69024c11434",
                            TwoFactorEnabled = false,
                            UserName = "larry.page@example.com"
                        },
                        new
                        {
                            Id = "109",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95ba3392-8dad-43db-9343-b25f7ecbaae6",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sergey.brin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sergey",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Brin",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SERGEY.BRIN@EXAMPLE.COM",
                            NormalizedUserName = "SERGEY.BRIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFkhrnTgi7y47kXBPcKUBcXQwqUdgCmGVSL+BB6MkMHwckW4iYTX0+xGvHqKf4Uk7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3fa2a9a-eeac-45f5-b4ac-4a6696b36f38",
                            TwoFactorEnabled = false,
                            UserName = "sergey.brin@example.com"
                        },
                        new
                        {
                            Id = "110",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "055edf20-5559-480c-9485-f5fddea10e4d",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "steve.jobs@example.com",
                            EmailConfirmed = true,
                            FirstName = "Steve",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Jobs",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "STEVE.JOBS@EXAMPLE.COM",
                            NormalizedUserName = "STEVE.JOBS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOVXrZTEosm3Wlmvm9AR4XcAx92ZXrST88CG9PO90NZw9GQ85oAf6Oz1uK8brSSTyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d1d4968-e0cf-48f1-9a7e-51853ab550ba",
                            TwoFactorEnabled = false,
                            UserName = "steve.jobs@example.com"
                        },
                        new
                        {
                            Id = "111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01cf430d-6704-4acc-8cce-a1e426ca4393",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sheryl.sandberg@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sheryl",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Sandberg",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SHERYL.SANDBERG@EXAMPLE.COM",
                            NormalizedUserName = "SHERYL.SANDBERG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH+SV2gAt1HSriVddU/F0vq8EDe00rlCggKrSj0OlMRUpCr/PeFxfqz4h/EoOqqR5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21550e48-e185-4bd7-9e36-92d8fe97ec85",
                            TwoFactorEnabled = false,
                            UserName = "sheryl.sandberg@example.com"
                        },
                        new
                        {
                            Id = "112",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a6c3acc-44f1-4b52-b011-9e383ca21d59",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "reed.hastings@example.com",
                            EmailConfirmed = true,
                            FirstName = "Reed",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Hastings",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "REED.HASTINGS@EXAMPLE.COM",
                            NormalizedUserName = "REED.HASTINGS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF81wDHR1DbOkZnIdF49L+KmXwALhZz5s2nuqodaPUtljFi18ulaYOSpOeMcjLk3qw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8fcc1fb2-9824-4c7d-bbb7-7452820098ee",
                            TwoFactorEnabled = false,
                            UserName = "reed.hastings@example.com"
                        },
                        new
                        {
                            Id = "113",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac640107-2289-41b7-a6a2-bf614629902f",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marissa.mayer@example.com",
                            EmailConfirmed = true,
                            FirstName = "Marissa",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Mayer",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARISSA.MAYER@EXAMPLE.COM",
                            NormalizedUserName = "MARISSA.MAYER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPPdJjXGzMBQsW9IAT7N95QfJbmvOHOUHoQMJ/fAYjEqHNw84+BdmhUvj1yNg0rCAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cc890682-647c-4573-9cf3-92bce9446b17",
                            TwoFactorEnabled = false,
                            UserName = "marissa.mayer@example.com"
                        },
                        new
                        {
                            Id = "114",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e197ec1e-be3e-435d-8a38-e810123114a9",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elizabeth.holmes@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elizabeth",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Holmes",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "ELIZABETH.HOLMES@EXAMPLE.COM",
                            NormalizedUserName = "ELIZABETH.HOLMES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK7nBd1IiYu8g6iTzDFeVLJ4UjJMKWqVtSNsShmxzz4O3L152IxD6qKgb6YKwhDMkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b16ba114-acbc-48ac-b4b2-cd27cf298fff",
                            TwoFactorEnabled = false,
                            UserName = "elizabeth.holmes@example.com"
                        },
                        new
                        {
                            Id = "115",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "860b8f37-f11e-4558-90d4-fac6411a6482",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "susan.wojcicki@example.com",
                            EmailConfirmed = true,
                            FirstName = "Susan",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Wojcicki",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SUSAN.WOJCICKI@EXAMPLE.COM",
                            NormalizedUserName = "SUSAN.WOJCICKI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE0RrRSZV/FbFKSPoouhpUbH8bgZJV0EI7+RS2NwdWMjGMYM3u9ppsqbsHmEgH9smQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff19db69-e2b2-426c-a31a-2a2458f34bb0",
                            TwoFactorEnabled = false,
                            UserName = "susan.wojcicki@example.com"
                        },
                        new
                        {
                            Id = "116",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c239a50-6690-4c70-8157-2b49c2ea2c24",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tim.arnold@example.com",
                            EmailConfirmed = true,
                            FirstName = "Tim",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Arnold",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "TIM.ARNOLD@EXAMPLE.COM",
                            NormalizedUserName = "TIM.ARNOLD@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED8gwzCJWtUNTgK4WA6OzkR+zQC8cJ+SSwtkOgp0X7rxnjWW4DDG2gnr7Z2uKBPV0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e0e2096-8403-48c4-823b-ed85e81f9aad",
                            TwoFactorEnabled = false,
                            UserName = "tim.arnold@example.com"
                        },
                        new
                        {
                            Id = "117",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b8e1ff1-16fa-4f81-a52b-c221221380f7",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.iger@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Iger",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "BOB.IGER@EXAMPLE.COM",
                            NormalizedUserName = "BOB.IGER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIQZ7c8z7VmbD9RTL5ahLK27OOUGmoAGqvZifeL2uxVj8skTawSHi6ScHwOuuTba7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6ed9907-396a-4906-832e-4a2446f60c64",
                            TwoFactorEnabled = false,
                            UserName = "bob.iger@example.com"
                        },
                        new
                        {
                            Id = "118",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "388c379a-2e58-4d98-8b1b-d8583e590e60",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "larry.ellison@example.com",
                            EmailConfirmed = true,
                            FirstName = "Larry",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Ellison",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "LARRY.ELLISON@EXAMPLE.COM",
                            NormalizedUserName = "LARRY.ELLISON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGxsl01JRTb2iuvg9lDxwb63OQ2fSE9RtbkIS5lHNozbFPrCncX3B94zh9JjF+gAjQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed56a0ff-fd1e-451b-90e5-663a97930841",
                            TwoFactorEnabled = false,
                            UserName = "larry.ellison@example.com"
                        },
                        new
                        {
                            Id = "119",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc9776c6-9171-4689-b55a-c3baf83e643f",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "richard.branson@example.com",
                            EmailConfirmed = true,
                            FirstName = "Richard",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Branson",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "RICHARD.BRANSON@EXAMPLE.COM",
                            NormalizedUserName = "RICHARD.BRANSON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPBVKnuze3p0DgdLLPROEadpryp+wvYG8glQX0b3AaD5vsw/KZ9Anz+bgVsR6r9lyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2223d436-a13c-40f3-ac88-c9124eb9d58c",
                            TwoFactorEnabled = false,
                            UserName = "richard.branson@example.com"
                        },
                        new
                        {
                            Id = "120",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9265ba3c-4f8a-4a9f-ab57-7d5a1ad1ee5f",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jack.ma@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jack",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Ma",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JACK.MA@EXAMPLE.COM",
                            NormalizedUserName = "JACK.MA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPsbKgOLxqvCjcbG3OSTVvFUlJbdhNeLjsL81Rdv0YMgYwORDKRt8GfOzNwnbPk/vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54279913-50f9-4c1a-bfbd-10026ecf59eb",
                            TwoFactorEnabled = false,
                            UserName = "jack.ma@example.com"
                        },
                        new
                        {
                            Id = "121",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b703f212-37b1-47a0-8e8a-ca256cfa844f",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warren.buffett@example.com",
                            EmailConfirmed = true,
                            FirstName = "Warren",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Buffett",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "WARREN.BUFFETT@EXAMPLE.COM",
                            NormalizedUserName = "WARREN.BUFFETT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPH23uQnpslV2kYg7cwreDSORFpNM2vsOiZhZ8tb238JqHkj0AwiEbJ2FvtEGXtazA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1809cb2d-ae89-4560-a113-92a2538a68f2",
                            TwoFactorEnabled = false,
                            UserName = "warren.buffett@example.com"
                        },
                        new
                        {
                            Id = "122",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4dc87b19-03d2-404c-83de-069fada7bfa0",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mary.barrett@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mary",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Barrett",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARY.BARRETT@EXAMPLE.COM",
                            NormalizedUserName = "MARY.BARRETT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECFsk+CsvJ5K7ICPeSWoiZYPROErm3oz0RyvI/OF5Yun6CxJ1a770Zroy2+cou0tEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00d6cd26-fe3d-4fa7-b3de-81ca5298a94e",
                            TwoFactorEnabled = false,
                            UserName = "mary.barrett@example.com"
                        },
                        new
                        {
                            Id = "123",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5933757-f669-4d7f-8d38-d12d1af0612a",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ginni.rometty@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ginni",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Rometty",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "GINNI.ROMETTY@EXAMPLE.COM",
                            NormalizedUserName = "GINNI.ROMETTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHcnGSEOeKqd2MoviYIOLhE6NSwdNJLVmhKQrwO5DtqigQMm3FME4ktf9veGYV3mfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8ae075a-5641-4ae7-8c10-d902e594de59",
                            TwoFactorEnabled = false,
                            UserName = "ginni.rometty@example.com"
                        },
                        new
                        {
                            Id = "124",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14a39915-9efa-40b9-854c-bff8828da559",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mark.benioff@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Benioff",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARK.BENIOFF@EXAMPLE.COM",
                            NormalizedUserName = "MARK.BENIOFF@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB44zEQFN6xOfM8UGdtrI6PAau+UNmJqpaUlYZU0KYvsF5CMLkN+wQJ/u+++uQ8Oug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "054a19fc-e595-412e-b854-f1ad0b581ea3",
                            TwoFactorEnabled = false,
                            UserName = "mark.benioff@example.com"
                        },
                        new
                        {
                            Id = "125",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5fe818f-b1b7-4dae-a14e-c1eb52a6c1d8",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kevin.systrom@example.com",
                            EmailConfirmed = true,
                            FirstName = "Kevin",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Systrom",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "KEVIN.SYSTROM@EXAMPLE.COM",
                            NormalizedUserName = "KEVIN.SYSTROM@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED4Lv72q/qVZE2t820xZzdxBVYCe7vfOKGD6ABDs+pIqRXLTlNbekEqxxTH0a+6YlA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61b26e9e-ab70-4096-b908-839fb8528214",
                            TwoFactorEnabled = false,
                            UserName = "kevin.systrom@example.com"
                        },
                        new
                        {
                            Id = "126",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "301d2e98-8f2f-4ffb-abe9-ab41fa24965b",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "evan.spiegel@example.com",
                            EmailConfirmed = true,
                            FirstName = "Evan",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Spiegel",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "EVAN.SPIEGEL@EXAMPLE.COM",
                            NormalizedUserName = "EVAN.SPIEGEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBaS3rVQbdZPPmjGv4Y6/27W7BrQ/Nko5dhlYF7BecGOce4F+mFys2IEVmu2ImGXwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4da74c0-40a9-48e6-b72c-21473a9fb2e1",
                            TwoFactorEnabled = false,
                            UserName = "evan.spiegel@example.com"
                        },
                        new
                        {
                            Id = "127",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d9953f9-8a6b-4d37-908f-5eb2ac58ac39",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jan.koum@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jan",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Koum",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JAN.KOUM@EXAMPLE.COM",
                            NormalizedUserName = "JAN.KOUM@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMXDnTkU12Bqd/aZOyzbqU/xM41ZokXwveYkb9vIBTJ65IzRLQ9V+ZPZhUCAFd9YOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "265d4061-402d-43ba-a1f0-062e05ce22c6",
                            TwoFactorEnabled = false,
                            UserName = "jan.koum@example.com"
                        },
                        new
                        {
                            Id = "128",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6498c00f-eb8c-4b3d-a161-5452a28887fe",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "janice.fang@example.com",
                            EmailConfirmed = true,
                            FirstName = "Janice",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Fang",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JANICE.FANG@EXAMPLE.COM",
                            NormalizedUserName = "JANICE.FANG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBIdjOJVFgWcL7h10JTHHvQ/t3maP9B9xKlH6Qr97LotNeTpbsA7J1g1JXzMsRNvEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39ad1988-0413-436c-b35f-d7ab5077d0cc",
                            TwoFactorEnabled = false,
                            UserName = "janice.fang@example.com"
                        },
                        new
                        {
                            Id = "129",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3742aa0c-7443-4f87-a97a-fdd6cba21fdf",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sergey.gladkikh@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sergey",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Gladkikh",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SERGEY.GLADKIKH@EXAMPLE.COM",
                            NormalizedUserName = "SERGEY.GLADKIKH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHVbfJ1Z2gc8EJXYsuAkSHiguxIhDp0y7P+SYHu7XZveGFRMax8l33q1ZUqSwd8tCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "32a9afa8-70c1-4605-9b5d-df61f4d0d6f9",
                            TwoFactorEnabled = false,
                            UserName = "sergey.gladkikh@example.com"
                        },
                        new
                        {
                            Id = "130",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ff7069b-7b5e-49ee-9175-be2882543049",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tony.hsieh@example.com",
                            EmailConfirmed = true,
                            FirstName = "Tony",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Hsieh",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "TONY.HSIEH@EXAMPLE.COM",
                            NormalizedUserName = "TONY.HSIEH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJQk9bmxxInsQgZ4rHG5ICQDATRi9Qz7T9LH7oxhsGyRuIHOnIznMQb7qu5CNsTmvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca03f1c9-4d3f-4095-b357-18b304e6ee9e",
                            TwoFactorEnabled = false,
                            UserName = "tony.hsieh@example.com"
                        },
                        new
                        {
                            Id = "131",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c139cdd3-dada-4031-a048-e735735706af",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "richard.hyne@example.com",
                            EmailConfirmed = true,
                            FirstName = "Richard",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Hyne",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "RICHARD.HYNE@EXAMPLE.COM",
                            NormalizedUserName = "RICHARD.HYNE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA9uT8u6tUaPzYtxlwTJCVRCweYjEB4LSsiWwyFNGZPf8qRwW8IapLDZo0ypwBV0jA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f77dd271-1d13-4b2c-9bc9-3b0c40a62b79",
                            TwoFactorEnabled = false,
                            UserName = "richard.hyne@example.com"
                        },
                        new
                        {
                            Id = "132",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1434dbf3-6e48-40f5-9a9d-b4151748428a",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "peter.thiel@example.com",
                            EmailConfirmed = true,
                            FirstName = "Peter",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Thiel",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "PETER.THIEL@EXAMPLE.COM",
                            NormalizedUserName = "PETER.THIEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEzYRE2VOq9jM5SaXGX2M7Bs681Xnk6GlQA0PudlbcZFOpzcpp+txUs5MNnsMguOBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c49be9a3-900f-4ff6-bc81-e4f51eb8c7e2",
                            TwoFactorEnabled = false,
                            UserName = "peter.thiel@example.com"
                        },
                        new
                        {
                            Id = "133",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a231eecd-3585-4cc7-859f-3a791cc99869",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "steve.wozniak@example.com",
                            EmailConfirmed = true,
                            FirstName = "Steve",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Wozniak",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "STEVE.WOZNIAK@EXAMPLE.COM",
                            NormalizedUserName = "STEVE.WOZNIAK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG9OKP7p9FdVuxgvRFnq/IX/m92wm4u6wTNQiCfQHaInvPrdIBdr4ToHVy4iZwKTCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6032d138-ce5d-45cc-a338-fca8ad1d0ab3",
                            TwoFactorEnabled = false,
                            UserName = "steve.wozniak@example.com"
                        },
                        new
                        {
                            Id = "134",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c084577-1dc7-4353-8c0f-00f32917d2df",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.carmack@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Carmack",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JOHN.CARMACK@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.CARMACK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHv/cEQQGAjMI18al6Yzh8zZaxd4EtX1B0T1Vmz7Lb6l20S0bRcu6NjftcN0dk4Dyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fbd43f32-6196-40cc-a603-6f1bc0b4209b",
                            TwoFactorEnabled = false,
                            UserName = "john.carmack@example.com"
                        },
                        new
                        {
                            Id = "135",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09bdd9af-43f4-433a-9a55-91b4fa0e68f8",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mike.zyda@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Zyda",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MIKE.ZYDA@EXAMPLE.COM",
                            NormalizedUserName = "MIKE.ZYDA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA0mVS7tiNFJlvCyI7rH09N+gQ9Bk5Yaq7BGw8+O0txeK4hzmHF9TjLCyH/VVoIrnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cdaaf947-b4ff-421c-aa8a-1f94589d80a4",
                            TwoFactorEnabled = false,
                            UserName = "mike.zyda@example.com"
                        },
                        new
                        {
                            Id = "136",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ac1d28b-deb1-4059-863f-744d10b3c1e3",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cheryl.sandberg@example.com",
                            EmailConfirmed = true,
                            FirstName = "Cheryl",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Sandberg",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "CHERYL.SANDBERG@EXAMPLE.COM",
                            NormalizedUserName = "CHERYL.SANDBERG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEInafrI3cIJasHo6TdTsHmTViU49urPBAYesAJ2HL40AadMPl62qu+COSfd3TluSFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10dde3d9-f131-4c3b-8797-53c6c6fb6a43",
                            TwoFactorEnabled = false,
                            UserName = "cheryl.sandberg@example.com"
                        },
                        new
                        {
                            Id = "137",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d61a9eac-5552-42fa-a6d0-67c872c220fa",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "karen.smith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Karen",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "KAREN.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "KAREN.SMITH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECuBlxOAek27sJP19r80ll8dsMKzf+IDshrWWcvWC/VanRl+yG9pkd8EwFOxqQ72Lw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ab8d595-9e59-4f4c-b990-83ec2d99517a",
                            TwoFactorEnabled = false,
                            UserName = "karen.smith@example.com"
                        },
                        new
                        {
                            Id = "138",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "845f450c-074a-4ac6-a955-f5f6468f1b7d",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david.lee@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Lee",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "DAVID.LEE@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.LEE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJdcU18/ZfKCVYocvqqMATPaGL3WHtYz2nqZQHvsPvFCPtNlZoGXuKkmhugxPfFRgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ba1bad88-cc8c-4a93-a785-918a28adfaa9",
                            TwoFactorEnabled = false,
                            UserName = "david.lee@example.com"
                        },
                        new
                        {
                            Id = "139",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "092dd7d7-64a7-4510-82b8-aa2f057e61dd",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "james.taylor@example.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JAMES.TAYLOR@EXAMPLE.COM",
                            NormalizedUserName = "JAMES.TAYLOR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENv4A92YkQ/ZcMCrP6/4/QCflRigWflVstsTg9rkxqANOfVbh+WfgUvVvnaWCu6oDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f1ac544-45ff-4050-9aa7-f2c6c2af47f7",
                            TwoFactorEnabled = false,
                            UserName = "james.taylor@example.com"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.AdminProfileModel", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("AdminRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("AppointedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("AdminProfiles");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAssignmentModel", b =>
                {
                    b.Property<int>("BillAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillAssignmentId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BillId")
                        .HasColumnType("int");

                    b.Property<string>("BillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillAssignmentId");

                    b.HasIndex("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("BillAssignment");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillItemsModel", b =>
                {
                    b.Property<int>("BillItemsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillItemsID"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BillItemsModelBillItemsID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BillItemsID");

                    b.HasIndex("BillItemsModelBillItemsID");

                    b.ToTable("BillItems");

                    b.HasData(
                        new
                        {
                            BillItemsID = 1,
                            AddedOn = new DateTime(2025, 4, 19, 8, 41, 34, 486, DateTimeKind.Utc).AddTicks(755),
                            Amount = 2000.00m,
                            Description = "Monthly HOA dues for maintenance, security, and amenities.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Homeowners Association (HOA) Fees",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 2,
                            AddedOn = new DateTime(2025, 4, 19, 8, 41, 34, 486, DateTimeKind.Utc).AddTicks(764),
                            Amount = 350.00m,
                            Description = "Monthly water consumption charges.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Water Bill",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 4,
                            AddedOn = new DateTime(2025, 4, 19, 8, 41, 34, 486, DateTimeKind.Utc).AddTicks(766),
                            Amount = 200.00m,
                            Description = "Monthly fee for waste disposal services.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Garbage Collection Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 5,
                            AddedOn = new DateTime(2025, 4, 19, 8, 41, 34, 486, DateTimeKind.Utc).AddTicks(768),
                            Amount = 1000.00m,
                            Description = "Monthly fee for 24/7 subdivision security services.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Security Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 6,
                            AddedOn = new DateTime(2025, 4, 19, 8, 41, 34, 486, DateTimeKind.Utc).AddTicks(769),
                            Amount = 300.00m,
                            Description = "Monthly fee for streetlight maintenance and electricity.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Street Lighting Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 7,
                            AddedOn = new DateTime(2025, 4, 19, 8, 41, 34, 486, DateTimeKind.Utc).AddTicks(770),
                            Amount = 500.00m,
                            Description = "Monthly fee for clubhouse upkeep and utilities.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Clubhouse Maintenance Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 8,
                            AddedOn = new DateTime(2025, 4, 19, 8, 41, 34, 486, DateTimeKind.Utc).AddTicks(772),
                            Amount = 1000.00m,
                            Description = "Monthly contribution toward shared property tax obligations.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Property Tax Contribution",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 9,
                            AddedOn = new DateTime(2025, 4, 19, 8, 41, 34, 486, DateTimeKind.Utc).AddTicks(773),
                            Amount = 800.00m,
                            Description = "Monthly contribution to the long-term repair and reserve fund.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Sinking Fund Contribution",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 10,
                            AddedOn = new DateTime(2025, 4, 19, 8, 41, 34, 486, DateTimeKind.Utc).AddTicks(774),
                            Amount = 250.00m,
                            Description = "Monthly fee for regular pest control services.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Pest Control Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 11,
                            AddedOn = new DateTime(2025, 4, 19, 8, 41, 34, 486, DateTimeKind.Utc).AddTicks(775),
                            Amount = 700.00m,
                            Description = "Monthly fee for road repair and upkeep.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Road Maintenance Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.BillModel", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RemainingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillPaymentModel", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BillAssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("BillAssignmentModelBillAssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("BillId")
                        .HasColumnType("int");

                    b.Property<int?>("BillModelBillId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BillAssignmentId");

                    b.HasIndex("BillAssignmentModelBillAssignmentId");

                    b.HasIndex("BillId");

                    b.HasIndex("BillModelBillId");

                    b.ToTable("BillPayment");
                });

            modelBuilder.Entity("Hometown_Application.Models.ChatMessageModel", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ApplicationUserId1");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Hometown_Application.Models.CommentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Hometown_Application.Models.ContactModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Hometown_Application.Models.DocumentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Hometown_Application.Models.EventModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isAllDay")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Hometown_Application.Models.FacilityModel", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilityId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(252)
                        .HasColumnType("nvarchar(252)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OtherType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RatePerHour")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("FacilityId");

                    b.ToTable("Facility");
                });

            modelBuilder.Entity("Hometown_Application.Models.FeedbackComplaintModel", b =>
                {
                    b.Property<int>("FeedbackComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackComplaintId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdminNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminReply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackComplaintId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedbackComplaints");
                });

            modelBuilder.Entity("Hometown_Application.Models.HomeownerProfileModel", b =>
                {
                    b.Property<int>("HomeownerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HomeownerId"));

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HouseModelHouseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPromotedToAdmin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPromotedToStaff")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MoveInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MoveOutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RegisteredOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HomeownerId");

                    b.HasIndex("HouseModelHouseId");

                    b.HasIndex("UserId");

                    b.ToTable("HomeownerProfiles");

                    b.HasData(
                        new
                        {
                            HomeownerId = 1,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1422),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1421),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1422),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1423),
                            UserId = "111"
                        },
                        new
                        {
                            HomeownerId = 2,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1431),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1430),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1430),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1431),
                            UserId = "112"
                        },
                        new
                        {
                            HomeownerId = 3,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1434),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1433),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1433),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1434),
                            UserId = "113"
                        },
                        new
                        {
                            HomeownerId = 4,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1436),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1435),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1436),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1437),
                            UserId = "114"
                        },
                        new
                        {
                            HomeownerId = 5,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1439),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1438),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1438),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1439),
                            UserId = "115"
                        },
                        new
                        {
                            HomeownerId = 6,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1441),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1440),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1441),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1442),
                            UserId = "116"
                        },
                        new
                        {
                            HomeownerId = 7,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1444),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1443),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1443),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1444),
                            UserId = "117"
                        },
                        new
                        {
                            HomeownerId = 8,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1446),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1445),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1445),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1447),
                            UserId = "118"
                        },
                        new
                        {
                            HomeownerId = 9,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1448),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1447),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1448),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1449),
                            UserId = "119"
                        },
                        new
                        {
                            HomeownerId = 10,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1451),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1450),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1450),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1451),
                            UserId = "120"
                        },
                        new
                        {
                            HomeownerId = 11,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1453),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1452),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1453),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1454),
                            UserId = "121"
                        },
                        new
                        {
                            HomeownerId = 12,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1456),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1455),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1455),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1456),
                            UserId = "122"
                        },
                        new
                        {
                            HomeownerId = 13,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1458),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1457),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1457),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1458),
                            UserId = "123"
                        },
                        new
                        {
                            HomeownerId = 14,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1460),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1459),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1460),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1461),
                            UserId = "124"
                        },
                        new
                        {
                            HomeownerId = 15,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1464),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1463),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1463),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1464),
                            UserId = "125"
                        },
                        new
                        {
                            HomeownerId = 16,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1467),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1465),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1466),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1467),
                            UserId = "126"
                        },
                        new
                        {
                            HomeownerId = 17,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1469),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1468),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1468),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1469),
                            UserId = "127"
                        },
                        new
                        {
                            HomeownerId = 18,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1471),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1470),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1471),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1472),
                            UserId = "128"
                        },
                        new
                        {
                            HomeownerId = 19,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1474),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1473),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1473),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1474),
                            UserId = "129"
                        },
                        new
                        {
                            HomeownerId = 20,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1476),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1475),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1475),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1476),
                            UserId = "130"
                        },
                        new
                        {
                            HomeownerId = 21,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1479),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1477),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1478),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1479),
                            UserId = "131"
                        },
                        new
                        {
                            HomeownerId = 22,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1481),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1480),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1480),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1481),
                            UserId = "132"
                        },
                        new
                        {
                            HomeownerId = 23,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1483),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1482),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1483),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1484),
                            UserId = "133"
                        },
                        new
                        {
                            HomeownerId = 24,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1486),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1485),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1485),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1486),
                            UserId = "134"
                        },
                        new
                        {
                            HomeownerId = 25,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1488),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1487),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1487),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1489),
                            UserId = "135"
                        },
                        new
                        {
                            HomeownerId = 26,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1490),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1489),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1490),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1491),
                            UserId = "136"
                        },
                        new
                        {
                            HomeownerId = 27,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1493),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1492),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1492),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1494),
                            UserId = "137"
                        },
                        new
                        {
                            HomeownerId = 28,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1499),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1498),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1499),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1500),
                            UserId = "138"
                        },
                        new
                        {
                            HomeownerId = 29,
                            ApprovedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1502),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1501),
                            MoveOutDate = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1501),
                            RegisteredOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1502),
                            UserId = "139"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.HouseModel", b =>
                {
                    b.Property<int?>("HouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("HouseId"));

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<int>("LotNumber")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HouseId");

                    b.HasIndex("UserId");

                    b.HasIndex("BlockName", "LotNumber", "StreetName")
                        .IsUnique();

                    b.ToTable("Houses");

                    b.HasData(
                        new
                        {
                            HouseId = 1,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Ashwood Lane",
                            UserId = "100"
                        },
                        new
                        {
                            HouseId = 2,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Ashwood Lane",
                            UserId = "102"
                        },
                        new
                        {
                            HouseId = 3,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Ashwood Lane",
                            UserId = "103"
                        },
                        new
                        {
                            HouseId = 4,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Ashwood Lane",
                            UserId = "104"
                        },
                        new
                        {
                            HouseId = 5,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Ashwood Lane",
                            UserId = "105"
                        },
                        new
                        {
                            HouseId = 6,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Birchwood Avenue",
                            UserId = "106"
                        },
                        new
                        {
                            HouseId = 7,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Birchwood Avenue",
                            UserId = "107"
                        },
                        new
                        {
                            HouseId = 8,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Birchwood Avenue",
                            UserId = "108"
                        },
                        new
                        {
                            HouseId = 9,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Birchwood Avenue",
                            UserId = "109"
                        },
                        new
                        {
                            HouseId = 10,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Birchwood Avenue",
                            UserId = "110"
                        },
                        new
                        {
                            HouseId = 11,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Cedar Hollow Road",
                            UserId = "111"
                        },
                        new
                        {
                            HouseId = 12,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Cedar Hollow Road",
                            UserId = "112"
                        },
                        new
                        {
                            HouseId = 13,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Cedar Hollow Road",
                            UserId = "113"
                        },
                        new
                        {
                            HouseId = 14,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Cedar Hollow Road",
                            UserId = "114"
                        },
                        new
                        {
                            HouseId = 15,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Cedar Hollow Road",
                            UserId = "115"
                        },
                        new
                        {
                            HouseId = 16,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Chestnut Boulevard",
                            UserId = "116"
                        },
                        new
                        {
                            HouseId = 17,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Chestnut Boulevard",
                            UserId = "117"
                        },
                        new
                        {
                            HouseId = 18,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Chestnut Boulevard",
                            UserId = "118"
                        },
                        new
                        {
                            HouseId = 19,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Chestnut Boulevard",
                            UserId = "119"
                        },
                        new
                        {
                            HouseId = 20,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Chestnut Boulevard",
                            UserId = "120"
                        },
                        new
                        {
                            HouseId = 21,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Crystal Drive",
                            UserId = "121"
                        },
                        new
                        {
                            HouseId = 22,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Crystal Drive",
                            UserId = "122"
                        },
                        new
                        {
                            HouseId = 23,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Crystal Drive",
                            UserId = "123"
                        },
                        new
                        {
                            HouseId = 24,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Crystal Drive",
                            UserId = "124"
                        },
                        new
                        {
                            HouseId = 25,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Crystal Drive",
                            UserId = "125"
                        },
                        new
                        {
                            HouseId = 26,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Elmwood Drive",
                            UserId = "126"
                        },
                        new
                        {
                            HouseId = 27,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Elmwood Drive",
                            UserId = "127"
                        },
                        new
                        {
                            HouseId = 28,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Elmwood Drive",
                            UserId = "128"
                        },
                        new
                        {
                            HouseId = 29,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Elmwood Drive",
                            UserId = "129"
                        },
                        new
                        {
                            HouseId = 30,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Elmwood Drive",
                            UserId = "130"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.PollModel", b =>
                {
                    b.Property<int>("PollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PollId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PollId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Polls");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollQuestionModel", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("PollId");

                    b.ToTable("PollQuestions");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollResponseModel", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseId"));

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("RespondentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TextResponse")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("ResponseId");

                    b.HasIndex("PollId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("RespondentId");

                    b.HasIndex("SelectedOptionId");

                    b.ToTable("PollResponses");
                });

            modelBuilder.Entity("Hometown_Application.Models.PostModel", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Hometown_Application.Models.QuestionOptionModel", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("Hometown_Application.Models.ReactionModel", b =>
                {
                    b.Property<int>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReactionId"));

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReactionId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("Hometown_Application.Models.RequestTypeModel", b =>
                {
                    b.Property<int>("RequestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestTypeId"));

                    b.Property<int>("AssignedDepartment")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RequestTypeId");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new
                        {
                            RequestTypeId = 1,
                            AssignedDepartment = 0,
                            Description = "Request for pool maintenance.",
                            IsActive = true,
                            Name = "Pool Cleaning"
                        },
                        new
                        {
                            RequestTypeId = 2,
                            AssignedDepartment = 1,
                            Description = "Report or ask about lost items.",
                            IsActive = true,
                            Name = "Lost and Found Inquiry"
                        },
                        new
                        {
                            RequestTypeId = 3,
                            AssignedDepartment = 2,
                            Description = "Concerns about billing and payments.",
                            IsActive = true,
                            Name = "Billing Issue"
                        },
                        new
                        {
                            RequestTypeId = 4,
                            AssignedDepartment = 3,
                            Description = "Report issues with internet connectivity.",
                            IsActive = true,
                            Name = "Internet Issue"
                        },
                        new
                        {
                            RequestTypeId = 5,
                            AssignedDepartment = 4,
                            Description = "Request lawn maintenance services.",
                            IsActive = true,
                            Name = "Lawn Mowing"
                        },
                        new
                        {
                            RequestTypeId = 6,
                            AssignedDepartment = 5,
                            Description = "Report plumbing issues like leaks.",
                            IsActive = true,
                            Name = "Plumbing Repair"
                        },
                        new
                        {
                            RequestTypeId = 7,
                            AssignedDepartment = 6,
                            Description = "Report security concerns or suspicious activity.",
                            IsActive = true,
                            Name = "Suspicious Activity"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.ReservationModel", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReservationId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceRequestModel", b =>
                {
                    b.Property<int>("ServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceRequestId"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancelReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CancelledOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HomeownerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RejectedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectedReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Schedule")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Urgency")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ServiceRequestId");

                    b.HasIndex("HomeownerId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceStaffAssignmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnavailable")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("ServiceStaffAssignments");
                });

            modelBuilder.Entity("Hometown_Application.Models.StaffProfileModel", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("AccountCreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AccountCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmergencyContactNumber")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("EmergencyContactRelation")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActiveEmployee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAlsoHomeOwner")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFired")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Salary")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("StaffProfiles");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(932),
                            Address = "123 Main St",
                            Department = 6,
                            EmergencyContactName = "Jane Doe",
                            EmergencyContactNumber = "1234567890",
                            EmergencyContactRelation = "Spouse",
                            HireDate = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Security Officer",
                            Salary = 25000.00m,
                            UserId = "100"
                        },
                        new
                        {
                            StaffId = 2,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(958),
                            Address = "456 Oak St",
                            Department = 5,
                            EmergencyContactName = "John Smith",
                            EmergencyContactNumber = "0987654321",
                            EmergencyContactRelation = "Brother",
                            HireDate = new DateTime(2021, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Maintenance Supervisor",
                            Salary = 30000.00m,
                            UserId = "102"
                        },
                        new
                        {
                            StaffId = 3,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(970),
                            Address = "789 Pine St",
                            Department = 3,
                            EmergencyContactName = "Alice Brown",
                            EmergencyContactNumber = "5678901234",
                            EmergencyContactRelation = "Sister",
                            HireDate = new DateTime(2020, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "System Administrator",
                            Salary = 35000.00m,
                            UserId = "103"
                        },
                        new
                        {
                            StaffId = 4,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(981),
                            Address = "987 Cedar St",
                            Department = 2,
                            EmergencyContactName = "Bob White",
                            EmergencyContactNumber = "2345678901",
                            EmergencyContactRelation = "Father",
                            HireDate = new DateTime(2019, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Finance Manager",
                            Salary = 40000.00m,
                            UserId = "104"
                        },
                        new
                        {
                            StaffId = 5,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(993),
                            Address = "654 Birch St",
                            Department = 0,
                            EmergencyContactName = "Chris Green",
                            EmergencyContactNumber = "3456789012",
                            EmergencyContactRelation = "Friend",
                            HireDate = new DateTime(2021, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Amenities Coordinator",
                            Salary = 28000.00m,
                            UserId = "105"
                        },
                        new
                        {
                            StaffId = 6,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1002),
                            Address = "321 Maple St",
                            Department = 1,
                            EmergencyContactName = "Diana Blue",
                            EmergencyContactNumber = "4567890123",
                            EmergencyContactRelation = "Cousin",
                            HireDate = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Customer Service Representative",
                            Salary = 26000.00m,
                            UserId = "106"
                        },
                        new
                        {
                            StaffId = 7,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1230),
                            Address = "159 Elm St",
                            Department = 4,
                            EmergencyContactName = "Evan Red",
                            EmergencyContactNumber = "5678901234",
                            EmergencyContactRelation = "Uncle",
                            HireDate = new DateTime(2020, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Head Gardener",
                            Salary = 27000.00m,
                            UserId = "107"
                        },
                        new
                        {
                            StaffId = 8,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1239),
                            Address = "123 Main St",
                            Department = 6,
                            EmergencyContactName = "Jane Doe",
                            EmergencyContactNumber = "1234567890",
                            EmergencyContactRelation = "Spouse",
                            HireDate = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Security Officer",
                            Salary = 25000.00m,
                            UserId = "108"
                        },
                        new
                        {
                            StaffId = 9,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1248),
                            Address = "456 Oak St",
                            Department = 5,
                            EmergencyContactName = "John Smith",
                            EmergencyContactNumber = "0987654321",
                            EmergencyContactRelation = "Brother",
                            HireDate = new DateTime(2021, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Maintenance Supervisor",
                            Salary = 30000.00m,
                            UserId = "109"
                        },
                        new
                        {
                            StaffId = 10,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 19, 8, 41, 36, 758, DateTimeKind.Utc).AddTicks(1308),
                            Address = "789 Pine St",
                            Department = 3,
                            EmergencyContactName = "Alice Brown",
                            EmergencyContactNumber = "5678901234",
                            EmergencyContactRelation = "Sister",
                            HireDate = new DateTime(2020, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "System Administrator",
                            Salary = 35000.00m,
                            UserId = "110"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.StatusModel", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "Available"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "Unavailable"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Pending"
                        },
                        new
                        {
                            StatusId = 4,
                            StatusName = "In Progress"
                        },
                        new
                        {
                            StatusId = 5,
                            StatusName = "Resolved"
                        },
                        new
                        {
                            StatusId = 6,
                            StatusName = "Closed"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.VehicleGatepassModel", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GatePassExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GatePassIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleBrand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("VehicleImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("VehiclePlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleId");

                    b.HasIndex("UserId");

                    b.ToTable("VehicleGatepasses");
                });

            modelBuilder.Entity("Hometown_Application.Models.VisitorGatepassModel", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdminNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExpectedArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GatePassExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GatePassIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfVisitors")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehiclePlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehicleType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VisitorId");

                    b.HasIndex("UserId");

                    b.ToTable("VisitorGatepasses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "HomeOwner",
                            NormalizedName = "HOMEOWNER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "100",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "102",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "103",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "104",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "105",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "106",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "107",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "108",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "109",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "110",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "111",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "112",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "113",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "114",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "115",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "116",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "117",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "118",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "119",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "120",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "121",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "122",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "123",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "124",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "125",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "126",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "127",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "128",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "129",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "130",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "131",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "132",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "133",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "134",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "135",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "136",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "137",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "138",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "139",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Hometown_Application.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.HasOne("Hometown_Application.Models.AdminProfileModel", "AdminProfiles")
                        .WithMany()
                        .HasForeignKey("AdminProfilesAdminId");

                    b.HasOne("Hometown_Application.Models.BillAssignmentModel", null)
                        .WithMany("Users")
                        .HasForeignKey("BillAssignmentModelBillAssignmentId");

                    b.HasOne("Hometown_Application.Models.HomeownerProfileModel", "HomeownerProfiles")
                        .WithMany()
                        .HasForeignKey("HomeownerProfilesHomeownerId");

                    b.HasOne("Hometown_Application.Models.StaffProfileModel", "StaffProfiles")
                        .WithMany()
                        .HasForeignKey("StaffProfilesStaffId");

                    b.Navigation("AdminProfiles");

                    b.Navigation("HomeownerProfiles");

                    b.Navigation("StaffProfiles");
                });

            modelBuilder.Entity("Hometown_Application.Models.AdminProfileModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAssignmentModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillModel", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillItemsModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillItemsModel", null)
                        .WithMany("BillItems")
                        .HasForeignKey("BillItemsModelBillItemsID");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillPaymentModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillAssignmentModel", "BillAssignment")
                        .WithMany()
                        .HasForeignKey("BillAssignmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Hometown_Application.Models.BillAssignmentModel", null)
                        .WithMany("Payments")
                        .HasForeignKey("BillAssignmentModelBillAssignmentId");

                    b.HasOne("Hometown_Application.Models.BillModel", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Hometown_Application.Models.BillModel", null)
                        .WithMany("Payments")
                        .HasForeignKey("BillModelBillId");

                    b.Navigation("Bill");

                    b.Navigation("BillAssignment");
                });

            modelBuilder.Entity("Hometown_Application.Models.ChatMessageModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany("SentMessages")
                        .HasForeignKey("ApplicationUserId1");

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Hometown_Application.Models.CommentModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PostModel", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Hometown_Application.Models.FeedbackComplaintModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.StatusModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Hometown_Application.Models.HomeownerProfileModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.HouseModel", null)
                        .WithMany("Homeowners")
                        .HasForeignKey("HouseModelHouseId");

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.HouseModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollQuestionModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PollModel", "Poll")
                        .WithMany("Questions")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollResponseModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PollModel", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Models.PollQuestionModel", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Respondent")
                        .WithMany()
                        .HasForeignKey("RespondentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hometown_Application.Models.QuestionOptionModel", "SelectedOption")
                        .WithMany("Responses")
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Poll");

                    b.Navigation("Question");

                    b.Navigation("Respondent");

                    b.Navigation("SelectedOption");
                });

            modelBuilder.Entity("Hometown_Application.Models.PostModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.QuestionOptionModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PollQuestionModel", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Hometown_Application.Models.ReactionModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PostModel", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Hometown_Application.Models.ReservationModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.FacilityModel", "Facility")
                        .WithMany("Reservations")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceRequestModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.HomeownerProfileModel", "Homeowner")
                        .WithMany()
                        .HasForeignKey("HomeownerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Hometown_Application.Models.RequestTypeModel", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Models.StatusModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Homeowner");

                    b.Navigation("RequestType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceStaffAssignmentModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Hometown_Application.Models.StaffProfileModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.VehicleGatepassModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.VisitorGatepassModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hometown_Application.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAssignmentModel", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillItemsModel", b =>
                {
                    b.Navigation("BillItems");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillModel", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Hometown_Application.Models.FacilityModel", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Hometown_Application.Models.HouseModel", b =>
                {
                    b.Navigation("Homeowners");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollModel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollQuestionModel", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Hometown_Application.Models.PostModel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Hometown_Application.Models.QuestionOptionModel", b =>
                {
                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
