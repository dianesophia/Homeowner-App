// <auto-generated />
using System;
using Hometown_Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hometown_Application.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250417110058_AWERAWERAWER")]
    partial class AWERAWERAWER
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hometown_Application.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AdminProfilesAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("BillAssignmentModelBillAssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FacebookProfile")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("HomeownerProfilesHomeownerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActiveUser")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBirthdayPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGenderPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LinkedInProfile")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("MakeFacebookPublic")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffProfilesStaffId")
                        .HasColumnType("int");

                    b.Property<string>("TwitterProfile")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AdminProfilesAdminId");

                    b.HasIndex("BillAssignmentModelBillAssignmentId");

                    b.HasIndex("HomeownerProfilesHomeownerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StaffProfilesStaffId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "100",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09c360cf-824d-4d54-8f86-794cbbb1b577",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elon.musk@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elon",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Musk",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "ELON.MUSK@EXAMPLE.COM",
                            NormalizedUserName = "ELON.MUSK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGxi16Z2+NjsAZBQDayt4igX8Sq2M8979wy9qF23d0rzOefMgXhiLN8GcpctKe3AXA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicturePath = "wwwroot/images/picc.png",
                            SecurityStamp = "a0c9b211-097c-4487-a34a-5e8cf73f0734",
                            TwoFactorEnabled = false,
                            UserName = "elon.musk@example.com"
                        },
                        new
                        {
                            Id = "102",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03d2b7f4-c2ee-4804-83b0-1c38e24706af",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bill.gates@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bill",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Gates",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "BILL.GATES@EXAMPLE.COM",
                            NormalizedUserName = "BILL.GATES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDasJWZhY1UJyomVg0MWlx+zcsGWMI229OfSn7FTXTOVc58CTJOZqZTFbcQKZs/OLw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83d0803b-78b7-4012-b6f0-ce9180bed756",
                            TwoFactorEnabled = false,
                            UserName = "bill.gates@example.com"
                        },
                        new
                        {
                            Id = "103",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3edd1541-ffbb-4b13-b657-eb5b224d5b61",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mark.zuckerberg@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Zuckerberg",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARK.ZUCKERBERG@EXAMPLE.COM",
                            NormalizedUserName = "MARK.ZUCKERBERG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIa49xZkrrJ8lQr4S+dVoQlUPxEtyW7CGEDFirPzvzxTZaE8Aubl5y09KYKsWokRgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57752603-add7-4718-b918-dd538f6255a6",
                            TwoFactorEnabled = false,
                            UserName = "mark.zuckerberg@example.com"
                        },
                        new
                        {
                            Id = "104",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3c90eb9-cdf6-41f4-bb5c-033086c1c4a5",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sundar.pichai@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sundar",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Pichai",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SUNDAR.PICHAI@EXAMPLE.COM",
                            NormalizedUserName = "SUNDAR.PICHAI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELSQZWJHvkLHrgXtPoy4MTNE9gwgzkflZiWbkprjqZZ456Yg1UjIAgWCSeaT7IATaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "894aed89-fb63-419b-8327-57a5875579fc",
                            TwoFactorEnabled = false,
                            UserName = "sundar.pichai@example.com"
                        },
                        new
                        {
                            Id = "105",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8350f440-489a-4b4c-86a3-deb799d2dd9e",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tim.cook@example.com",
                            EmailConfirmed = true,
                            FirstName = "Tim",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Cook",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "TIM.COOK@EXAMPLE.COM",
                            NormalizedUserName = "TIM.COOK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECrcfUXewgp0zIRuhJXw/dM6OxyfgCeQjbX6qkjaGssHqytTsR5J+Po5tsRBCfnoSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1cbf57a7-3d48-4f77-8e52-75d5a4d18a9c",
                            TwoFactorEnabled = false,
                            UserName = "tim.cook@example.com"
                        },
                        new
                        {
                            Id = "106",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73b74e85-286d-4d57-a541-3ff1af32a011",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "satya.nadella@example.com",
                            EmailConfirmed = true,
                            FirstName = "Satya",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Nadella",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SATYA.NADELLA@EXAMPLE.COM",
                            NormalizedUserName = "SATYA.NADELLA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI08YCEk7pYPTn6NkkhZ1lr/qcf6MeNFsOnDoAHyimz/XQVf4mxJKmzGJpATTewDOw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da704c72-530f-4347-b0f3-e2519e663a62",
                            TwoFactorEnabled = false,
                            UserName = "satya.nadella@example.com"
                        },
                        new
                        {
                            Id = "107",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e88b26c-15f1-4922-9ca0-02ba471bb8fb",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jack.dorsey@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jack",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Dorsey",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JACK.DORSEY@EXAMPLE.COM",
                            NormalizedUserName = "JACK.DORSEY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIhuZXh6HuoY/AxLmxnY9TRsIUKX7ZYv4oVeomCJDCI7jYvzPqlXqWH7Nm8LdatS6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3bc86071-c2e5-4462-b5e1-8032134c6e39",
                            TwoFactorEnabled = false,
                            UserName = "jack.dorsey@example.com"
                        },
                        new
                        {
                            Id = "108",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ffc9429-d2c3-40a3-80dc-e116e35dfee9",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "larry.page@example.com",
                            EmailConfirmed = true,
                            FirstName = "Larry",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Page",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "LARRY.PAGE@EXAMPLE.COM",
                            NormalizedUserName = "LARRY.PAGE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGpMHz+nOZtiLgu/xIH8dB1Zn3vU6fv9oKIFjuFMjdOokX+H2Y0d4AHl21Kpx74kZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b67c746-8a32-40c6-8ac9-fe5c3b08138d",
                            TwoFactorEnabled = false,
                            UserName = "larry.page@example.com"
                        },
                        new
                        {
                            Id = "109",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec3ec883-7cc8-437b-b738-f74cb08dd877",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sergey.brin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sergey",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Brin",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SERGEY.BRIN@EXAMPLE.COM",
                            NormalizedUserName = "SERGEY.BRIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI2luoMJb/j48fARwn+WM3ybTHbNsUlmrBXgKrhdaGnj5MUN0YpD4dIrEJ/CT1nEzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e03fc21e-3991-4afb-b450-b1cb9c05ad5b",
                            TwoFactorEnabled = false,
                            UserName = "sergey.brin@example.com"
                        },
                        new
                        {
                            Id = "110",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21b3a8a9-a511-41fa-8ba9-c878d68f25d1",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "steve.jobs@example.com",
                            EmailConfirmed = true,
                            FirstName = "Steve",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Jobs",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "STEVE.JOBS@EXAMPLE.COM",
                            NormalizedUserName = "STEVE.JOBS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHsGHFtRg1/0QIcERPp0DFedgzptQ6f0ZB/gaqpJyfW2neqkByqs4yq2+VRD+No8wg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9be50230-0954-4f65-9506-ae010dd3dade",
                            TwoFactorEnabled = false,
                            UserName = "steve.jobs@example.com"
                        },
                        new
                        {
                            Id = "111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01aead9f-4b73-4c76-8237-48daca40300c",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sheryl.sandberg@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sheryl",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Sandberg",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SHERYL.SANDBERG@EXAMPLE.COM",
                            NormalizedUserName = "SHERYL.SANDBERG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECF1yrlYkGtWOpVMK9k/MghiVNdlCTDM9jqygaQx6bVw913LhzDl/kzZhksuB4p1hQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "69ef4428-0a63-4243-8ec9-1bb6da69e645",
                            TwoFactorEnabled = false,
                            UserName = "sheryl.sandberg@example.com"
                        },
                        new
                        {
                            Id = "112",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf41aadf-ffec-4d5f-8671-fae372aaa8a1",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "reed.hastings@example.com",
                            EmailConfirmed = true,
                            FirstName = "Reed",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Hastings",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "REED.HASTINGS@EXAMPLE.COM",
                            NormalizedUserName = "REED.HASTINGS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJncXUN1jX5bcP6p2XUQdEuugn4u3Vbr7XsTQhoIwsk55UhV7XU8w8C0SfmjZ+qt0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "791cce56-af15-4329-a05d-0bf6aed78639",
                            TwoFactorEnabled = false,
                            UserName = "reed.hastings@example.com"
                        },
                        new
                        {
                            Id = "113",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9e46f0a-03ff-4db9-a55a-0ff31df4a399",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marissa.mayer@example.com",
                            EmailConfirmed = true,
                            FirstName = "Marissa",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Mayer",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARISSA.MAYER@EXAMPLE.COM",
                            NormalizedUserName = "MARISSA.MAYER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPvgcwohoTy/tVZAZ2tmtMrK42CMnhxrAgjvJjRuyR4V3CqP95sVmkf4R/Jysby5rA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7cf18d9e-0d9a-4121-b3a8-31d1e6c85e92",
                            TwoFactorEnabled = false,
                            UserName = "marissa.mayer@example.com"
                        },
                        new
                        {
                            Id = "114",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e6ea3eb-7513-4c01-ab91-313f9be68a7b",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elizabeth.holmes@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elizabeth",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Holmes",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "ELIZABETH.HOLMES@EXAMPLE.COM",
                            NormalizedUserName = "ELIZABETH.HOLMES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMcSIpCFgmqNqBzoCnm1MdWuFkYsLaUx41Y5aFTepXmd2LKemNERAfe/uuWHJ/SW2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f060330-e862-47a2-b25c-0481a74bea7b",
                            TwoFactorEnabled = false,
                            UserName = "elizabeth.holmes@example.com"
                        },
                        new
                        {
                            Id = "115",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09d3097b-f9d0-488c-a687-3458dc2d855c",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "susan.wojcicki@example.com",
                            EmailConfirmed = true,
                            FirstName = "Susan",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Wojcicki",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SUSAN.WOJCICKI@EXAMPLE.COM",
                            NormalizedUserName = "SUSAN.WOJCICKI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGaKfTLgnb0qxDRE7fk2cxkZ86hZAoKseKiyTxlyut5B7pHchHact7Vkwn7p6zlROw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "735d87f7-0781-42de-bc31-fa2c39a4d133",
                            TwoFactorEnabled = false,
                            UserName = "susan.wojcicki@example.com"
                        },
                        new
                        {
                            Id = "116",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2abab477-9469-43f1-a402-fc19017ff4f8",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tim.arnold@example.com",
                            EmailConfirmed = true,
                            FirstName = "Tim",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Arnold",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "TIM.ARNOLD@EXAMPLE.COM",
                            NormalizedUserName = "TIM.ARNOLD@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOVW/tiWOx+bc2m7S0+lLnT/rh8S7NrhZwGJvx1APBUZohD+JNZ0X2OZ14SbRRs7tw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e80f1951-3f2c-499a-a56d-3039dcb2a4c3",
                            TwoFactorEnabled = false,
                            UserName = "tim.arnold@example.com"
                        },
                        new
                        {
                            Id = "117",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38470169-5c67-4da5-a390-313342e6b6ef",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.iger@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Iger",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "BOB.IGER@EXAMPLE.COM",
                            NormalizedUserName = "BOB.IGER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAm1iGm5Qncle1tAMEcn6+Z6x+yrwkLCrqV+7Z9tIc7YTh04K2d/eAeUcpAnEghrgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f00889a3-6c82-488c-b40d-53cc23c290c4",
                            TwoFactorEnabled = false,
                            UserName = "bob.iger@example.com"
                        },
                        new
                        {
                            Id = "118",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9869ec0-855a-4ba7-9f1a-0983f699cbd6",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "larry.ellison@example.com",
                            EmailConfirmed = true,
                            FirstName = "Larry",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Ellison",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "LARRY.ELLISON@EXAMPLE.COM",
                            NormalizedUserName = "LARRY.ELLISON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGAYH9HuQ8Om1Kw2Y5Es0ttKawu6zZRSh5CG9new4hByKAi3qXLisGd+12RFv1ELYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "32b621ae-6634-4149-9417-bf4973731a0c",
                            TwoFactorEnabled = false,
                            UserName = "larry.ellison@example.com"
                        },
                        new
                        {
                            Id = "119",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca8f5f55-b930-4e3a-b5e2-524bc9d66106",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "richard.branson@example.com",
                            EmailConfirmed = true,
                            FirstName = "Richard",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Branson",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "RICHARD.BRANSON@EXAMPLE.COM",
                            NormalizedUserName = "RICHARD.BRANSON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECXL+B/zw0Z/8yLf/0uzA4C11n9QvlBIVzLqxksP1ppRyO9su0N/Kyfl+QxCmdMJbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "076acac3-8227-498d-a3c0-1581406c10a3",
                            TwoFactorEnabled = false,
                            UserName = "richard.branson@example.com"
                        },
                        new
                        {
                            Id = "120",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "364f10f0-16d9-479d-a560-948804961cbc",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jack.ma@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jack",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Ma",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JACK.MA@EXAMPLE.COM",
                            NormalizedUserName = "JACK.MA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPhZX7rM4WTyhrBp2BIq2CEgai2x6LAehBLdtTj9x/d0uZXtWtKCp/Qopx8bIDYF8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40663358-2da0-45d6-b10d-20aafca7290b",
                            TwoFactorEnabled = false,
                            UserName = "jack.ma@example.com"
                        },
                        new
                        {
                            Id = "121",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "327d04d0-504f-46cd-a654-c4ed73967bf3",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warren.buffett@example.com",
                            EmailConfirmed = true,
                            FirstName = "Warren",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Buffett",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "WARREN.BUFFETT@EXAMPLE.COM",
                            NormalizedUserName = "WARREN.BUFFETT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENuQ+/86RG5vkjZxNBxQmdL8y+Quv4TlvnF2R4GtE0h420j/FBEuNxSYPK5H2barmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7cb6734a-17ed-4fb3-8940-3aa05fc3481c",
                            TwoFactorEnabled = false,
                            UserName = "warren.buffett@example.com"
                        },
                        new
                        {
                            Id = "122",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94c331ab-a805-4dd8-ac6a-181038425ee3",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mary.barrett@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mary",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Barrett",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARY.BARRETT@EXAMPLE.COM",
                            NormalizedUserName = "MARY.BARRETT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMuRSr5zsH1CSwN+CfEgHnqIZY2UniAaQJSjGPCBLS7OjWedO5JM8Gtbzp5x8Ah8Aw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "089ab1c5-f50e-4e2d-9283-64919bc27ce4",
                            TwoFactorEnabled = false,
                            UserName = "mary.barrett@example.com"
                        },
                        new
                        {
                            Id = "123",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6df8b7d3-2e61-4fca-91cc-83346afe07ef",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ginni.rometty@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ginni",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Rometty",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "GINNI.ROMETTY@EXAMPLE.COM",
                            NormalizedUserName = "GINNI.ROMETTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN14/4DBR2sSwLBcNfdFpXDut5W8hE54+9uWAy06xnPpIdthC9iriqSTYvhTdzRQLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d9602a8-b6f7-4172-bb98-cc2a2fc897d6",
                            TwoFactorEnabled = false,
                            UserName = "ginni.rometty@example.com"
                        },
                        new
                        {
                            Id = "124",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "606f86b3-2fea-4e1e-8a91-921084adbbc0",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mark.benioff@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Benioff",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARK.BENIOFF@EXAMPLE.COM",
                            NormalizedUserName = "MARK.BENIOFF@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI6jJfbFFMRg6nhEAIn+rCfbrBDp+KPpTvH5agHJVda42Mx186X1jkjy1xXw/yvlZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85f01a34-58b7-4524-aee4-b2d1ca0fe499",
                            TwoFactorEnabled = false,
                            UserName = "mark.benioff@example.com"
                        },
                        new
                        {
                            Id = "125",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d0ddc9d-0cdc-4afa-8ed7-c9e589f93911",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kevin.systrom@example.com",
                            EmailConfirmed = true,
                            FirstName = "Kevin",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Systrom",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "KEVIN.SYSTROM@EXAMPLE.COM",
                            NormalizedUserName = "KEVIN.SYSTROM@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHJfGjCunQOleQY6qYd6ltXV0fi5bWXQXQmiFiWrzALNPXQhWH6eWG+kiTWrus9j1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8c2575f-7e04-49bc-bac9-30597ca68605",
                            TwoFactorEnabled = false,
                            UserName = "kevin.systrom@example.com"
                        },
                        new
                        {
                            Id = "126",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0595c48-cad9-406d-8eb7-98969b61418e",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "evan.spiegel@example.com",
                            EmailConfirmed = true,
                            FirstName = "Evan",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Spiegel",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "EVAN.SPIEGEL@EXAMPLE.COM",
                            NormalizedUserName = "EVAN.SPIEGEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKLyJLYOG5z6JMWIisaYK8n7R9dAnI7ZwtM85D2+HDR5HFal2xHaiohl5I2ZYOASnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4269ae70-34b3-4cf0-beb8-0f198814a480",
                            TwoFactorEnabled = false,
                            UserName = "evan.spiegel@example.com"
                        },
                        new
                        {
                            Id = "127",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc7e023e-5a65-44f1-a146-2c4a43ce07c0",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jan.koum@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jan",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Koum",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JAN.KOUM@EXAMPLE.COM",
                            NormalizedUserName = "JAN.KOUM@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHFEtO6LdAifqScF4z+rzOPaK6OKv4gkDfpu+cZBr1qVGVwBHTh9DgZ8kSrBkYfQFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a53e54ea-3cee-4ca5-9256-ec9c564cd470",
                            TwoFactorEnabled = false,
                            UserName = "jan.koum@example.com"
                        },
                        new
                        {
                            Id = "128",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "720a8fba-4433-4ff8-9146-c316b6d96a4d",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "janice.fang@example.com",
                            EmailConfirmed = true,
                            FirstName = "Janice",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Fang",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JANICE.FANG@EXAMPLE.COM",
                            NormalizedUserName = "JANICE.FANG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAuwDO7UMrMxw58bTMlxEVl6tMgX3hZMzdXjv+Ya4m7qjH4FvsOkXOXfG4vVdSrhSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5c00e3c-a918-4346-9e9e-bb241b0abe1c",
                            TwoFactorEnabled = false,
                            UserName = "janice.fang@example.com"
                        },
                        new
                        {
                            Id = "129",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1973fcb1-a8c1-46b3-bb3f-c7835b220dab",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sergey.gladkikh@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sergey",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Gladkikh",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SERGEY.GLADKIKH@EXAMPLE.COM",
                            NormalizedUserName = "SERGEY.GLADKIKH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENOCO/fyiiAJr9XBTPx9FbPrDATd6wMDF0pdlc+2aDDfCbH93ZWvhBbncqT7Agvo6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f64cf304-243f-4528-9cfe-8b56082a66d0",
                            TwoFactorEnabled = false,
                            UserName = "sergey.gladkikh@example.com"
                        },
                        new
                        {
                            Id = "130",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7aea1098-09b8-440c-85fd-6add916c67a0",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tony.hsieh@example.com",
                            EmailConfirmed = true,
                            FirstName = "Tony",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Hsieh",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "TONY.HSIEH@EXAMPLE.COM",
                            NormalizedUserName = "TONY.HSIEH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF9lqGJ4/YD7SOlCPPVT2Trny/8yfcLgRZ55taa3CcrYyK30nMfcbukQ8IMNukcliQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f7be19c4-fcbe-4c1b-9d94-328ea0cf06eb",
                            TwoFactorEnabled = false,
                            UserName = "tony.hsieh@example.com"
                        },
                        new
                        {
                            Id = "131",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4da65b17-ed17-493e-9875-292e5e499685",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "richard.hyne@example.com",
                            EmailConfirmed = true,
                            FirstName = "Richard",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Hyne",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "RICHARD.HYNE@EXAMPLE.COM",
                            NormalizedUserName = "RICHARD.HYNE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL1HW/FRUzB5NVAdb4Q2tFEGW2spmyOMEuvw26aYeDedU4xEuhVJYchuOVob58uBjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0bd4d299-bd9a-4cb6-b32c-65e24408d6da",
                            TwoFactorEnabled = false,
                            UserName = "richard.hyne@example.com"
                        },
                        new
                        {
                            Id = "132",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24466bf7-5f18-432d-98a3-f05cd647f4c3",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "peter.thiel@example.com",
                            EmailConfirmed = true,
                            FirstName = "Peter",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Thiel",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "PETER.THIEL@EXAMPLE.COM",
                            NormalizedUserName = "PETER.THIEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPg7rGATZ9yat9LATOEumvb3X2/B5dlnIz+bzXKq/DvSzNYbFhl0Sv5NdWwYsrL03Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74945f80-795f-45f1-8e92-6138f7f5108c",
                            TwoFactorEnabled = false,
                            UserName = "peter.thiel@example.com"
                        },
                        new
                        {
                            Id = "133",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4992a668-5aff-4dcb-a867-146e79fdc002",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "steve.wozniak@example.com",
                            EmailConfirmed = true,
                            FirstName = "Steve",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Wozniak",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "STEVE.WOZNIAK@EXAMPLE.COM",
                            NormalizedUserName = "STEVE.WOZNIAK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMLgadeoSFgZT1dEMUIDQ6D5PYIEaX4vmdzhnIJMhBmo9l0IHSWzu0IZeina5pH+dg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "acb9a217-ddae-4223-9479-f24e9efaf9c9",
                            TwoFactorEnabled = false,
                            UserName = "steve.wozniak@example.com"
                        },
                        new
                        {
                            Id = "134",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aebcd001-b5a1-4d0b-973c-3283440e2f65",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.carmack@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Carmack",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JOHN.CARMACK@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.CARMACK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIPHJl3bBFKc9CA/0jL6IDlaIc+uLOMTMXmSjdKkVpw6TZktxMpVy8uCBAee0V5riw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "64b44696-47a3-47db-acc0-5022af24bccb",
                            TwoFactorEnabled = false,
                            UserName = "john.carmack@example.com"
                        },
                        new
                        {
                            Id = "135",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a86e2bec-3f57-41ca-b3e5-812d4ea5c091",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mike.zyda@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Zyda",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MIKE.ZYDA@EXAMPLE.COM",
                            NormalizedUserName = "MIKE.ZYDA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELBPCBVXPJghUgHJaxHKvsCKdqFTSvQmiSO7dRoauxVo/4Zc1m42P7QhYarKhyPbAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42b406db-ecc3-4e89-a7a4-b5f3e8d650e6",
                            TwoFactorEnabled = false,
                            UserName = "mike.zyda@example.com"
                        },
                        new
                        {
                            Id = "136",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0df1a2fb-ca42-48a4-9bc7-7492db0d5fe3",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cheryl.sandberg@example.com",
                            EmailConfirmed = true,
                            FirstName = "Cheryl",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Sandberg",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "CHERYL.SANDBERG@EXAMPLE.COM",
                            NormalizedUserName = "CHERYL.SANDBERG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPA4YXLulJjbu22SXO6etYhZ5xl8KpY/K1wePp7x0ipgIvxSatfK1DNJ4j20SbTDog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19c085f8-56f2-4969-9cae-285cb96b9554",
                            TwoFactorEnabled = false,
                            UserName = "cheryl.sandberg@example.com"
                        },
                        new
                        {
                            Id = "137",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25601708-f1c8-4f1d-892a-967814f13dff",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "karen.smith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Karen",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "KAREN.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "KAREN.SMITH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDWcfT3tK0u19GXZbsKXoWyihR+f4bk8dt7H2DzUlLiyDUscUGD+8dJWNrc2oZSymA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d7851b3-2a95-469f-a774-db4842f34aa3",
                            TwoFactorEnabled = false,
                            UserName = "karen.smith@example.com"
                        },
                        new
                        {
                            Id = "138",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "700cbdfc-b009-4633-94e2-867baba12edc",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david.lee@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Lee",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "DAVID.LEE@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.LEE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMOOIC1e5yN31jXZ3x8aGkm6Rc6q7cdv9vBM+cHjljYzktXDYZbhHP/iGIb63PDmFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d698e91-86a1-4a04-b266-dd3e62228473",
                            TwoFactorEnabled = false,
                            UserName = "david.lee@example.com"
                        },
                        new
                        {
                            Id = "139",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "044eb643-fc88-4c4c-a8ae-96aa157aa497",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "james.taylor@example.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JAMES.TAYLOR@EXAMPLE.COM",
                            NormalizedUserName = "JAMES.TAYLOR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI2BawySjoOCQI87v8RE54cqmFjp0vxy/99VHE2RmMO4Mei2KbJhtSMlo7nD8Vvfkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c7d4405-d995-41fe-b483-e5a7c4ce7137",
                            TwoFactorEnabled = false,
                            UserName = "james.taylor@example.com"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.AdminProfileModel", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("AdminRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("AppointedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("AdminProfiles");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAssignmentModel", b =>
                {
                    b.Property<int>("BillAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillAssignmentId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BillId")
                        .HasColumnType("int");

                    b.Property<string>("BillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillAssignmentId");

                    b.HasIndex("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("BillAssignment");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillDetailModel", b =>
                {
                    b.Property<int>("BillDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillDetailId"));

                    b.Property<decimal>("ActualAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<int>("BillItemsID")
                        .HasColumnType("int");

                    b.Property<decimal?>("CustomAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BillDetailId");

                    b.HasIndex("BillId");

                    b.HasIndex("BillItemsID");

                    b.ToTable("BillDetail");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillItemsModel", b =>
                {
                    b.Property<int>("BillItemsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillItemsID"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BillItemsModelBillItemsID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BillItemsID");

                    b.HasIndex("BillItemsModelBillItemsID");

                    b.ToTable("BillItems");

                    b.HasData(
                        new
                        {
                            BillItemsID = 1,
                            AddedOn = new DateTime(2025, 4, 17, 11, 0, 54, 643, DateTimeKind.Utc).AddTicks(8792),
                            Amount = 3500.00m,
                            Description = "Monthly HOA dues covering maintenance, security, and amenities.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Homeowners Association (HOA) Fees",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 2,
                            AddedOn = new DateTime(2025, 4, 17, 11, 0, 54, 643, DateTimeKind.Utc).AddTicks(8802),
                            Amount = 100.00m,
                            Description = "Monthly water consumption charges.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Water Bill",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 4,
                            AddedOn = new DateTime(2025, 4, 17, 11, 0, 54, 643, DateTimeKind.Utc).AddTicks(8804),
                            Amount = 300.00m,
                            Description = "Monthly fee for waste disposal services.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Garbage Collection Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 5,
                            AddedOn = new DateTime(2025, 4, 17, 11, 0, 54, 643, DateTimeKind.Utc).AddTicks(8806),
                            Amount = 1500.00m,
                            Description = "Monthly fee for subdivision security services.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Security Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 6,
                            AddedOn = new DateTime(2025, 4, 17, 11, 0, 54, 643, DateTimeKind.Utc).AddTicks(8807),
                            Amount = 500.00m,
                            Description = "Monthly fee for streetlight maintenance.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Street Lighting Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 7,
                            AddedOn = new DateTime(2025, 4, 17, 11, 0, 54, 643, DateTimeKind.Utc).AddTicks(8808),
                            Amount = 800.00m,
                            Description = "Annual fee for maintaining the clubhouse and shared spaces.",
                            IsDeleted = false,
                            PaymentDuration = "Yearly",
                            PaymentName = "Clubhouse Maintenance Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 8,
                            AddedOn = new DateTime(2025, 4, 17, 11, 0, 54, 643, DateTimeKind.Utc).AddTicks(8809),
                            Amount = 5000.00m,
                            Description = "Annual contribution for property tax remittance.",
                            IsDeleted = false,
                            PaymentDuration = "Yearly",
                            PaymentName = "Property Tax Contribution",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 9,
                            AddedOn = new DateTime(2025, 4, 17, 11, 0, 54, 643, DateTimeKind.Utc).AddTicks(8812),
                            Amount = 1200.00m,
                            Description = "Quarterly contribution for major subdivision repairs.",
                            IsDeleted = false,
                            PaymentDuration = "Quarterly",
                            PaymentName = "Sinking Fund Contribution",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 10,
                            AddedOn = new DateTime(2025, 4, 17, 11, 0, 54, 643, DateTimeKind.Utc).AddTicks(8813),
                            Amount = 600.00m,
                            Description = "Quarterly fee for pest control services in the subdivision.",
                            IsDeleted = false,
                            PaymentDuration = "Quarterly",
                            PaymentName = "Pest Control Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 11,
                            AddedOn = new DateTime(2025, 4, 17, 11, 0, 54, 643, DateTimeKind.Utc).AddTicks(8815),
                            Amount = 1000.00m,
                            Description = "Annual fee for road maintenance and repairs.",
                            IsDeleted = false,
                            PaymentDuration = "Yearly",
                            PaymentName = "Road Maintenance Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.BillModel", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RemainingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillPaymentModel", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BillId");

                    b.ToTable("BillPayment");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillTransactionModel", b =>
                {
                    b.Property<int>("BillTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillTransactionId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BillItemsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PaidBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillTransactionId");

                    b.HasIndex("BillItemsId");

                    b.HasIndex("UserId");

                    b.ToTable("BillTransactions");
                });

            modelBuilder.Entity("Hometown_Application.Models.ChatMessageModel", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ApplicationUserId1");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Hometown_Application.Models.CommentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Hometown_Application.Models.ContactModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Hometown_Application.Models.DocumentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Hometown_Application.Models.EventModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isAllDay")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Hometown_Application.Models.FacilityModel", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilityId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(252)
                        .HasColumnType("nvarchar(252)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OtherType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("FacilityId");

                    b.ToTable("Facility");
                });

            modelBuilder.Entity("Hometown_Application.Models.FeedbackComplaintModel", b =>
                {
                    b.Property<int>("FeedbackComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackComplaintId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdminNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminReply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackComplaintId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedbackComplaints");
                });

            modelBuilder.Entity("Hometown_Application.Models.HomeownerProfileModel", b =>
                {
                    b.Property<int>("HomeownerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HomeownerId"));

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HouseModelHouseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPromotedToAdmin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPromotedToStaff")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MoveInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MoveOutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RegisteredOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HomeownerId");

                    b.HasIndex("HouseModelHouseId");

                    b.HasIndex("UserId");

                    b.ToTable("HomeownerProfiles");

                    b.HasData(
                        new
                        {
                            HomeownerId = 1,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7429),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7427),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7428),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7429),
                            UserId = "111"
                        },
                        new
                        {
                            HomeownerId = 2,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7435),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7434),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7434),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7435),
                            UserId = "112"
                        },
                        new
                        {
                            HomeownerId = 3,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7437),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7436),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7437),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7438),
                            UserId = "113"
                        },
                        new
                        {
                            HomeownerId = 4,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7440),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7439),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7439),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7440),
                            UserId = "114"
                        },
                        new
                        {
                            HomeownerId = 5,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7442),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7441),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7442),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7443),
                            UserId = "115"
                        },
                        new
                        {
                            HomeownerId = 6,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7445),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7444),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7444),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7445),
                            UserId = "116"
                        },
                        new
                        {
                            HomeownerId = 7,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7447),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7446),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7447),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7448),
                            UserId = "117"
                        },
                        new
                        {
                            HomeownerId = 8,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7450),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7449),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7449),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7450),
                            UserId = "118"
                        },
                        new
                        {
                            HomeownerId = 9,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7452),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7451),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7452),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7453),
                            UserId = "119"
                        },
                        new
                        {
                            HomeownerId = 10,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7455),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7454),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7454),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7455),
                            UserId = "120"
                        },
                        new
                        {
                            HomeownerId = 11,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7457),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7456),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7457),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7458),
                            UserId = "121"
                        },
                        new
                        {
                            HomeownerId = 12,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7460),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7459),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7459),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7460),
                            UserId = "122"
                        },
                        new
                        {
                            HomeownerId = 13,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7462),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7461),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7461),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7463),
                            UserId = "123"
                        },
                        new
                        {
                            HomeownerId = 14,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7465),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7464),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7464),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7465),
                            UserId = "124"
                        },
                        new
                        {
                            HomeownerId = 15,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7467),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7466),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7467),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7468),
                            UserId = "125"
                        },
                        new
                        {
                            HomeownerId = 16,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7470),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7469),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7469),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7470),
                            UserId = "126"
                        },
                        new
                        {
                            HomeownerId = 17,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7472),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7471),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7472),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7473),
                            UserId = "127"
                        },
                        new
                        {
                            HomeownerId = 18,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7474),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7473),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7474),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7475),
                            UserId = "128"
                        },
                        new
                        {
                            HomeownerId = 19,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7477),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7476),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7476),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7477),
                            UserId = "129"
                        },
                        new
                        {
                            HomeownerId = 20,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7479),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7478),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7478),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7480),
                            UserId = "130"
                        },
                        new
                        {
                            HomeownerId = 21,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7481),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7480),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7481),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7482),
                            UserId = "131"
                        },
                        new
                        {
                            HomeownerId = 22,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7484),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7483),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7483),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7484),
                            UserId = "132"
                        },
                        new
                        {
                            HomeownerId = 23,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7486),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7485),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7485),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7487),
                            UserId = "133"
                        },
                        new
                        {
                            HomeownerId = 24,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7489),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7487),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7488),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7489),
                            UserId = "134"
                        },
                        new
                        {
                            HomeownerId = 25,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7491),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7490),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7491),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7492),
                            UserId = "135"
                        },
                        new
                        {
                            HomeownerId = 26,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7494),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7492),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7493),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7494),
                            UserId = "136"
                        },
                        new
                        {
                            HomeownerId = 27,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7496),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7495),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7495),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7496),
                            UserId = "137"
                        },
                        new
                        {
                            HomeownerId = 28,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7498),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7497),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7497),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7499),
                            UserId = "138"
                        },
                        new
                        {
                            HomeownerId = 29,
                            ApprovedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7504),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7503),
                            MoveOutDate = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7503),
                            RegisteredOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7504),
                            UserId = "139"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.HouseModel", b =>
                {
                    b.Property<int?>("HouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("HouseId"));

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<int>("LotNumber")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HouseId");

                    b.HasIndex("UserId");

                    b.HasIndex("BlockName", "LotNumber", "StreetName")
                        .IsUnique();

                    b.ToTable("Houses");

                    b.HasData(
                        new
                        {
                            HouseId = 1,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Ashwood Lane",
                            UserId = "100"
                        },
                        new
                        {
                            HouseId = 2,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Ashwood Lane",
                            UserId = "102"
                        },
                        new
                        {
                            HouseId = 3,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Ashwood Lane",
                            UserId = "103"
                        },
                        new
                        {
                            HouseId = 4,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Ashwood Lane",
                            UserId = "104"
                        },
                        new
                        {
                            HouseId = 5,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Ashwood Lane",
                            UserId = "105"
                        },
                        new
                        {
                            HouseId = 6,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Birchwood Avenue",
                            UserId = "106"
                        },
                        new
                        {
                            HouseId = 7,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Birchwood Avenue",
                            UserId = "107"
                        },
                        new
                        {
                            HouseId = 8,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Birchwood Avenue",
                            UserId = "108"
                        },
                        new
                        {
                            HouseId = 9,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Birchwood Avenue",
                            UserId = "109"
                        },
                        new
                        {
                            HouseId = 10,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Birchwood Avenue",
                            UserId = "110"
                        },
                        new
                        {
                            HouseId = 11,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Cedar Hollow Road",
                            UserId = "111"
                        },
                        new
                        {
                            HouseId = 12,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Cedar Hollow Road",
                            UserId = "112"
                        },
                        new
                        {
                            HouseId = 13,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Cedar Hollow Road",
                            UserId = "113"
                        },
                        new
                        {
                            HouseId = 14,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Cedar Hollow Road",
                            UserId = "114"
                        },
                        new
                        {
                            HouseId = 15,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Cedar Hollow Road",
                            UserId = "115"
                        },
                        new
                        {
                            HouseId = 16,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Chestnut Boulevard",
                            UserId = "116"
                        },
                        new
                        {
                            HouseId = 17,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Chestnut Boulevard",
                            UserId = "117"
                        },
                        new
                        {
                            HouseId = 18,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Chestnut Boulevard",
                            UserId = "118"
                        },
                        new
                        {
                            HouseId = 19,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Chestnut Boulevard",
                            UserId = "119"
                        },
                        new
                        {
                            HouseId = 20,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Chestnut Boulevard",
                            UserId = "120"
                        },
                        new
                        {
                            HouseId = 21,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Crystal Drive",
                            UserId = "121"
                        },
                        new
                        {
                            HouseId = 22,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Crystal Drive",
                            UserId = "122"
                        },
                        new
                        {
                            HouseId = 23,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Crystal Drive",
                            UserId = "123"
                        },
                        new
                        {
                            HouseId = 24,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Crystal Drive",
                            UserId = "124"
                        },
                        new
                        {
                            HouseId = 25,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Crystal Drive",
                            UserId = "125"
                        },
                        new
                        {
                            HouseId = 26,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Elmwood Drive",
                            UserId = "126"
                        },
                        new
                        {
                            HouseId = 27,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Elmwood Drive",
                            UserId = "127"
                        },
                        new
                        {
                            HouseId = 28,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Elmwood Drive",
                            UserId = "128"
                        },
                        new
                        {
                            HouseId = 29,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Elmwood Drive",
                            UserId = "129"
                        },
                        new
                        {
                            HouseId = 30,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Elmwood Drive",
                            UserId = "130"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.PollModel", b =>
                {
                    b.Property<int>("PollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PollId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PollId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Polls");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollQuestionModel", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("PollId");

                    b.ToTable("PollQuestions");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollResponseModel", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseId"));

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("RespondentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TextResponse")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("ResponseId");

                    b.HasIndex("PollId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("RespondentId");

                    b.HasIndex("SelectedOptionId");

                    b.ToTable("PollResponses");
                });

            modelBuilder.Entity("Hometown_Application.Models.PostModel", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Hometown_Application.Models.QuestionOptionModel", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("Hometown_Application.Models.ReactionModel", b =>
                {
                    b.Property<int>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReactionId"));

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReactionId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("Hometown_Application.Models.RequestTypeModel", b =>
                {
                    b.Property<int>("RequestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestTypeId"));

                    b.Property<int>("AssignedDepartment")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RequestTypeId");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new
                        {
                            RequestTypeId = 1,
                            AssignedDepartment = 0,
                            Description = "Request for pool maintenance.",
                            IsActive = true,
                            Name = "Pool Cleaning"
                        },
                        new
                        {
                            RequestTypeId = 2,
                            AssignedDepartment = 1,
                            Description = "Report or ask about lost items.",
                            IsActive = true,
                            Name = "Lost and Found Inquiry"
                        },
                        new
                        {
                            RequestTypeId = 3,
                            AssignedDepartment = 2,
                            Description = "Concerns about billing and payments.",
                            IsActive = true,
                            Name = "Billing Issue"
                        },
                        new
                        {
                            RequestTypeId = 4,
                            AssignedDepartment = 3,
                            Description = "Report issues with internet connectivity.",
                            IsActive = true,
                            Name = "Internet Issue"
                        },
                        new
                        {
                            RequestTypeId = 5,
                            AssignedDepartment = 4,
                            Description = "Request lawn maintenance services.",
                            IsActive = true,
                            Name = "Lawn Mowing"
                        },
                        new
                        {
                            RequestTypeId = 6,
                            AssignedDepartment = 5,
                            Description = "Report plumbing issues like leaks.",
                            IsActive = true,
                            Name = "Plumbing Repair"
                        },
                        new
                        {
                            RequestTypeId = 7,
                            AssignedDepartment = 6,
                            Description = "Report security concerns or suspicious activity.",
                            IsActive = true,
                            Name = "Suspicious Activity"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.ReservationModel", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReservationId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceRequestModel", b =>
                {
                    b.Property<int>("ServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceRequestId"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancelReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CancelledOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HomeownerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RejectedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectedReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Schedule")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Urgency")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ServiceRequestId");

                    b.HasIndex("HomeownerId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceStaffAssignmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnavailable")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("ServiceStaffAssignments");
                });

            modelBuilder.Entity("Hometown_Application.Models.StaffProfileModel", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("AccountCreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AccountCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmergencyContactNumber")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("EmergencyContactRelation")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActiveEmployee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAlsoHomeOwner")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFired")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Salary")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("StaffProfiles");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7000),
                            Address = "123 Main St",
                            Department = 6,
                            EmergencyContactName = "Jane Doe",
                            EmergencyContactNumber = "1234567890",
                            EmergencyContactRelation = "Spouse",
                            HireDate = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Security Officer",
                            Salary = 25000.00m,
                            UserId = "100"
                        },
                        new
                        {
                            StaffId = 2,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7013),
                            Address = "456 Oak St",
                            Department = 5,
                            EmergencyContactName = "John Smith",
                            EmergencyContactNumber = "0987654321",
                            EmergencyContactRelation = "Brother",
                            HireDate = new DateTime(2021, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Maintenance Supervisor",
                            Salary = 30000.00m,
                            UserId = "102"
                        },
                        new
                        {
                            StaffId = 3,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7021),
                            Address = "789 Pine St",
                            Department = 3,
                            EmergencyContactName = "Alice Brown",
                            EmergencyContactNumber = "5678901234",
                            EmergencyContactRelation = "Sister",
                            HireDate = new DateTime(2020, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "System Administrator",
                            Salary = 35000.00m,
                            UserId = "103"
                        },
                        new
                        {
                            StaffId = 4,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7030),
                            Address = "987 Cedar St",
                            Department = 2,
                            EmergencyContactName = "Bob White",
                            EmergencyContactNumber = "2345678901",
                            EmergencyContactRelation = "Father",
                            HireDate = new DateTime(2019, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Finance Manager",
                            Salary = 40000.00m,
                            UserId = "104"
                        },
                        new
                        {
                            StaffId = 5,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7038),
                            Address = "654 Birch St",
                            Department = 0,
                            EmergencyContactName = "Chris Green",
                            EmergencyContactNumber = "3456789012",
                            EmergencyContactRelation = "Friend",
                            HireDate = new DateTime(2021, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Amenities Coordinator",
                            Salary = 28000.00m,
                            UserId = "105"
                        },
                        new
                        {
                            StaffId = 6,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7044),
                            Address = "321 Maple St",
                            Department = 1,
                            EmergencyContactName = "Diana Blue",
                            EmergencyContactNumber = "4567890123",
                            EmergencyContactRelation = "Cousin",
                            HireDate = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Customer Service Representative",
                            Salary = 26000.00m,
                            UserId = "106"
                        },
                        new
                        {
                            StaffId = 7,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7050),
                            Address = "159 Elm St",
                            Department = 4,
                            EmergencyContactName = "Evan Red",
                            EmergencyContactNumber = "5678901234",
                            EmergencyContactRelation = "Uncle",
                            HireDate = new DateTime(2020, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Head Gardener",
                            Salary = 27000.00m,
                            UserId = "107"
                        },
                        new
                        {
                            StaffId = 8,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7055),
                            Address = "123 Main St",
                            Department = 6,
                            EmergencyContactName = "Jane Doe",
                            EmergencyContactNumber = "1234567890",
                            EmergencyContactRelation = "Spouse",
                            HireDate = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Security Officer",
                            Salary = 25000.00m,
                            UserId = "108"
                        },
                        new
                        {
                            StaffId = 9,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7060),
                            Address = "456 Oak St",
                            Department = 5,
                            EmergencyContactName = "John Smith",
                            EmergencyContactNumber = "0987654321",
                            EmergencyContactRelation = "Brother",
                            HireDate = new DateTime(2021, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Maintenance Supervisor",
                            Salary = 30000.00m,
                            UserId = "109"
                        },
                        new
                        {
                            StaffId = 10,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 17, 11, 0, 56, 820, DateTimeKind.Utc).AddTicks(7205),
                            Address = "789 Pine St",
                            Department = 3,
                            EmergencyContactName = "Alice Brown",
                            EmergencyContactNumber = "5678901234",
                            EmergencyContactRelation = "Sister",
                            HireDate = new DateTime(2020, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "System Administrator",
                            Salary = 35000.00m,
                            UserId = "110"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.StatusModel", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "Available"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "Unavailable"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Pending"
                        },
                        new
                        {
                            StatusId = 4,
                            StatusName = "In Progress"
                        },
                        new
                        {
                            StatusId = 5,
                            StatusName = "Resolved"
                        },
                        new
                        {
                            StatusId = 6,
                            StatusName = "Closed"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.VehicleGatepassModel", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GatePassExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GatePassIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleBrand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("VehicleImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("VehiclePlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleId");

                    b.HasIndex("UserId");

                    b.ToTable("VehicleGatepasses");
                });

            modelBuilder.Entity("Hometown_Application.Models.VisitorGatepassModel", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdminNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExpectedArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GatePassExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GatePassIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfVisitors")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehiclePlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehicleType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VisitorId");

                    b.HasIndex("UserId");

                    b.ToTable("VisitorGatepasses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "HomeOwner",
                            NormalizedName = "HOMEOWNER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "100",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "102",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "103",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "104",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "105",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "106",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "107",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "108",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "109",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "110",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "111",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "112",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "113",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "114",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "115",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "116",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "117",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "118",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "119",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "120",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "121",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "122",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "123",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "124",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "125",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "126",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "127",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "128",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "129",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "130",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "131",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "132",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "133",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "134",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "135",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "136",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "137",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "138",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "139",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Hometown_Application.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.HasOne("Hometown_Application.Models.AdminProfileModel", "AdminProfiles")
                        .WithMany()
                        .HasForeignKey("AdminProfilesAdminId");

                    b.HasOne("Hometown_Application.Models.BillAssignmentModel", null)
                        .WithMany("Users")
                        .HasForeignKey("BillAssignmentModelBillAssignmentId");

                    b.HasOne("Hometown_Application.Models.HomeownerProfileModel", "HomeownerProfiles")
                        .WithMany()
                        .HasForeignKey("HomeownerProfilesHomeownerId");

                    b.HasOne("Hometown_Application.Models.StaffProfileModel", "StaffProfiles")
                        .WithMany()
                        .HasForeignKey("StaffProfilesStaffId");

                    b.Navigation("AdminProfiles");

                    b.Navigation("HomeownerProfiles");

                    b.Navigation("StaffProfiles");
                });

            modelBuilder.Entity("Hometown_Application.Models.AdminProfileModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAssignmentModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillModel", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillDetailModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillModel", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Models.BillItemsModel", "BillItemType")
                        .WithMany()
                        .HasForeignKey("BillItemsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("BillItemType");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillItemsModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillItemsModel", null)
                        .WithMany("BillItems")
                        .HasForeignKey("BillItemsModelBillItemsID");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillPaymentModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillModel", "Bill")
                        .WithMany("Payments")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillTransactionModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillItemsModel", "BillItemsModel")
                        .WithMany()
                        .HasForeignKey("BillItemsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("BillItemsModel");
                });

            modelBuilder.Entity("Hometown_Application.Models.ChatMessageModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany("SentMessages")
                        .HasForeignKey("ApplicationUserId1");

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Hometown_Application.Models.CommentModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PostModel", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Hometown_Application.Models.FeedbackComplaintModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.StatusModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Hometown_Application.Models.HomeownerProfileModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.HouseModel", null)
                        .WithMany("Homeowners")
                        .HasForeignKey("HouseModelHouseId");

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.HouseModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollQuestionModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PollModel", "Poll")
                        .WithMany("Questions")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollResponseModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PollModel", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Models.PollQuestionModel", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Respondent")
                        .WithMany()
                        .HasForeignKey("RespondentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hometown_Application.Models.QuestionOptionModel", "SelectedOption")
                        .WithMany("Responses")
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Poll");

                    b.Navigation("Question");

                    b.Navigation("Respondent");

                    b.Navigation("SelectedOption");
                });

            modelBuilder.Entity("Hometown_Application.Models.PostModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.QuestionOptionModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PollQuestionModel", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Hometown_Application.Models.ReactionModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PostModel", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Hometown_Application.Models.ReservationModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.FacilityModel", "Facility")
                        .WithMany("Reservations")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceRequestModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.HomeownerProfileModel", "Homeowner")
                        .WithMany()
                        .HasForeignKey("HomeownerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Hometown_Application.Models.RequestTypeModel", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Models.StatusModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Homeowner");

                    b.Navigation("RequestType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceStaffAssignmentModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Hometown_Application.Models.StaffProfileModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.VehicleGatepassModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.VisitorGatepassModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hometown_Application.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAssignmentModel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillItemsModel", b =>
                {
                    b.Navigation("BillItems");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillModel", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Hometown_Application.Models.FacilityModel", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Hometown_Application.Models.HouseModel", b =>
                {
                    b.Navigation("Homeowners");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollModel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollQuestionModel", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Hometown_Application.Models.PostModel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Hometown_Application.Models.QuestionOptionModel", b =>
                {
                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
