// <auto-generated />
using System;
using Hometown_Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hometown_Application.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hometown_Application.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AdminProfilesAdminId")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FacebookProfile")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("HomeownerProfilesHomeownerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActiveUser")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBirthdayPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGenderPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LinkedInProfile")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("MakeFacebookPublic")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffProfilesStaffId")
                        .HasColumnType("int");

                    b.Property<string>("TwitterProfile")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AdminProfilesAdminId");

                    b.HasIndex("HomeownerProfilesHomeownerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StaffProfilesStaffId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "100",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77af6a94-0444-4072-8efb-124c1f71e1aa",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elon.musk@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elon",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Musk",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "ELON.MUSK@EXAMPLE.COM",
                            NormalizedUserName = "ELON.MUSK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHUk6TWGhXuQh3LNeK4mODpWypfq2HiIlI9S2LDv3/hJoDjFwWgxydqmVlMC3P8uSA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicturePath = "wwwroot/images/picc.png",
                            SecurityStamp = "2213b82d-8495-48a6-b266-5d2825799a0a",
                            TwoFactorEnabled = false,
                            UserName = "elon.musk@example.com"
                        },
                        new
                        {
                            Id = "102",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e6759cd-7300-48e9-bcf1-82c7d6060962",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bill.gates@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bill",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Gates",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "BILL.GATES@EXAMPLE.COM",
                            NormalizedUserName = "BILL.GATES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFQfmgqVd6aGZ5j7rOgqPgIJ8cX82SgOxA1JR5aOAIE5lRn6b2vOn2w5xPJNmBOEng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "53d9d258-6a7d-4ef1-8194-0ac51675e397",
                            TwoFactorEnabled = false,
                            UserName = "bill.gates@example.com"
                        },
                        new
                        {
                            Id = "103",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09f7a226-d426-4da6-a294-b988ec2ec144",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mark.zuckerberg@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Zuckerberg",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARK.ZUCKERBERG@EXAMPLE.COM",
                            NormalizedUserName = "MARK.ZUCKERBERG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPw1/pXfE+9NamuLNPjxsaSK/Y8EKNtqX632KqJSrM7+QZWvtAD+JxxPC/auCdtAsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8ca553a-7a40-45c9-9257-589123c41c08",
                            TwoFactorEnabled = false,
                            UserName = "mark.zuckerberg@example.com"
                        },
                        new
                        {
                            Id = "104",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b6fe136-777d-494a-b047-3251d339f4c1",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sundar.pichai@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sundar",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Pichai",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SUNDAR.PICHAI@EXAMPLE.COM",
                            NormalizedUserName = "SUNDAR.PICHAI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENGknSLis3g2Ir82t56bgDNmtYsdZcXHgST13ONEOaOrPaIfNFFA67wDofMlps0/9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5cf6481-7448-499d-a28f-c29c1c71ab69",
                            TwoFactorEnabled = false,
                            UserName = "sundar.pichai@example.com"
                        },
                        new
                        {
                            Id = "105",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7b1fdf8-6bb4-4b7c-ba9d-f23d2723d75a",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tim.cook@example.com",
                            EmailConfirmed = true,
                            FirstName = "Tim",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Cook",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "TIM.COOK@EXAMPLE.COM",
                            NormalizedUserName = "TIM.COOK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEODLYDUiwO+LWn2Kh1yWNoBqIrB+LgzSWWuglR4GYR6j7QiZ8Gra/u3KAcg8nqsnfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8355406-2487-4f06-94a7-670f540dac4c",
                            TwoFactorEnabled = false,
                            UserName = "tim.cook@example.com"
                        },
                        new
                        {
                            Id = "106",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04ad621e-3f28-4b70-98d1-24128197542c",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "satya.nadella@example.com",
                            EmailConfirmed = true,
                            FirstName = "Satya",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Nadella",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SATYA.NADELLA@EXAMPLE.COM",
                            NormalizedUserName = "SATYA.NADELLA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKUmk1LlApzAhDkg9uBtluhhaIi3la6g2p1AREgli2HYXELMPv44xdL5zh3F6onMNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab64de86-2b92-4aac-b828-566697fd8801",
                            TwoFactorEnabled = false,
                            UserName = "satya.nadella@example.com"
                        },
                        new
                        {
                            Id = "107",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86e57f12-a8cc-4441-91d3-484c5838dbdb",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jack.dorsey@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jack",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Dorsey",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JACK.DORSEY@EXAMPLE.COM",
                            NormalizedUserName = "JACK.DORSEY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELl3BJfQfLaZ/WLZz4Uev3tj64BBBn4cfsE3BZnnPp9FZrMhQPXFTdIlyR+bk6Bj5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37125ac3-c9d6-441e-adbe-01baddf86d7b",
                            TwoFactorEnabled = false,
                            UserName = "jack.dorsey@example.com"
                        },
                        new
                        {
                            Id = "108",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3314a10-1ea0-4e96-b326-62957e55d99b",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "larry.page@example.com",
                            EmailConfirmed = true,
                            FirstName = "Larry",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Page",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "LARRY.PAGE@EXAMPLE.COM",
                            NormalizedUserName = "LARRY.PAGE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMv2szZ9jU1pZV+Zg3pbVCBwLkW+F9njvOwqESR8sH1A+xFN9+qspBPkGIA3363e+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "157f35d6-c652-491e-b4a0-176abc16db1e",
                            TwoFactorEnabled = false,
                            UserName = "larry.page@example.com"
                        },
                        new
                        {
                            Id = "109",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9eb6d8ce-bf92-4b10-bba2-0e883c3b2733",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sergey.brin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sergey",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Brin",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SERGEY.BRIN@EXAMPLE.COM",
                            NormalizedUserName = "SERGEY.BRIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMwJZWbuz9Tx+idBGxE64A+i0p6ZE+lviu8+yqe827N40Uk9EtP5siFsE29B2S07yw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e4a123c-3ec7-45d3-a729-36c039494a99",
                            TwoFactorEnabled = false,
                            UserName = "sergey.brin@example.com"
                        },
                        new
                        {
                            Id = "110",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6164140-6599-4e8d-b7b1-f281e95f98dc",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "steve.jobs@example.com",
                            EmailConfirmed = true,
                            FirstName = "Steve",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Jobs",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "STEVE.JOBS@EXAMPLE.COM",
                            NormalizedUserName = "STEVE.JOBS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJQ6oz7Zar5Hqm+iGU2/+C7+Cww+uZF5PsfWd0YDWM2h3wryKO8hXtlHZtzy/tNfSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19c3312d-6d3d-4594-8781-fecb811f2b35",
                            TwoFactorEnabled = false,
                            UserName = "steve.jobs@example.com"
                        },
                        new
                        {
                            Id = "111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d8834aa-4f75-4b64-82a5-a3397a714834",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sheryl.sandberg@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sheryl",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Sandberg",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SHERYL.SANDBERG@EXAMPLE.COM",
                            NormalizedUserName = "SHERYL.SANDBERG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJmNSFzI1Sa0+ch+UQ8fyDYBrAklpCy1orpg5zlEWDI8zqwMYXVZ0MSbdiIGwSbzPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6c77d36-72f7-4ee2-ac65-ac1fd1f4d12a",
                            TwoFactorEnabled = false,
                            UserName = "sheryl.sandberg@example.com"
                        },
                        new
                        {
                            Id = "112",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63586344-f170-43bb-b807-a0c9bdc419e6",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "reed.hastings@example.com",
                            EmailConfirmed = true,
                            FirstName = "Reed",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Hastings",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "REED.HASTINGS@EXAMPLE.COM",
                            NormalizedUserName = "REED.HASTINGS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKqnDwXM92VL5LbZ1CriavYlFdHCo4Iz5T2gXiaOxJSKRv67alRSnrGpZKhdpUgMVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "58e03555-2d0b-4e71-83e8-10713e195125",
                            TwoFactorEnabled = false,
                            UserName = "reed.hastings@example.com"
                        },
                        new
                        {
                            Id = "113",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "531b911a-70a0-4a05-a11f-1c7a127fabd6",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marissa.mayer@example.com",
                            EmailConfirmed = true,
                            FirstName = "Marissa",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Mayer",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARISSA.MAYER@EXAMPLE.COM",
                            NormalizedUserName = "MARISSA.MAYER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKJcrhvXZv7LRTLgCE0UMphuJ2SViMC6cgCgEZAYF+RXxrJzS0K9PyQ4/wsNCU/XlQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a1bba95-c54b-4427-a26c-a05cbb5be1b4",
                            TwoFactorEnabled = false,
                            UserName = "marissa.mayer@example.com"
                        },
                        new
                        {
                            Id = "114",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b600dc4-8bd9-4a30-8f00-8331b87b3f4a",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elizabeth.holmes@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elizabeth",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Holmes",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "ELIZABETH.HOLMES@EXAMPLE.COM",
                            NormalizedUserName = "ELIZABETH.HOLMES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKmWbFt8hYfHYlZtaKcJnW3e9yLKPQMOBFl73FAr9X86DJlx/wRiCWp/YlR3yIMAPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9cb02180-c89d-4bb4-9f4b-b9b95b76b532",
                            TwoFactorEnabled = false,
                            UserName = "elizabeth.holmes@example.com"
                        },
                        new
                        {
                            Id = "115",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5250c7d-6a63-4d11-be1c-8ccc5e9447f3",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "susan.wojcicki@example.com",
                            EmailConfirmed = true,
                            FirstName = "Susan",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Wojcicki",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SUSAN.WOJCICKI@EXAMPLE.COM",
                            NormalizedUserName = "SUSAN.WOJCICKI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDqUr/Daftir4oIuOZun27Y3B+ddVQIlBcwEGIX2SXEL1UJJKyfhF5YuD7xrWTVLyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3fecde4e-c251-4c8d-9186-0bd129d0e105",
                            TwoFactorEnabled = false,
                            UserName = "susan.wojcicki@example.com"
                        },
                        new
                        {
                            Id = "116",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "611c58a1-871f-40f3-8f16-3d0eb674e1c2",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tim.arnold@example.com",
                            EmailConfirmed = true,
                            FirstName = "Tim",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Arnold",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "TIM.ARNOLD@EXAMPLE.COM",
                            NormalizedUserName = "TIM.ARNOLD@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDL0tF0O9DV+ZouDDwZSLTgbHn1ke8gNP2gMiwLwsRYhgifbGl/EMlm1z3oYzKWuhA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "355050c1-a008-4d31-99e1-fe5bc0e79be8",
                            TwoFactorEnabled = false,
                            UserName = "tim.arnold@example.com"
                        },
                        new
                        {
                            Id = "117",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c52fe04-b64c-4b20-afe0-35305b3578e6",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.iger@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Iger",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "BOB.IGER@EXAMPLE.COM",
                            NormalizedUserName = "BOB.IGER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEJBKKPWhSMJJ+MkzUCQPDMsRjFHKIQawYJ+VOn91n3luMNhYtu1mB8Cso1EblfoGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a85907b-aaca-4526-aa51-cbaea0593caa",
                            TwoFactorEnabled = false,
                            UserName = "bob.iger@example.com"
                        },
                        new
                        {
                            Id = "118",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17c722b4-d940-4e2d-b66c-ecb9ebe56965",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "larry.ellison@example.com",
                            EmailConfirmed = true,
                            FirstName = "Larry",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Ellison",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "LARRY.ELLISON@EXAMPLE.COM",
                            NormalizedUserName = "LARRY.ELLISON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELAHXnPe98oP0TP5vPk/S5oyDJgWjP6IXCNJBtGpzSi+upO1f31YC59uKWmLRUoKBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "384c37c3-e5d3-40c1-b1af-04545128aa7d",
                            TwoFactorEnabled = false,
                            UserName = "larry.ellison@example.com"
                        },
                        new
                        {
                            Id = "119",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2267957-174a-4361-a928-0e4001f42750",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "richard.branson@example.com",
                            EmailConfirmed = true,
                            FirstName = "Richard",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Branson",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "RICHARD.BRANSON@EXAMPLE.COM",
                            NormalizedUserName = "RICHARD.BRANSON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK6Wb/2C1SeusZ0FHBcDiFsi2EUBWEbYAFstds+lXk/KWqokps5v6aUcnFasbhhNPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "58a32580-5ff4-4eb5-9108-b5fb7a97a27d",
                            TwoFactorEnabled = false,
                            UserName = "richard.branson@example.com"
                        },
                        new
                        {
                            Id = "120",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "895a9cc0-3176-435f-8860-dc62b1255b51",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jack.ma@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jack",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Ma",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JACK.MA@EXAMPLE.COM",
                            NormalizedUserName = "JACK.MA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMjGCiV7yykyMA4JQQlatFr5cczL41fFUIXIzKzP1atJ7CSlnI0/YfJSOyWKkCNaVQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e3d9161-e656-48a0-aef8-6324bcca886f",
                            TwoFactorEnabled = false,
                            UserName = "jack.ma@example.com"
                        },
                        new
                        {
                            Id = "121",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e52541fb-ca90-4b01-832a-00030de1e72e",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warren.buffett@example.com",
                            EmailConfirmed = true,
                            FirstName = "Warren",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Buffett",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "WARREN.BUFFETT@EXAMPLE.COM",
                            NormalizedUserName = "WARREN.BUFFETT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL0LeqjKi47sfUmHs4h10cGyYUZzap/Lgqr7vZjKW9DxiqZwQxG9VaBMCRkUEAgsmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5694fc46-0df2-4851-976d-fe4bf8dd1ef1",
                            TwoFactorEnabled = false,
                            UserName = "warren.buffett@example.com"
                        },
                        new
                        {
                            Id = "122",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b242a3a-02f7-465b-9723-41ab864384f2",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mary.barrett@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mary",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Barrett",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARY.BARRETT@EXAMPLE.COM",
                            NormalizedUserName = "MARY.BARRETT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH90YkpWKB1oGHN4kQ28wFSTB1TZO3xC7bKOlTxmteEfZblLnODQG2OfoS6uzZGtFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a261ffa-3891-47bf-8c64-cd01944fac0c",
                            TwoFactorEnabled = false,
                            UserName = "mary.barrett@example.com"
                        },
                        new
                        {
                            Id = "123",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2850d8b6-0b45-4ab2-8091-c9a2685413e0",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ginni.rometty@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ginni",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Rometty",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "GINNI.ROMETTY@EXAMPLE.COM",
                            NormalizedUserName = "GINNI.ROMETTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO7AVoqPrLoUTaEZc0wQzTaqGBnYS1BXhn1NlEZgK/5GnhVX9Fn/sdPrHgABUgVcAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5a3d86f-8244-484e-ac85-1c106ae206ac",
                            TwoFactorEnabled = false,
                            UserName = "ginni.rometty@example.com"
                        },
                        new
                        {
                            Id = "124",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8057b45-9dde-46ad-a14d-7ed304e404ff",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mark.benioff@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Benioff",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARK.BENIOFF@EXAMPLE.COM",
                            NormalizedUserName = "MARK.BENIOFF@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBDDCYtEbIGCA6e3BWQ7lNT1jNH4AidvZUFOorhmBEPUhPXQaJJ6Be3rthmjQNy22A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f8ec3429-1ecc-4db4-817b-74182dfeda5b",
                            TwoFactorEnabled = false,
                            UserName = "mark.benioff@example.com"
                        },
                        new
                        {
                            Id = "125",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b11bd514-0497-47ec-a3df-bb0f41ab78ab",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kevin.systrom@example.com",
                            EmailConfirmed = true,
                            FirstName = "Kevin",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Systrom",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "KEVIN.SYSTROM@EXAMPLE.COM",
                            NormalizedUserName = "KEVIN.SYSTROM@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMsCeZD2oR+RIpE5knAYJDo2GXasL5JxLWoCXv50+cSygrhgxSFNcC1I2meN7NEbYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c49b22e-f4ca-49fc-ab55-2bd823b40a8d",
                            TwoFactorEnabled = false,
                            UserName = "kevin.systrom@example.com"
                        },
                        new
                        {
                            Id = "126",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fad9479c-762e-41b6-b41c-6c902d7e3cae",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "evan.spiegel@example.com",
                            EmailConfirmed = true,
                            FirstName = "Evan",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Spiegel",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "EVAN.SPIEGEL@EXAMPLE.COM",
                            NormalizedUserName = "EVAN.SPIEGEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECumW+YajwRp6HwJYAuPZP1QMfo0wazFNLHeAn1HadbgkaNwRJRagadwB6HzDoPkng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0209aea-c5f8-40ca-ba2b-99dde54e05be",
                            TwoFactorEnabled = false,
                            UserName = "evan.spiegel@example.com"
                        },
                        new
                        {
                            Id = "127",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cea99199-39e4-47af-9add-026ff4fbd9ae",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jan.koum@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jan",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Koum",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JAN.KOUM@EXAMPLE.COM",
                            NormalizedUserName = "JAN.KOUM@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELJ1+8g9AlSDBYXwycuqQBc8CLDIyE1aY3d4ODnynP+/ezNAIaS1fLX37Vcid9SZ6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "986dc1d8-9025-428c-b07b-d9ff91e38565",
                            TwoFactorEnabled = false,
                            UserName = "jan.koum@example.com"
                        },
                        new
                        {
                            Id = "128",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d2efce3-0e3e-4178-9081-81d7a2a43410",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "janice.fang@example.com",
                            EmailConfirmed = true,
                            FirstName = "Janice",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Fang",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JANICE.FANG@EXAMPLE.COM",
                            NormalizedUserName = "JANICE.FANG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJrBdUnpPHKK//23rbM7qdlC28QvTwo6E11lpH3IywCSK2iYbcqI1plc3lE1ywdwHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7427cd89-a771-4b42-bf36-7c0ac651bf10",
                            TwoFactorEnabled = false,
                            UserName = "janice.fang@example.com"
                        },
                        new
                        {
                            Id = "129",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1811cb2-3672-48d8-ae79-9074dc5bf200",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sergey.gladkikh@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sergey",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Gladkikh",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SERGEY.GLADKIKH@EXAMPLE.COM",
                            NormalizedUserName = "SERGEY.GLADKIKH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAP3RIdW7Z908KrNDPpRmQpQc1nza2VauJeuh5AEXoW0hRUMVMeWqkjwrj7P/sN8bw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "359e641b-3f41-48dc-bfeb-4d447f0c9883",
                            TwoFactorEnabled = false,
                            UserName = "sergey.gladkikh@example.com"
                        },
                        new
                        {
                            Id = "130",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ebe14c91-20e2-401b-a9d1-e32d337f7319",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tony.hsieh@example.com",
                            EmailConfirmed = true,
                            FirstName = "Tony",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Hsieh",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "TONY.HSIEH@EXAMPLE.COM",
                            NormalizedUserName = "TONY.HSIEH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFscmQxPmPw2W1X38LAAY4Ll29U7Fi/L0ZjQiqtMhFo7wJe9O9wTVydm2cQPugMPmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e64e752a-b1d5-41e6-871d-2441faa64c99",
                            TwoFactorEnabled = false,
                            UserName = "tony.hsieh@example.com"
                        },
                        new
                        {
                            Id = "131",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75cdf9ae-6950-4ac0-89a2-217bea56e4b2",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "richard.hyne@example.com",
                            EmailConfirmed = true,
                            FirstName = "Richard",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Hyne",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "RICHARD.HYNE@EXAMPLE.COM",
                            NormalizedUserName = "RICHARD.HYNE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFiPnfAoUhjc1cp6f9FPkg/e/XEaz+H2qVY9dcj7KvPfDuEZouXocpbSUiZVqyehgQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76561630-c2e0-40e9-97bd-cda2eba52479",
                            TwoFactorEnabled = false,
                            UserName = "richard.hyne@example.com"
                        },
                        new
                        {
                            Id = "132",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6bc40254-0650-4e4c-a22b-2b3868df7649",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "peter.thiel@example.com",
                            EmailConfirmed = true,
                            FirstName = "Peter",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Thiel",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "PETER.THIEL@EXAMPLE.COM",
                            NormalizedUserName = "PETER.THIEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOGiobPJDfPiAkcBI0LZV7Qo5uf4yQc9aa7nHInOOrk/aEfXoDqUo/W1ulUmoGAahw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "891ebf0e-f352-4501-b695-f326356e5ff6",
                            TwoFactorEnabled = false,
                            UserName = "peter.thiel@example.com"
                        },
                        new
                        {
                            Id = "133",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42e5d91a-4a34-45c8-aad9-55533fd5a8a1",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "steve.wozniak@example.com",
                            EmailConfirmed = true,
                            FirstName = "Steve",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Wozniak",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "STEVE.WOZNIAK@EXAMPLE.COM",
                            NormalizedUserName = "STEVE.WOZNIAK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA1NG+QGUZqsSo9R8odV13uiugMEE/oRRVHZfyNYSExkhJbhoDEzKr0lBcCr6GjwhA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19b3b29d-2565-491a-92a4-18ae14d9d801",
                            TwoFactorEnabled = false,
                            UserName = "steve.wozniak@example.com"
                        },
                        new
                        {
                            Id = "134",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2047219d-e0de-460f-a1f7-aac5bdba57ec",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.carmack@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Carmack",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JOHN.CARMACK@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.CARMACK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKz/2a0NjUwikcVY+fP1wL39gAzZM/ToNgEihxvuCnEqWvTOW32sY11/kTrkudEr4A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4906c53d-e9e2-4e93-9fd3-14117ba1afb6",
                            TwoFactorEnabled = false,
                            UserName = "john.carmack@example.com"
                        },
                        new
                        {
                            Id = "135",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0436d0c-b0f6-4ce8-80aa-8c91c98df2a4",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mike.zyda@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Zyda",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MIKE.ZYDA@EXAMPLE.COM",
                            NormalizedUserName = "MIKE.ZYDA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFN9cIABD/bKPOkceNPsl8pmN2W+4JHRdWUfz19Gs56JU0cwSXwFlvhL347E+FiniA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "173606a4-8d68-47a4-adec-25bad5c9e462",
                            TwoFactorEnabled = false,
                            UserName = "mike.zyda@example.com"
                        },
                        new
                        {
                            Id = "136",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "998245df-961d-453c-b22c-92532a2afed8",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cheryl.sandberg@example.com",
                            EmailConfirmed = true,
                            FirstName = "Cheryl",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Sandberg",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "CHERYL.SANDBERG@EXAMPLE.COM",
                            NormalizedUserName = "CHERYL.SANDBERG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKSsaeQa/qT+S66K6H3gLCoYWUa9gcbE27fkD/N5SDMfZFkr2xMaPvuJrWp8e+/HYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "986217cc-db13-42c5-bef9-2bec6663d44e",
                            TwoFactorEnabled = false,
                            UserName = "cheryl.sandberg@example.com"
                        },
                        new
                        {
                            Id = "137",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20862ba6-f913-44fe-a6ed-103f4ab7e2a1",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "karen.smith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Karen",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "KAREN.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "KAREN.SMITH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPfCHPMYl/GLI5+IbPOtM6DjrFoo29Tmz8VbQnSqIT6YUoR7tWc8vcirkhbMaHVaSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "27541393-9d7d-4ccc-8840-de3754c1f29d",
                            TwoFactorEnabled = false,
                            UserName = "karen.smith@example.com"
                        },
                        new
                        {
                            Id = "138",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a840f96-3d63-4ee6-9e57-053d1a7b5b1d",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david.lee@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Lee",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "DAVID.LEE@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.LEE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMXVZa4RaHMJiElKjt+WF/jKY86kwGezokXSpKK88zdFzy8x1YlHdDrjCQtCyhg2MQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "530261ec-ab89-4d5d-84fb-438dbdd554a3",
                            TwoFactorEnabled = false,
                            UserName = "david.lee@example.com"
                        },
                        new
                        {
                            Id = "139",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d6f7dcb-8ee4-4224-aa9f-ed2792b3ec1e",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "james.taylor@example.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JAMES.TAYLOR@EXAMPLE.COM",
                            NormalizedUserName = "JAMES.TAYLOR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMmgBQsLBJgkkLA0f86265/Uxx9N/fXNfs8DwYd8BbuE6OLDgjtOuoQQk5aSk4P+Zw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bf1d0ead-958d-4d83-b663-7b4211fe3b33",
                            TwoFactorEnabled = false,
                            UserName = "james.taylor@example.com"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.AdminProfileModel", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("AdminRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("AppointedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("AdminProfiles");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAccountModel", b =>
                {
                    b.Property<int>("BillAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillAccountId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("OutstandingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("BillAccounts");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillItemsModel", b =>
                {
                    b.Property<int>("BillItemsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillItemsID"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BillModelBillId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BillItemsID");

                    b.HasIndex("BillModelBillId");

                    b.ToTable("BillItems");

                    b.HasData(
                        new
                        {
                            BillItemsID = 1,
                            AddedOn = new DateTime(2025, 4, 8, 11, 27, 34, 746, DateTimeKind.Utc).AddTicks(4845),
                            Amount = 3500.00m,
                            Description = "Monthly HOA dues covering maintenance, security, and amenities.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Homeowners Association (HOA) Fees",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 2,
                            AddedOn = new DateTime(2025, 4, 8, 11, 27, 34, 746, DateTimeKind.Utc).AddTicks(4866),
                            Amount = 100.00m,
                            Description = "Monthly water consumption charges.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Water Bill",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 3,
                            AddedOn = new DateTime(2025, 4, 8, 11, 27, 34, 746, DateTimeKind.Utc).AddTicks(4870),
                            Amount = 2500.00m,
                            Description = "Monthly payment for electricity consumption.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Electricity Bill",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 4,
                            AddedOn = new DateTime(2025, 4, 8, 11, 27, 34, 746, DateTimeKind.Utc).AddTicks(4973),
                            Amount = 300.00m,
                            Description = "Monthly fee for waste disposal services.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Garbage Collection Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 5,
                            AddedOn = new DateTime(2025, 4, 8, 11, 27, 34, 746, DateTimeKind.Utc).AddTicks(4976),
                            Amount = 1500.00m,
                            Description = "Monthly fee for subdivision security services.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Security Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 6,
                            AddedOn = new DateTime(2025, 4, 8, 11, 27, 34, 746, DateTimeKind.Utc).AddTicks(4979),
                            Amount = 500.00m,
                            Description = "Monthly fee for streetlight maintenance.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Street Lighting Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 7,
                            AddedOn = new DateTime(2025, 4, 8, 11, 27, 34, 746, DateTimeKind.Utc).AddTicks(5016),
                            Amount = 800.00m,
                            Description = "Annual fee for maintaining the clubhouse and shared spaces.",
                            IsDeleted = false,
                            PaymentDuration = "Yearly",
                            PaymentName = "Clubhouse Maintenance Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 8,
                            AddedOn = new DateTime(2025, 4, 8, 11, 27, 34, 746, DateTimeKind.Utc).AddTicks(5022),
                            Amount = 5000.00m,
                            Description = "Annual contribution for property tax remittance.",
                            IsDeleted = false,
                            PaymentDuration = "Yearly",
                            PaymentName = "Property Tax Contribution",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 9,
                            AddedOn = new DateTime(2025, 4, 8, 11, 27, 34, 746, DateTimeKind.Utc).AddTicks(5028),
                            Amount = 1200.00m,
                            Description = "Quarterly contribution for major subdivision repairs.",
                            IsDeleted = false,
                            PaymentDuration = "Quarterly",
                            PaymentName = "Sinking Fund Contribution",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 10,
                            AddedOn = new DateTime(2025, 4, 8, 11, 27, 34, 746, DateTimeKind.Utc).AddTicks(5033),
                            Amount = 600.00m,
                            Description = "Quarterly fee for pest control services in the subdivision.",
                            IsDeleted = false,
                            PaymentDuration = "Quarterly",
                            PaymentName = "Pest Control Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 11,
                            AddedOn = new DateTime(2025, 4, 8, 11, 27, 34, 746, DateTimeKind.Utc).AddTicks(5035),
                            Amount = 1000.00m,
                            Description = "Annual fee for road maintenance and repairs.",
                            IsDeleted = false,
                            PaymentDuration = "Yearly",
                            PaymentName = "Road Maintenance Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.BillModel", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"));

                    b.Property<string>("AddedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("BalanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BillingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BillingPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPenaltyApplied")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PenaltyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillTransactionModel", b =>
                {
                    b.Property<int>("BillTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillTransactionId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BillItemsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PaidBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillTransactionId");

                    b.HasIndex("BillItemsId");

                    b.HasIndex("UserId");

                    b.ToTable("BillTransactions");
                });

            modelBuilder.Entity("Hometown_Application.Models.ChatMessageModel", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ApplicationUserId1");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Hometown_Application.Models.CommentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Hometown_Application.Models.ContactModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Hometown_Application.Models.DocumentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Hometown_Application.Models.EventModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isAllDay")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Hometown_Application.Models.FacilityModel", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilityId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(252)
                        .HasColumnType("nvarchar(252)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OtherType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("FacilityId");

                    b.ToTable("Facility");
                });

            modelBuilder.Entity("Hometown_Application.Models.FeedbackComplaintModel", b =>
                {
                    b.Property<int>("FeedbackComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackComplaintId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdminNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminReply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackComplaintId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedbackComplaints");
                });

            modelBuilder.Entity("Hometown_Application.Models.HomeownerProfileModel", b =>
                {
                    b.Property<int>("HomeownerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HomeownerId"));

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HouseModelHouseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPromotedToAdmin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPromotedToStaff")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MoveInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MoveOutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RegisteredOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HomeownerId");

                    b.HasIndex("HouseModelHouseId");

                    b.HasIndex("UserId");

                    b.ToTable("HomeownerProfiles");
                });

            modelBuilder.Entity("Hometown_Application.Models.HouseModel", b =>
                {
                    b.Property<int?>("HouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("HouseId"));

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<int>("LotNumber")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HouseId");

                    b.HasIndex("UserId");

                    b.HasIndex("BlockName", "LotNumber", "StreetName")
                        .IsUnique();

                    b.ToTable("Houses");

                    b.HasData(
                        new
                        {
                            HouseId = 1,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Ashwood Lane",
                            UserId = "100"
                        },
                        new
                        {
                            HouseId = 2,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Birchwood Avenue",
                            UserId = "102"
                        },
                        new
                        {
                            HouseId = 3,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Ivy Lane",
                            UserId = "103"
                        },
                        new
                        {
                            HouseId = 4,
                            BlockName = "Oakwood",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Oakwood Lane",
                            UserId = "104"
                        },
                        new
                        {
                            HouseId = 5,
                            BlockName = "Elmwood",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Birchwood Lane",
                            UserId = "105"
                        },
                        new
                        {
                            HouseId = 6,
                            BlockName = "GoldenOak",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Golden Leaf",
                            UserId = "106"
                        },
                        new
                        {
                            HouseId = 7,
                            BlockName = "Rosewood",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Rosewood Lane",
                            UserId = "107"
                        },
                        new
                        {
                            HouseId = 8,
                            BlockName = "MapleGrove",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Maplewood Avenue",
                            UserId = "108"
                        },
                        new
                        {
                            HouseId = 9,
                            BlockName = "Silver Springs",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Pinewood Lane",
                            UserId = "109"
                        },
                        new
                        {
                            HouseId = 10,
                            BlockName = "Magnolia Ridge",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Pearl Road",
                            UserId = "110"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.PollModel", b =>
                {
                    b.Property<int>("PollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PollId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PollId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Polls");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollQuestionModel", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("PollId");

                    b.ToTable("PollQuestions");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollResponseModel", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseId"));

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("RespondentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TextResponse")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("ResponseId");

                    b.HasIndex("PollId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("RespondentId");

                    b.HasIndex("SelectedOptionId");

                    b.ToTable("PollResponses");
                });

            modelBuilder.Entity("Hometown_Application.Models.PostModel", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Hometown_Application.Models.QuestionOptionModel", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("Hometown_Application.Models.ReactionModel", b =>
                {
                    b.Property<int>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReactionId"));

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReactionId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("Hometown_Application.Models.RequestTypeModel", b =>
                {
                    b.Property<int>("RequestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestTypeId"));

                    b.Property<int>("AssignedDepartment")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RequestTypeId");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new
                        {
                            RequestTypeId = 1,
                            AssignedDepartment = 0,
                            Description = "Request for pool maintenance.",
                            IsActive = true,
                            Name = "Pool Cleaning"
                        },
                        new
                        {
                            RequestTypeId = 2,
                            AssignedDepartment = 1,
                            Description = "Report or ask about lost items.",
                            IsActive = true,
                            Name = "Lost and Found Inquiry"
                        },
                        new
                        {
                            RequestTypeId = 3,
                            AssignedDepartment = 2,
                            Description = "Concerns about billing and payments.",
                            IsActive = true,
                            Name = "Billing Issue"
                        },
                        new
                        {
                            RequestTypeId = 4,
                            AssignedDepartment = 3,
                            Description = "Report issues with internet connectivity.",
                            IsActive = true,
                            Name = "Internet Issue"
                        },
                        new
                        {
                            RequestTypeId = 5,
                            AssignedDepartment = 4,
                            Description = "Request lawn maintenance services.",
                            IsActive = true,
                            Name = "Lawn Mowing"
                        },
                        new
                        {
                            RequestTypeId = 6,
                            AssignedDepartment = 5,
                            Description = "Report plumbing issues like leaks.",
                            IsActive = true,
                            Name = "Plumbing Repair"
                        },
                        new
                        {
                            RequestTypeId = 7,
                            AssignedDepartment = 6,
                            Description = "Report security concerns or suspicious activity.",
                            IsActive = true,
                            Name = "Suspicious Activity"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.ReservationModel", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReservationId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceRequestModel", b =>
                {
                    b.Property<int>("ServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceRequestId"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CancelledOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HomeownerId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RejectedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Schedule")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Urgency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceRequestId");

                    b.HasIndex("HomeownerId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceStaffAssignmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnavailable")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("ServiceStaffAssignments");
                });

            modelBuilder.Entity("Hometown_Application.Models.StaffProfileModel", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("AccountCreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AccountCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmergencyContactNumber")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("EmergencyContactRelation")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActiveEmployee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAlsoHomeOwner")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFired")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Salary")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("StaffProfiles");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 8, 11, 27, 38, 372, DateTimeKind.Utc).AddTicks(9634),
                            Address = "123 Main St",
                            Department = 6,
                            EmergencyContactName = "Jane Doe",
                            EmergencyContactNumber = "1234567890",
                            EmergencyContactRelation = "Spouse",
                            HireDate = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Security Officer",
                            Salary = 25000.00m,
                            UserId = "100"
                        },
                        new
                        {
                            StaffId = 2,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 8, 11, 27, 38, 372, DateTimeKind.Utc).AddTicks(9651),
                            Address = "456 Oak St",
                            Department = 5,
                            EmergencyContactName = "John Smith",
                            EmergencyContactNumber = "0987654321",
                            EmergencyContactRelation = "Brother",
                            HireDate = new DateTime(2021, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Maintenance Supervisor",
                            Salary = 30000.00m,
                            UserId = "102"
                        },
                        new
                        {
                            StaffId = 3,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 8, 11, 27, 38, 372, DateTimeKind.Utc).AddTicks(9663),
                            Address = "789 Pine St",
                            Department = 3,
                            EmergencyContactName = "Alice Brown",
                            EmergencyContactNumber = "5678901234",
                            EmergencyContactRelation = "Sister",
                            HireDate = new DateTime(2020, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "System Administrator",
                            Salary = 35000.00m,
                            UserId = "103"
                        },
                        new
                        {
                            StaffId = 4,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 8, 11, 27, 38, 372, DateTimeKind.Utc).AddTicks(9673),
                            Address = "987 Cedar St",
                            Department = 2,
                            EmergencyContactName = "Bob White",
                            EmergencyContactNumber = "2345678901",
                            EmergencyContactRelation = "Father",
                            HireDate = new DateTime(2019, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Finance Manager",
                            Salary = 40000.00m,
                            UserId = "104"
                        },
                        new
                        {
                            StaffId = 5,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 8, 11, 27, 38, 372, DateTimeKind.Utc).AddTicks(9683),
                            Address = "654 Birch St",
                            Department = 0,
                            EmergencyContactName = "Chris Green",
                            EmergencyContactNumber = "3456789012",
                            EmergencyContactRelation = "Friend",
                            HireDate = new DateTime(2021, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Amenities Coordinator",
                            Salary = 28000.00m,
                            UserId = "105"
                        },
                        new
                        {
                            StaffId = 6,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 8, 11, 27, 38, 372, DateTimeKind.Utc).AddTicks(9691),
                            Address = "321 Maple St",
                            Department = 1,
                            EmergencyContactName = "Diana Blue",
                            EmergencyContactNumber = "4567890123",
                            EmergencyContactRelation = "Cousin",
                            HireDate = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Customer Service Representative",
                            Salary = 26000.00m,
                            UserId = "106"
                        },
                        new
                        {
                            StaffId = 7,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 8, 11, 27, 38, 372, DateTimeKind.Utc).AddTicks(9701),
                            Address = "159 Elm St",
                            Department = 4,
                            EmergencyContactName = "Evan Red",
                            EmergencyContactNumber = "5678901234",
                            EmergencyContactRelation = "Uncle",
                            HireDate = new DateTime(2020, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Head Gardener",
                            Salary = 27000.00m,
                            UserId = "107"
                        },
                        new
                        {
                            StaffId = 8,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 8, 11, 27, 38, 372, DateTimeKind.Utc).AddTicks(9710),
                            Address = "123 Main St",
                            Department = 6,
                            EmergencyContactName = "Jane Doe",
                            EmergencyContactNumber = "1234567890",
                            EmergencyContactRelation = "Spouse",
                            HireDate = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Security Officer",
                            Salary = 25000.00m,
                            UserId = "108"
                        },
                        new
                        {
                            StaffId = 9,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 8, 11, 27, 38, 372, DateTimeKind.Utc).AddTicks(9889),
                            Address = "456 Oak St",
                            Department = 5,
                            EmergencyContactName = "John Smith",
                            EmergencyContactNumber = "0987654321",
                            EmergencyContactRelation = "Brother",
                            HireDate = new DateTime(2021, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Maintenance Supervisor",
                            Salary = 30000.00m,
                            UserId = "109"
                        },
                        new
                        {
                            StaffId = 10,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 8, 11, 27, 38, 372, DateTimeKind.Utc).AddTicks(9926),
                            Address = "789 Pine St",
                            Department = 3,
                            EmergencyContactName = "Alice Brown",
                            EmergencyContactNumber = "5678901234",
                            EmergencyContactRelation = "Sister",
                            HireDate = new DateTime(2020, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "System Administrator",
                            Salary = 35000.00m,
                            UserId = "110"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.StatusModel", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "Available"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "Unavailable"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Pending"
                        },
                        new
                        {
                            StatusId = 4,
                            StatusName = "In Progress"
                        },
                        new
                        {
                            StatusId = 5,
                            StatusName = "Resolved"
                        },
                        new
                        {
                            StatusId = 6,
                            StatusName = "Closed"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.VehicleGatepassModel", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GatePassExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GatePassIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleBrand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("VehicleImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("VehiclePlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleId");

                    b.HasIndex("UserId");

                    b.ToTable("VehicleGatepasses");
                });

            modelBuilder.Entity("Hometown_Application.Models.VisitorGatepassModel", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdminNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExpectedArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GatePassExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GatePassIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfVisitors")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehiclePlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehicleType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VisitorId");

                    b.HasIndex("UserId");

                    b.ToTable("VisitorGatepasses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "HomeOwner",
                            NormalizedName = "HOMEOWNER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "100",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "102",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "103",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "104",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "105",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "106",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "107",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "108",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "109",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "110",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Hometown_Application.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.HasOne("Hometown_Application.Models.AdminProfileModel", "AdminProfiles")
                        .WithMany()
                        .HasForeignKey("AdminProfilesAdminId");

                    b.HasOne("Hometown_Application.Models.HomeownerProfileModel", "HomeownerProfiles")
                        .WithMany()
                        .HasForeignKey("HomeownerProfilesHomeownerId");

                    b.HasOne("Hometown_Application.Models.StaffProfileModel", "StaffProfiles")
                        .WithMany()
                        .HasForeignKey("StaffProfilesStaffId");

                    b.Navigation("AdminProfiles");

                    b.Navigation("HomeownerProfiles");

                    b.Navigation("StaffProfiles");
                });

            modelBuilder.Entity("Hometown_Application.Models.AdminProfileModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAccountModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillItemsModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillModel", null)
                        .WithMany("BillItems")
                        .HasForeignKey("BillModelBillId");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillTransactionModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillItemsModel", "BillItemsModel")
                        .WithMany()
                        .HasForeignKey("BillItemsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("BillItemsModel");
                });

            modelBuilder.Entity("Hometown_Application.Models.ChatMessageModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany("SentMessages")
                        .HasForeignKey("ApplicationUserId1");

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Hometown_Application.Models.CommentModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PostModel", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Hometown_Application.Models.FeedbackComplaintModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.StatusModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Hometown_Application.Models.HomeownerProfileModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.HouseModel", null)
                        .WithMany("Homeowners")
                        .HasForeignKey("HouseModelHouseId");

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.HouseModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollQuestionModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PollModel", "Poll")
                        .WithMany("Questions")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollResponseModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PollModel", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Models.PollQuestionModel", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Respondent")
                        .WithMany()
                        .HasForeignKey("RespondentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hometown_Application.Models.QuestionOptionModel", "SelectedOption")
                        .WithMany("Responses")
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Poll");

                    b.Navigation("Question");

                    b.Navigation("Respondent");

                    b.Navigation("SelectedOption");
                });

            modelBuilder.Entity("Hometown_Application.Models.PostModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.QuestionOptionModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PollQuestionModel", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Hometown_Application.Models.ReactionModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PostModel", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Hometown_Application.Models.ReservationModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.FacilityModel", "Facility")
                        .WithMany("Reservations")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceRequestModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.HomeownerProfileModel", "Homeowner")
                        .WithMany()
                        .HasForeignKey("HomeownerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Hometown_Application.Models.RequestTypeModel", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Models.StatusModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Homeowner");

                    b.Navigation("RequestType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Hometown_Application.Models.StaffProfileModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.VehicleGatepassModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.VisitorGatepassModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hometown_Application.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillModel", b =>
                {
                    b.Navigation("BillItems");
                });

            modelBuilder.Entity("Hometown_Application.Models.FacilityModel", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Hometown_Application.Models.HouseModel", b =>
                {
                    b.Navigation("Homeowners");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollModel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollQuestionModel", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Hometown_Application.Models.PostModel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Hometown_Application.Models.QuestionOptionModel", b =>
                {
                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
