// <auto-generated />
using System;
using Hometown_Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hometown_Application.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hometown_Application.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AdminProfilesAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("BillAssignmentModelBillAssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FacebookProfile")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("HomeownerProfilesHomeownerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActiveUser")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBirthdayPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGenderPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LinkedInProfile")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("MakeFacebookPublic")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffProfilesStaffId")
                        .HasColumnType("int");

                    b.Property<string>("TwitterProfile")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AdminProfilesAdminId");

                    b.HasIndex("BillAssignmentModelBillAssignmentId");

                    b.HasIndex("HomeownerProfilesHomeownerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StaffProfilesStaffId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "100",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6603fab0-2eb9-4ead-9a28-de92d0ed01fd",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elon.musk@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elon",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Musk",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "ELON.MUSK@EXAMPLE.COM",
                            NormalizedUserName = "ELON.MUSK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPnlDr5pXMtgbNq2bPPdnIYvAY5y/XG2iKGjrnDskBMvrpAu76SSLH4c4LdzTUJOtw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicturePath = "wwwroot/images/picc.png",
                            SecurityStamp = "e373f1c8-fdf3-4f80-8122-42240b9e8c29",
                            TwoFactorEnabled = false,
                            UserName = "elon.musk@example.com"
                        },
                        new
                        {
                            Id = "102",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "408a28c2-b8b6-4fa4-920d-02b45cb723aa",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bill.gates@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bill",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Gates",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "BILL.GATES@EXAMPLE.COM",
                            NormalizedUserName = "BILL.GATES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECENMOABzzKHeFfO6EQp1Z8dGueyv3a6n/6qdGj4963upH+5OaajxEkKQhDm/SsESQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e4c6cdd-79c5-48b9-bb48-7b203e69ae3a",
                            TwoFactorEnabled = false,
                            UserName = "bill.gates@example.com"
                        },
                        new
                        {
                            Id = "103",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23b332ec-de59-40a0-92d3-c8c9c806e590",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mark.zuckerberg@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Zuckerberg",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARK.ZUCKERBERG@EXAMPLE.COM",
                            NormalizedUserName = "MARK.ZUCKERBERG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECN3gspx6MyQ0sV/TwmURjia4IM6j6QAt73fe1QMNnVvUYZjw59bz8v5d8JaCb200w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "efa63d30-fe61-4dde-9a93-3af5f86c06da",
                            TwoFactorEnabled = false,
                            UserName = "mark.zuckerberg@example.com"
                        },
                        new
                        {
                            Id = "104",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7129f3b8-030c-4fc0-92fe-066c5ad32375",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sundar.pichai@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sundar",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Pichai",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SUNDAR.PICHAI@EXAMPLE.COM",
                            NormalizedUserName = "SUNDAR.PICHAI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELwH+0qmpmdIBhyiJoqkffmgMMcM1oPQff4mHWHLmCzsZJLWk4C58OBAmRFmh8E74g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73e22e5f-ac51-4efd-97cb-7e09c1cb9cd7",
                            TwoFactorEnabled = false,
                            UserName = "sundar.pichai@example.com"
                        },
                        new
                        {
                            Id = "105",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2340c07d-b04f-4e64-9f5d-77f1db8379fe",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tim.cook@example.com",
                            EmailConfirmed = true,
                            FirstName = "Tim",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Cook",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "TIM.COOK@EXAMPLE.COM",
                            NormalizedUserName = "TIM.COOK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJA/V/lDAvjmUM7xlLM38rReXxjrjMwuAxrpKmKpXytSAz8usyRzuZXizrM3Ib6YUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3766192-06e4-4c20-9dee-146fb32cc61b",
                            TwoFactorEnabled = false,
                            UserName = "tim.cook@example.com"
                        },
                        new
                        {
                            Id = "106",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f96a4ad-2875-470a-876b-292888a97f74",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "satya.nadella@example.com",
                            EmailConfirmed = true,
                            FirstName = "Satya",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Nadella",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SATYA.NADELLA@EXAMPLE.COM",
                            NormalizedUserName = "SATYA.NADELLA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOaVL5ntU8z6iBDPPKoDH/xUmzQdd1zu9w/AroKsUOmI07/vSiYSHfXuSfcMMBdWog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "051aecb0-c64e-4caf-bef5-a4ebc1c286e6",
                            TwoFactorEnabled = false,
                            UserName = "satya.nadella@example.com"
                        },
                        new
                        {
                            Id = "107",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b976c84-2092-4370-b118-b9b381439643",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jack.dorsey@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jack",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Dorsey",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JACK.DORSEY@EXAMPLE.COM",
                            NormalizedUserName = "JACK.DORSEY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGIVSEJaLj0gIrOG9JnOhY6RSVVYUdqtHUxwMQYeuSZtsNqJFU9/wVDyitSFwj/5Gg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0b2e005-ffe7-43c6-91cb-0494f7d73d93",
                            TwoFactorEnabled = false,
                            UserName = "jack.dorsey@example.com"
                        },
                        new
                        {
                            Id = "108",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2260af81-c730-4f80-95fe-ba3a349a6eaa",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "larry.page@example.com",
                            EmailConfirmed = true,
                            FirstName = "Larry",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Page",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "LARRY.PAGE@EXAMPLE.COM",
                            NormalizedUserName = "LARRY.PAGE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPDLTebNUEt08VbDDtuBennTuxDsqSaZiQpuoHBKfHYxarEYmx1MyCoqziJWzrHt6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5df13291-60e0-4626-94ce-24af6b64616a",
                            TwoFactorEnabled = false,
                            UserName = "larry.page@example.com"
                        },
                        new
                        {
                            Id = "109",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5770c295-91ef-4ff9-9244-c57b77291a32",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sergey.brin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sergey",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Brin",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SERGEY.BRIN@EXAMPLE.COM",
                            NormalizedUserName = "SERGEY.BRIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIyC3yBfb6VdCA8bE+i4yMrS6YY8iz5NV6ecxA+9XvMR/pe7L3Thqs5exEnnXpXuRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db252cd8-73af-4e9b-a737-cdf0b0305bdb",
                            TwoFactorEnabled = false,
                            UserName = "sergey.brin@example.com"
                        },
                        new
                        {
                            Id = "110",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e974c131-0e48-4e87-95a8-c84ffacf2b4a",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "steve.jobs@example.com",
                            EmailConfirmed = true,
                            FirstName = "Steve",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Jobs",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "STEVE.JOBS@EXAMPLE.COM",
                            NormalizedUserName = "STEVE.JOBS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAUh2W6ICN3S+k89GqO9+F0frKjVPdLUJtA3LpvuyrLDe4DMz+M8sujoEc4NbMOvnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f20b050f-614e-4dd9-aaba-945400da284d",
                            TwoFactorEnabled = false,
                            UserName = "steve.jobs@example.com"
                        },
                        new
                        {
                            Id = "111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba0d98f0-6183-460a-9aec-9e0196231b79",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sheryl.sandberg@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sheryl",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Sandberg",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SHERYL.SANDBERG@EXAMPLE.COM",
                            NormalizedUserName = "SHERYL.SANDBERG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPSsDhpURP/NOvj9vjPOl/D52wDw5G7ENmkBZSkE9gIXRMhoHJX2lFtpqeQUyhnsng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "324ff910-281c-438b-9563-d3a2761a5af8",
                            TwoFactorEnabled = false,
                            UserName = "sheryl.sandberg@example.com"
                        },
                        new
                        {
                            Id = "112",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b722e8df-1c99-418b-87a5-a500b9b6696f",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "reed.hastings@example.com",
                            EmailConfirmed = true,
                            FirstName = "Reed",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Hastings",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "REED.HASTINGS@EXAMPLE.COM",
                            NormalizedUserName = "REED.HASTINGS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPpsxDBu2VidW+durVq551uweT0GI4EmlO7Ll3xP0Cvzm6/gkUZuoBFpyBFteZhmfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b36321c-d4b8-4f3b-bbc7-8828670084f7",
                            TwoFactorEnabled = false,
                            UserName = "reed.hastings@example.com"
                        },
                        new
                        {
                            Id = "113",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9dc61e5e-a3ff-48e9-859e-b6724cfa22ed",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marissa.mayer@example.com",
                            EmailConfirmed = true,
                            FirstName = "Marissa",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Mayer",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARISSA.MAYER@EXAMPLE.COM",
                            NormalizedUserName = "MARISSA.MAYER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHyJBTFKfXC+CH3978t9scxejB8HnkRwYrC+8wmHD+QQYYZs0kLlLcDkjIvKigjMhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77aadc5a-e35b-4cd4-ae82-b333d1be1772",
                            TwoFactorEnabled = false,
                            UserName = "marissa.mayer@example.com"
                        },
                        new
                        {
                            Id = "114",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cebf5883-6196-4e7e-b9c7-9910fe959264",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elizabeth.holmes@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elizabeth",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Holmes",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "ELIZABETH.HOLMES@EXAMPLE.COM",
                            NormalizedUserName = "ELIZABETH.HOLMES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO3oN/IScHxbi6/7xipfRatm7OQ8ZgsTj+Pm+3+Zq0zhVQ3L8hp3Axt5/XhXN5Zjsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "709c7520-e530-4ac6-99df-b7a50ffd7db1",
                            TwoFactorEnabled = false,
                            UserName = "elizabeth.holmes@example.com"
                        },
                        new
                        {
                            Id = "115",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ca92596-12ed-46ab-9c81-a362aa200847",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "susan.wojcicki@example.com",
                            EmailConfirmed = true,
                            FirstName = "Susan",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Wojcicki",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SUSAN.WOJCICKI@EXAMPLE.COM",
                            NormalizedUserName = "SUSAN.WOJCICKI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPk9ChySk3LOaFXGGom+A8PYrHgq/sTKONx/ewQ8lNZlnXmgFEl30tSPlX3BcAZr0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b34e839-0a60-46d3-b429-01de5398c642",
                            TwoFactorEnabled = false,
                            UserName = "susan.wojcicki@example.com"
                        },
                        new
                        {
                            Id = "116",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b30d2332-62cf-446a-8ca6-020fe4cf29dc",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tim.arnold@example.com",
                            EmailConfirmed = true,
                            FirstName = "Tim",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Arnold",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "TIM.ARNOLD@EXAMPLE.COM",
                            NormalizedUserName = "TIM.ARNOLD@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB8vexJueF3kJCDmo0FjirnGErpPWeTe97Hv+eekIqiTvawvnE3Zt279zigyHIYVug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ba3d786-8a0f-4ab4-87d5-b89885016609",
                            TwoFactorEnabled = false,
                            UserName = "tim.arnold@example.com"
                        },
                        new
                        {
                            Id = "117",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60e282f2-908f-40ef-87e7-430dbd094d1d",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.iger@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Iger",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "BOB.IGER@EXAMPLE.COM",
                            NormalizedUserName = "BOB.IGER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMjdMiSR/JGe4xGxKwmqA0M8thwII+WDgMxAnIybDUlB/mEv6PuDeTSNI10gC1x2VA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ae8e462-5a55-41a2-be2e-aeb4b085734d",
                            TwoFactorEnabled = false,
                            UserName = "bob.iger@example.com"
                        },
                        new
                        {
                            Id = "118",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df25a6e1-c3e3-4229-9067-3d6e556929cd",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "larry.ellison@example.com",
                            EmailConfirmed = true,
                            FirstName = "Larry",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Ellison",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "LARRY.ELLISON@EXAMPLE.COM",
                            NormalizedUserName = "LARRY.ELLISON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELCkywiHuGAT7EGXZ6G9suNtAL/stGRc+QKCCbQdfhi3HEpvAjWoQ7ofR4YCUxw2kw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28862a65-84ad-4f8d-a8a6-d66fdc693637",
                            TwoFactorEnabled = false,
                            UserName = "larry.ellison@example.com"
                        },
                        new
                        {
                            Id = "119",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68489eeb-35e9-44ce-9525-e85d442ad425",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "richard.branson@example.com",
                            EmailConfirmed = true,
                            FirstName = "Richard",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Branson",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "RICHARD.BRANSON@EXAMPLE.COM",
                            NormalizedUserName = "RICHARD.BRANSON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKpL7RSwQRRa5YjDVNmyWa7ZeNuhchE/MhBvxGDDIwvYJjYeZxth7nmfeJkJkfJH5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "243454a1-a5fd-4537-a4ef-cba4d8f2f6f6",
                            TwoFactorEnabled = false,
                            UserName = "richard.branson@example.com"
                        },
                        new
                        {
                            Id = "120",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "153d8cd4-277c-4cd0-9db0-8d4ecf505285",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jack.ma@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jack",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Ma",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JACK.MA@EXAMPLE.COM",
                            NormalizedUserName = "JACK.MA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK2DtsK9BLpcbVfJy56B9vkobXxVFXali9Tgx9bpxsIRirz3rDgWCOVAFfld/91AUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "525e484e-25a3-4057-b6fa-38b487723b9b",
                            TwoFactorEnabled = false,
                            UserName = "jack.ma@example.com"
                        },
                        new
                        {
                            Id = "121",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86f7fb68-554f-46f2-8f45-a50ffd901a2f",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warren.buffett@example.com",
                            EmailConfirmed = true,
                            FirstName = "Warren",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Buffett",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "WARREN.BUFFETT@EXAMPLE.COM",
                            NormalizedUserName = "WARREN.BUFFETT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP++bpsDB6fq4QUIkoh4fBM/LmIXeA+AQCyeZtIVmf711RCT2ah2laBvlOq2P8DeJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc7c63bc-042a-4e70-9b60-8c0e53613714",
                            TwoFactorEnabled = false,
                            UserName = "warren.buffett@example.com"
                        },
                        new
                        {
                            Id = "122",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e948401c-8299-460b-a82a-20cec464c818",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mary.barrett@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mary",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Barrett",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARY.BARRETT@EXAMPLE.COM",
                            NormalizedUserName = "MARY.BARRETT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELTJQbcSacbXo3OEppFS795FEo/CA++bHnhihexsV79wUtX4ZfNu7TV+nQqQ2V+ESw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eef65578-944a-4cd7-a305-fbe55550d45d",
                            TwoFactorEnabled = false,
                            UserName = "mary.barrett@example.com"
                        },
                        new
                        {
                            Id = "123",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b5c8ff8-951e-4c97-a20c-9d713d8a50e7",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ginni.rometty@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ginni",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Rometty",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "GINNI.ROMETTY@EXAMPLE.COM",
                            NormalizedUserName = "GINNI.ROMETTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIk2M21szeOsP/wEw9Vg+DFjcCHWSA8SoG4eTh9xYNydqo8q16EADG+iBKuYRHZHrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47e05843-d50d-4d9a-bee9-168bf14aa280",
                            TwoFactorEnabled = false,
                            UserName = "ginni.rometty@example.com"
                        },
                        new
                        {
                            Id = "124",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "080d3b5f-1d43-4b4f-98e4-a4b5ce363398",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mark.benioff@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Benioff",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARK.BENIOFF@EXAMPLE.COM",
                            NormalizedUserName = "MARK.BENIOFF@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHZ/QesbImp3qUZ2xdXtQj1ExEBlECqGUmKLeRkOq1JalAgr77PsEBeIi2TBaxze0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "752d0210-df20-4b51-a65b-5b7dfe9b70d7",
                            TwoFactorEnabled = false,
                            UserName = "mark.benioff@example.com"
                        },
                        new
                        {
                            Id = "125",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "492ad950-1618-4b9b-affb-2cc7c70f7da0",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kevin.systrom@example.com",
                            EmailConfirmed = true,
                            FirstName = "Kevin",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Systrom",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "KEVIN.SYSTROM@EXAMPLE.COM",
                            NormalizedUserName = "KEVIN.SYSTROM@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEAqIC+h93fKt+uMYzdWWJCh0mfp98JKh2qIR+uuEuWYv4/sLSYC5u+prUMqzxpE6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cee1d36e-ab8c-4127-b313-a281e0804d0f",
                            TwoFactorEnabled = false,
                            UserName = "kevin.systrom@example.com"
                        },
                        new
                        {
                            Id = "126",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64a3f51b-44fb-4a2a-b82c-119c50986029",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "evan.spiegel@example.com",
                            EmailConfirmed = true,
                            FirstName = "Evan",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Spiegel",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "EVAN.SPIEGEL@EXAMPLE.COM",
                            NormalizedUserName = "EVAN.SPIEGEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGGsdIFp/eXo0mZcGq4X3amnnQTVDrsCpdJ5pqeuTQ/n35QmYajv6kl1ulWf0lASHw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ca397ef-b289-4a03-94ba-b17d47a18383",
                            TwoFactorEnabled = false,
                            UserName = "evan.spiegel@example.com"
                        },
                        new
                        {
                            Id = "127",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9fe35a3d-f73a-487c-9918-b41b1d605f5f",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jan.koum@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jan",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Koum",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JAN.KOUM@EXAMPLE.COM",
                            NormalizedUserName = "JAN.KOUM@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ/NSoCj/6eM7+TKnUSWal/Mrx4haIpNIMEtr3wRMnoX1rofa7bMH1DEAfzZuRN/qw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c3e4714d-e0c4-4169-b2f1-5f5140ddc644",
                            TwoFactorEnabled = false,
                            UserName = "jan.koum@example.com"
                        },
                        new
                        {
                            Id = "128",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a5a4fb6-5c94-495a-abdc-d7461e30bd7c",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "janice.fang@example.com",
                            EmailConfirmed = true,
                            FirstName = "Janice",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Fang",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JANICE.FANG@EXAMPLE.COM",
                            NormalizedUserName = "JANICE.FANG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIkG6ltX8XVBRPMEDttiYh+8YuW5HraOI3Y4zKNjgGViWvP84prE8DisObgnyUCXtA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aa691f6b-c369-4bec-a4ad-753765c1984d",
                            TwoFactorEnabled = false,
                            UserName = "janice.fang@example.com"
                        },
                        new
                        {
                            Id = "129",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "144b62cf-9fbb-47fd-b302-ef92563588cb",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sergey.gladkikh@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sergey",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Gladkikh",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SERGEY.GLADKIKH@EXAMPLE.COM",
                            NormalizedUserName = "SERGEY.GLADKIKH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFi0yoIEHmIP5vkYyzV7R4bdJifTLkRSN/4eAFjEHeMErI05LFzSW36zG21V30x68w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b128011-8fc7-4b31-afcf-9078fcae468b",
                            TwoFactorEnabled = false,
                            UserName = "sergey.gladkikh@example.com"
                        },
                        new
                        {
                            Id = "130",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6d2196f-3b3d-48cd-b53b-f458fa1e14fb",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tony.hsieh@example.com",
                            EmailConfirmed = true,
                            FirstName = "Tony",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Hsieh",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "TONY.HSIEH@EXAMPLE.COM",
                            NormalizedUserName = "TONY.HSIEH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ1M5ZHAFbkhxe7rx5z9UGpBByDPJZzYG7W5ZhAUTMwSzDcRRfAD8/U4HweS0SPPgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ce215ff-6260-40ad-b20b-72d2550f1362",
                            TwoFactorEnabled = false,
                            UserName = "tony.hsieh@example.com"
                        },
                        new
                        {
                            Id = "131",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93e8a123-e5a1-4631-bd7f-52fad1090f06",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "richard.hyne@example.com",
                            EmailConfirmed = true,
                            FirstName = "Richard",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Hyne",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "RICHARD.HYNE@EXAMPLE.COM",
                            NormalizedUserName = "RICHARD.HYNE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH9+PIVk9vYzorYIetN/iUGwCSIHseCKQ011gXxxNSW632qufTAvBcOpWox1Ae+sHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5baad92-ffeb-48ee-8115-971fbcac0ed2",
                            TwoFactorEnabled = false,
                            UserName = "richard.hyne@example.com"
                        },
                        new
                        {
                            Id = "132",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fdc83ef4-0930-49d1-bc9e-2a538595ee9b",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "peter.thiel@example.com",
                            EmailConfirmed = true,
                            FirstName = "Peter",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Thiel",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "PETER.THIEL@EXAMPLE.COM",
                            NormalizedUserName = "PETER.THIEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGh1A276oj5m7JU0zx8my/dqroze0vEm6iv8U0RepdytNuqwlX+LrhgayKJGGmbweQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d499e04f-cf57-4d70-83a3-022466fae7eb",
                            TwoFactorEnabled = false,
                            UserName = "peter.thiel@example.com"
                        },
                        new
                        {
                            Id = "133",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38a83f09-6c14-43a8-ade9-7aee2890b416",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "steve.wozniak@example.com",
                            EmailConfirmed = true,
                            FirstName = "Steve",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Wozniak",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "STEVE.WOZNIAK@EXAMPLE.COM",
                            NormalizedUserName = "STEVE.WOZNIAK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBf7vprjTodmV7R0bUPzb1ak/++ONF/3qnu5FC3uGp0pei3V4mp0XZHbWHResBiGeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca515280-8087-46f2-864b-4e2faf06fc46",
                            TwoFactorEnabled = false,
                            UserName = "steve.wozniak@example.com"
                        },
                        new
                        {
                            Id = "134",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73a820da-3c6c-4ce8-a689-f37776f080a3",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.carmack@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Carmack",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JOHN.CARMACK@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.CARMACK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAv/r6kpAPRimActVATKWJsEbWU2XrNmdEItlCxj2DqvAEnE8kTCvzhkY30Ve2e2Sw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6df53ac-f2c5-4d0e-a174-12e9fbe2230e",
                            TwoFactorEnabled = false,
                            UserName = "john.carmack@example.com"
                        },
                        new
                        {
                            Id = "135",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c14898c-ef6b-471e-abd9-aa416f588550",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mike.zyda@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Zyda",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MIKE.ZYDA@EXAMPLE.COM",
                            NormalizedUserName = "MIKE.ZYDA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKVPRfqDtbciCGdnjnIH7zmbGv6a+leCnc8bgJ9yXvR+XRCR/Wz92NpvDMdZ4i5Lvw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5becf59-4a25-4224-9d74-62d5f4deab07",
                            TwoFactorEnabled = false,
                            UserName = "mike.zyda@example.com"
                        },
                        new
                        {
                            Id = "136",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d63d2b09-dca5-49c5-9f4e-433885b4130f",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cheryl.sandberg@example.com",
                            EmailConfirmed = true,
                            FirstName = "Cheryl",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Sandberg",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "CHERYL.SANDBERG@EXAMPLE.COM",
                            NormalizedUserName = "CHERYL.SANDBERG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHzoCjuI31L+yOItg7uZin+xAoqzMoUVnEeE34tpzpzJiCJOYIntOtEshtds5FZ21A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "789aa6b6-aed7-42ec-9c2f-cf081b9ba329",
                            TwoFactorEnabled = false,
                            UserName = "cheryl.sandberg@example.com"
                        },
                        new
                        {
                            Id = "137",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c156c0e-ca8b-4497-936d-5b3a80a68b80",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "karen.smith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Karen",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "KAREN.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "KAREN.SMITH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKi+J753+m6/CHyzXlA1O/Vyhr1wjNBWP04zKLxQGqN6XOdAriS2YCygR4lsljBujQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4ec0c86-5850-47cc-93fc-8f9a8b88e3e4",
                            TwoFactorEnabled = false,
                            UserName = "karen.smith@example.com"
                        },
                        new
                        {
                            Id = "138",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f375428-12c5-426a-9a69-d8595bd3c978",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david.lee@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Lee",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "DAVID.LEE@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.LEE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPiDp+ygQR8IKshpgy91Zz30rA+OlMWgfRESJ3n8YSyD861UInwOY0wIedIvSrehAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a928c3a6-bec9-4cf8-b055-82e7b1825a32",
                            TwoFactorEnabled = false,
                            UserName = "david.lee@example.com"
                        },
                        new
                        {
                            Id = "139",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b9e02dd-8b2a-4523-aa1b-106ebebc11c6",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "james.taylor@example.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JAMES.TAYLOR@EXAMPLE.COM",
                            NormalizedUserName = "JAMES.TAYLOR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPlTxqi8Eyci4zi7rw5sx9h0rVmZKONiS3gWgiapqKutc90sO2dWTW0hrZO751773A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3dc6527-ecc5-4c14-8f09-ff92da71f1b0",
                            TwoFactorEnabled = false,
                            UserName = "james.taylor@example.com"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.AdminProfileModel", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("AdminRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("AppointedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("AdminProfiles");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAccountModel", b =>
                {
                    b.Property<int>("BillAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillAccountId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("OutstandingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("BillAccounts");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAssignmentModel", b =>
                {
                    b.Property<int>("BillAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillAssignmentId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BillId")
                        .HasColumnType("int");

                    b.Property<string>("BillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillAssignmentId");

                    b.HasIndex("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("BillAssignment");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillDetailModel", b =>
                {
                    b.Property<int>("BillDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillDetailId"));

                    b.Property<decimal>("ActualAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<int>("BillItemsID")
                        .HasColumnType("int");

                    b.Property<decimal?>("CustomAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BillDetailId");

                    b.HasIndex("BillId");

                    b.HasIndex("BillItemsID");

                    b.ToTable("BillDetail");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillItemsModel", b =>
                {
                    b.Property<int>("BillItemsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillItemsID"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BillItemsModelBillItemsID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BillItemsID");

                    b.HasIndex("BillItemsModelBillItemsID");

                    b.ToTable("BillItems");

                    b.HasData(
                        new
                        {
                            BillItemsID = 1,
                            AddedOn = new DateTime(2025, 4, 14, 18, 14, 25, 252, DateTimeKind.Utc).AddTicks(2843),
                            Amount = 3500.00m,
                            Description = "Monthly HOA dues covering maintenance, security, and amenities.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Homeowners Association (HOA) Fees",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 2,
                            AddedOn = new DateTime(2025, 4, 14, 18, 14, 25, 252, DateTimeKind.Utc).AddTicks(2854),
                            Amount = 100.00m,
                            Description = "Monthly water consumption charges.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Water Bill",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 3,
                            AddedOn = new DateTime(2025, 4, 14, 18, 14, 25, 252, DateTimeKind.Utc).AddTicks(2856),
                            Amount = 2500.00m,
                            Description = "Monthly payment for electricity consumption.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Electricity Bill",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 4,
                            AddedOn = new DateTime(2025, 4, 14, 18, 14, 25, 252, DateTimeKind.Utc).AddTicks(2857),
                            Amount = 300.00m,
                            Description = "Monthly fee for waste disposal services.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Garbage Collection Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 5,
                            AddedOn = new DateTime(2025, 4, 14, 18, 14, 25, 252, DateTimeKind.Utc).AddTicks(2858),
                            Amount = 1500.00m,
                            Description = "Monthly fee for subdivision security services.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Security Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 6,
                            AddedOn = new DateTime(2025, 4, 14, 18, 14, 25, 252, DateTimeKind.Utc).AddTicks(2859),
                            Amount = 500.00m,
                            Description = "Monthly fee for streetlight maintenance.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Street Lighting Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 7,
                            AddedOn = new DateTime(2025, 4, 14, 18, 14, 25, 252, DateTimeKind.Utc).AddTicks(2860),
                            Amount = 800.00m,
                            Description = "Annual fee for maintaining the clubhouse and shared spaces.",
                            IsDeleted = false,
                            PaymentDuration = "Yearly",
                            PaymentName = "Clubhouse Maintenance Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 8,
                            AddedOn = new DateTime(2025, 4, 14, 18, 14, 25, 252, DateTimeKind.Utc).AddTicks(2861),
                            Amount = 5000.00m,
                            Description = "Annual contribution for property tax remittance.",
                            IsDeleted = false,
                            PaymentDuration = "Yearly",
                            PaymentName = "Property Tax Contribution",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 9,
                            AddedOn = new DateTime(2025, 4, 14, 18, 14, 25, 252, DateTimeKind.Utc).AddTicks(2862),
                            Amount = 1200.00m,
                            Description = "Quarterly contribution for major subdivision repairs.",
                            IsDeleted = false,
                            PaymentDuration = "Quarterly",
                            PaymentName = "Sinking Fund Contribution",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 10,
                            AddedOn = new DateTime(2025, 4, 14, 18, 14, 25, 252, DateTimeKind.Utc).AddTicks(2864),
                            Amount = 600.00m,
                            Description = "Quarterly fee for pest control services in the subdivision.",
                            IsDeleted = false,
                            PaymentDuration = "Quarterly",
                            PaymentName = "Pest Control Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 11,
                            AddedOn = new DateTime(2025, 4, 14, 18, 14, 25, 252, DateTimeKind.Utc).AddTicks(2865),
                            Amount = 1000.00m,
                            Description = "Annual fee for road maintenance and repairs.",
                            IsDeleted = false,
                            PaymentDuration = "Yearly",
                            PaymentName = "Road Maintenance Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.BillModel", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RemainingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillPaymentModel", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BillId");

                    b.ToTable("BillPayment");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillTransactionModel", b =>
                {
                    b.Property<int>("BillTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillTransactionId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BillItemsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PaidBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillTransactionId");

                    b.HasIndex("BillItemsId");

                    b.HasIndex("UserId");

                    b.ToTable("BillTransactions");
                });

            modelBuilder.Entity("Hometown_Application.Models.ChatMessageModel", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ApplicationUserId1");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Hometown_Application.Models.CommentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Hometown_Application.Models.ContactModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Hometown_Application.Models.DocumentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Hometown_Application.Models.EventModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isAllDay")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Hometown_Application.Models.FacilityModel", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilityId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(252)
                        .HasColumnType("nvarchar(252)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OtherType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("FacilityId");

                    b.ToTable("Facility");
                });

            modelBuilder.Entity("Hometown_Application.Models.FeedbackComplaintModel", b =>
                {
                    b.Property<int>("FeedbackComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackComplaintId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdminNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminReply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackComplaintId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedbackComplaints");
                });

            modelBuilder.Entity("Hometown_Application.Models.HomeownerProfileModel", b =>
                {
                    b.Property<int>("HomeownerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HomeownerId"));

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HouseModelHouseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPromotedToAdmin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPromotedToStaff")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MoveInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MoveOutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RegisteredOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HomeownerId");

                    b.HasIndex("HouseModelHouseId");

                    b.HasIndex("UserId");

                    b.ToTable("HomeownerProfiles");

                    b.HasData(
                        new
                        {
                            HomeownerId = 1,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7226),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7224),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7225),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7226),
                            UserId = "111"
                        },
                        new
                        {
                            HomeownerId = 2,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7231),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7230),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7230),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7231),
                            UserId = "112"
                        },
                        new
                        {
                            HomeownerId = 3,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7239),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7232),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7238),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7239),
                            UserId = "113"
                        },
                        new
                        {
                            HomeownerId = 4,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7241),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7240),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7240),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7241),
                            UserId = "114"
                        },
                        new
                        {
                            HomeownerId = 5,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7243),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7242),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7242),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7243),
                            UserId = "115"
                        },
                        new
                        {
                            HomeownerId = 6,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7245),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7244),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7244),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7245),
                            UserId = "116"
                        },
                        new
                        {
                            HomeownerId = 7,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7247),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7246),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7246),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7247),
                            UserId = "117"
                        },
                        new
                        {
                            HomeownerId = 8,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7249),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7248),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7248),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7249),
                            UserId = "118"
                        },
                        new
                        {
                            HomeownerId = 9,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7251),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7250),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7250),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7251),
                            UserId = "119"
                        },
                        new
                        {
                            HomeownerId = 10,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7253),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7252),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7252),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7253),
                            UserId = "120"
                        },
                        new
                        {
                            HomeownerId = 11,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7255),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7254),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7254),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7255),
                            UserId = "121"
                        },
                        new
                        {
                            HomeownerId = 12,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7257),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7256),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7256),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7257),
                            UserId = "122"
                        },
                        new
                        {
                            HomeownerId = 13,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7259),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7258),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7258),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7259),
                            UserId = "123"
                        },
                        new
                        {
                            HomeownerId = 14,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7261),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7260),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7260),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7261),
                            UserId = "124"
                        },
                        new
                        {
                            HomeownerId = 15,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7262),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7262),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7262),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7263),
                            UserId = "125"
                        },
                        new
                        {
                            HomeownerId = 16,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7264),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7264),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7264),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7265),
                            UserId = "126"
                        },
                        new
                        {
                            HomeownerId = 17,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7266),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7265),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7266),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7267),
                            UserId = "127"
                        },
                        new
                        {
                            HomeownerId = 18,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7268),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7267),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7268),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7269),
                            UserId = "128"
                        },
                        new
                        {
                            HomeownerId = 19,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7270),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7269),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7270),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7271),
                            UserId = "129"
                        },
                        new
                        {
                            HomeownerId = 20,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7272),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7271),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7272),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7273),
                            UserId = "130"
                        },
                        new
                        {
                            HomeownerId = 21,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7274),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7273),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7274),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7274),
                            UserId = "131"
                        },
                        new
                        {
                            HomeownerId = 22,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7276),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7275),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7276),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7276),
                            UserId = "132"
                        },
                        new
                        {
                            HomeownerId = 23,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7278),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7277),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7277),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7278),
                            UserId = "133"
                        },
                        new
                        {
                            HomeownerId = 24,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7280),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7279),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7279),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7280),
                            UserId = "134"
                        },
                        new
                        {
                            HomeownerId = 25,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7282),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7281),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7281),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7282),
                            UserId = "135"
                        },
                        new
                        {
                            HomeownerId = 26,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7284),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7283),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7283),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7284),
                            UserId = "136"
                        },
                        new
                        {
                            HomeownerId = 27,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7287),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7286),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7286),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7287),
                            UserId = "137"
                        },
                        new
                        {
                            HomeownerId = 28,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7289),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7288),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7288),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7289),
                            UserId = "138"
                        },
                        new
                        {
                            HomeownerId = 29,
                            ApprovedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7290),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7290),
                            MoveOutDate = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7290),
                            RegisteredOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7291),
                            UserId = "139"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.HouseModel", b =>
                {
                    b.Property<int?>("HouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("HouseId"));

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<int>("LotNumber")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HouseId");

                    b.HasIndex("UserId");

                    b.HasIndex("BlockName", "LotNumber", "StreetName")
                        .IsUnique();

                    b.ToTable("Houses");

                    b.HasData(
                        new
                        {
                            HouseId = 1,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Ashwood Lane",
                            UserId = "100"
                        },
                        new
                        {
                            HouseId = 2,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Ashwood Lane",
                            UserId = "102"
                        },
                        new
                        {
                            HouseId = 3,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Ashwood Lane",
                            UserId = "103"
                        },
                        new
                        {
                            HouseId = 4,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Ashwood Lane",
                            UserId = "104"
                        },
                        new
                        {
                            HouseId = 5,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Ashwood Lane",
                            UserId = "105"
                        },
                        new
                        {
                            HouseId = 6,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Birchwood Avenue",
                            UserId = "106"
                        },
                        new
                        {
                            HouseId = 7,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Birchwood Avenue",
                            UserId = "107"
                        },
                        new
                        {
                            HouseId = 8,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Birchwood Avenue",
                            UserId = "108"
                        },
                        new
                        {
                            HouseId = 9,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Birchwood Avenue",
                            UserId = "109"
                        },
                        new
                        {
                            HouseId = 10,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Birchwood Avenue",
                            UserId = "110"
                        },
                        new
                        {
                            HouseId = 11,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Cedar Hollow Road",
                            UserId = "111"
                        },
                        new
                        {
                            HouseId = 12,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Cedar Hollow Road",
                            UserId = "112"
                        },
                        new
                        {
                            HouseId = 13,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Cedar Hollow Road",
                            UserId = "113"
                        },
                        new
                        {
                            HouseId = 14,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Cedar Hollow Road",
                            UserId = "114"
                        },
                        new
                        {
                            HouseId = 15,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Cedar Hollow Road",
                            UserId = "115"
                        },
                        new
                        {
                            HouseId = 16,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Chestnut Boulevard",
                            UserId = "116"
                        },
                        new
                        {
                            HouseId = 17,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Chestnut Boulevard",
                            UserId = "117"
                        },
                        new
                        {
                            HouseId = 18,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Chestnut Boulevard",
                            UserId = "118"
                        },
                        new
                        {
                            HouseId = 19,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Chestnut Boulevard",
                            UserId = "119"
                        },
                        new
                        {
                            HouseId = 20,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Chestnut Boulevard",
                            UserId = "120"
                        },
                        new
                        {
                            HouseId = 21,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Crystal Drive",
                            UserId = "121"
                        },
                        new
                        {
                            HouseId = 22,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Crystal Drive",
                            UserId = "122"
                        },
                        new
                        {
                            HouseId = 23,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Crystal Drive",
                            UserId = "123"
                        },
                        new
                        {
                            HouseId = 24,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Crystal Drive",
                            UserId = "124"
                        },
                        new
                        {
                            HouseId = 25,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Crystal Drive",
                            UserId = "125"
                        },
                        new
                        {
                            HouseId = 26,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Elmwood Drive",
                            UserId = "126"
                        },
                        new
                        {
                            HouseId = 27,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Elmwood Drive",
                            UserId = "127"
                        },
                        new
                        {
                            HouseId = 28,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Elmwood Drive",
                            UserId = "128"
                        },
                        new
                        {
                            HouseId = 29,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Elmwood Drive",
                            UserId = "129"
                        },
                        new
                        {
                            HouseId = 30,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Elmwood Drive",
                            UserId = "130"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.PollModel", b =>
                {
                    b.Property<int>("PollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PollId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PollId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Polls");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollQuestionModel", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("PollId");

                    b.ToTable("PollQuestions");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollResponseModel", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseId"));

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("RespondentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TextResponse")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("ResponseId");

                    b.HasIndex("PollId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("RespondentId");

                    b.HasIndex("SelectedOptionId");

                    b.ToTable("PollResponses");
                });

            modelBuilder.Entity("Hometown_Application.Models.PostModel", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Hometown_Application.Models.QuestionOptionModel", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("Hometown_Application.Models.ReactionModel", b =>
                {
                    b.Property<int>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReactionId"));

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReactionId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("Hometown_Application.Models.RequestTypeModel", b =>
                {
                    b.Property<int>("RequestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestTypeId"));

                    b.Property<int>("AssignedDepartment")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RequestTypeId");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new
                        {
                            RequestTypeId = 1,
                            AssignedDepartment = 0,
                            Description = "Request for pool maintenance.",
                            IsActive = true,
                            Name = "Pool Cleaning"
                        },
                        new
                        {
                            RequestTypeId = 2,
                            AssignedDepartment = 1,
                            Description = "Report or ask about lost items.",
                            IsActive = true,
                            Name = "Lost and Found Inquiry"
                        },
                        new
                        {
                            RequestTypeId = 3,
                            AssignedDepartment = 2,
                            Description = "Concerns about billing and payments.",
                            IsActive = true,
                            Name = "Billing Issue"
                        },
                        new
                        {
                            RequestTypeId = 4,
                            AssignedDepartment = 3,
                            Description = "Report issues with internet connectivity.",
                            IsActive = true,
                            Name = "Internet Issue"
                        },
                        new
                        {
                            RequestTypeId = 5,
                            AssignedDepartment = 4,
                            Description = "Request lawn maintenance services.",
                            IsActive = true,
                            Name = "Lawn Mowing"
                        },
                        new
                        {
                            RequestTypeId = 6,
                            AssignedDepartment = 5,
                            Description = "Report plumbing issues like leaks.",
                            IsActive = true,
                            Name = "Plumbing Repair"
                        },
                        new
                        {
                            RequestTypeId = 7,
                            AssignedDepartment = 6,
                            Description = "Report security concerns or suspicious activity.",
                            IsActive = true,
                            Name = "Suspicious Activity"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.ReservationModel", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReservationId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceRequestModel", b =>
                {
                    b.Property<int>("ServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceRequestId"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancelReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CancelledOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HomeownerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RejectedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectedReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Schedule")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Urgency")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ServiceRequestId");

                    b.HasIndex("HomeownerId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceStaffAssignmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnavailable")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("ServiceStaffAssignments");
                });

            modelBuilder.Entity("Hometown_Application.Models.StaffProfileModel", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("AccountCreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AccountCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmergencyContactNumber")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("EmergencyContactRelation")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActiveEmployee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAlsoHomeOwner")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFired")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Salary")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("StaffProfiles");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7071),
                            Address = "123 Main St",
                            Department = 6,
                            EmergencyContactName = "Jane Doe",
                            EmergencyContactNumber = "1234567890",
                            EmergencyContactRelation = "Spouse",
                            HireDate = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Security Officer",
                            Salary = 25000.00m,
                            UserId = "100"
                        },
                        new
                        {
                            StaffId = 2,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7086),
                            Address = "456 Oak St",
                            Department = 5,
                            EmergencyContactName = "John Smith",
                            EmergencyContactNumber = "0987654321",
                            EmergencyContactRelation = "Brother",
                            HireDate = new DateTime(2021, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Maintenance Supervisor",
                            Salary = 30000.00m,
                            UserId = "102"
                        },
                        new
                        {
                            StaffId = 3,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7094),
                            Address = "789 Pine St",
                            Department = 3,
                            EmergencyContactName = "Alice Brown",
                            EmergencyContactNumber = "5678901234",
                            EmergencyContactRelation = "Sister",
                            HireDate = new DateTime(2020, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "System Administrator",
                            Salary = 35000.00m,
                            UserId = "103"
                        },
                        new
                        {
                            StaffId = 4,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7099),
                            Address = "987 Cedar St",
                            Department = 2,
                            EmergencyContactName = "Bob White",
                            EmergencyContactNumber = "2345678901",
                            EmergencyContactRelation = "Father",
                            HireDate = new DateTime(2019, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Finance Manager",
                            Salary = 40000.00m,
                            UserId = "104"
                        },
                        new
                        {
                            StaffId = 5,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7107),
                            Address = "654 Birch St",
                            Department = 0,
                            EmergencyContactName = "Chris Green",
                            EmergencyContactNumber = "3456789012",
                            EmergencyContactRelation = "Friend",
                            HireDate = new DateTime(2021, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Amenities Coordinator",
                            Salary = 28000.00m,
                            UserId = "105"
                        },
                        new
                        {
                            StaffId = 6,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7112),
                            Address = "321 Maple St",
                            Department = 1,
                            EmergencyContactName = "Diana Blue",
                            EmergencyContactNumber = "4567890123",
                            EmergencyContactRelation = "Cousin",
                            HireDate = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Customer Service Representative",
                            Salary = 26000.00m,
                            UserId = "106"
                        },
                        new
                        {
                            StaffId = 7,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7117),
                            Address = "159 Elm St",
                            Department = 4,
                            EmergencyContactName = "Evan Red",
                            EmergencyContactNumber = "5678901234",
                            EmergencyContactRelation = "Uncle",
                            HireDate = new DateTime(2020, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Head Gardener",
                            Salary = 27000.00m,
                            UserId = "107"
                        },
                        new
                        {
                            StaffId = 8,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7122),
                            Address = "123 Main St",
                            Department = 6,
                            EmergencyContactName = "Jane Doe",
                            EmergencyContactNumber = "1234567890",
                            EmergencyContactRelation = "Spouse",
                            HireDate = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Security Officer",
                            Salary = 25000.00m,
                            UserId = "108"
                        },
                        new
                        {
                            StaffId = 9,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7139),
                            Address = "456 Oak St",
                            Department = 5,
                            EmergencyContactName = "John Smith",
                            EmergencyContactNumber = "0987654321",
                            EmergencyContactRelation = "Brother",
                            HireDate = new DateTime(2021, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Maintenance Supervisor",
                            Salary = 30000.00m,
                            UserId = "109"
                        },
                        new
                        {
                            StaffId = 10,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 14, 18, 14, 26, 955, DateTimeKind.Utc).AddTicks(7154),
                            Address = "789 Pine St",
                            Department = 3,
                            EmergencyContactName = "Alice Brown",
                            EmergencyContactNumber = "5678901234",
                            EmergencyContactRelation = "Sister",
                            HireDate = new DateTime(2020, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "System Administrator",
                            Salary = 35000.00m,
                            UserId = "110"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.StatusModel", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "Available"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "Unavailable"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Pending"
                        },
                        new
                        {
                            StatusId = 4,
                            StatusName = "In Progress"
                        },
                        new
                        {
                            StatusId = 5,
                            StatusName = "Resolved"
                        },
                        new
                        {
                            StatusId = 6,
                            StatusName = "Closed"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.VehicleGatepassModel", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GatePassExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GatePassIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleBrand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("VehicleImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("VehiclePlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleId");

                    b.HasIndex("UserId");

                    b.ToTable("VehicleGatepasses");
                });

            modelBuilder.Entity("Hometown_Application.Models.VisitorGatepassModel", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdminNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExpectedArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GatePassExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GatePassIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfVisitors")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehiclePlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehicleType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VisitorId");

                    b.HasIndex("UserId");

                    b.ToTable("VisitorGatepasses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "HomeOwner",
                            NormalizedName = "HOMEOWNER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "100",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "102",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "103",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "104",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "105",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "106",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "107",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "108",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "109",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "110",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "111",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "112",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "113",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "114",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "115",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "116",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "117",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "118",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "119",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "120",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "121",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "122",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "123",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "124",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "125",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "126",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "127",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "128",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "129",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "130",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "131",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "132",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "133",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "134",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "135",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "136",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "137",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "138",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "139",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Hometown_Application.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.HasOne("Hometown_Application.Models.AdminProfileModel", "AdminProfiles")
                        .WithMany()
                        .HasForeignKey("AdminProfilesAdminId");

                    b.HasOne("Hometown_Application.Models.BillAssignmentModel", null)
                        .WithMany("Users")
                        .HasForeignKey("BillAssignmentModelBillAssignmentId");

                    b.HasOne("Hometown_Application.Models.HomeownerProfileModel", "HomeownerProfiles")
                        .WithMany()
                        .HasForeignKey("HomeownerProfilesHomeownerId");

                    b.HasOne("Hometown_Application.Models.StaffProfileModel", "StaffProfiles")
                        .WithMany()
                        .HasForeignKey("StaffProfilesStaffId");

                    b.Navigation("AdminProfiles");

                    b.Navigation("HomeownerProfiles");

                    b.Navigation("StaffProfiles");
                });

            modelBuilder.Entity("Hometown_Application.Models.AdminProfileModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAccountModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAssignmentModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillModel", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillDetailModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillModel", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Models.BillItemsModel", "BillItemType")
                        .WithMany()
                        .HasForeignKey("BillItemsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("BillItemType");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillItemsModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillItemsModel", null)
                        .WithMany("BillItems")
                        .HasForeignKey("BillItemsModelBillItemsID");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillPaymentModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillModel", "Bill")
                        .WithMany("Payments")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillTransactionModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillItemsModel", "BillItemsModel")
                        .WithMany()
                        .HasForeignKey("BillItemsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("BillItemsModel");
                });

            modelBuilder.Entity("Hometown_Application.Models.ChatMessageModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany("SentMessages")
                        .HasForeignKey("ApplicationUserId1");

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Hometown_Application.Models.CommentModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PostModel", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Hometown_Application.Models.FeedbackComplaintModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.StatusModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Hometown_Application.Models.HomeownerProfileModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.HouseModel", null)
                        .WithMany("Homeowners")
                        .HasForeignKey("HouseModelHouseId");

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.HouseModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollQuestionModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PollModel", "Poll")
                        .WithMany("Questions")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollResponseModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PollModel", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Models.PollQuestionModel", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Respondent")
                        .WithMany()
                        .HasForeignKey("RespondentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hometown_Application.Models.QuestionOptionModel", "SelectedOption")
                        .WithMany("Responses")
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Poll");

                    b.Navigation("Question");

                    b.Navigation("Respondent");

                    b.Navigation("SelectedOption");
                });

            modelBuilder.Entity("Hometown_Application.Models.PostModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.QuestionOptionModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PollQuestionModel", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Hometown_Application.Models.ReactionModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PostModel", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Hometown_Application.Models.ReservationModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.FacilityModel", "Facility")
                        .WithMany("Reservations")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceRequestModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.HomeownerProfileModel", "Homeowner")
                        .WithMany()
                        .HasForeignKey("HomeownerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Hometown_Application.Models.RequestTypeModel", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Models.StatusModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Homeowner");

                    b.Navigation("RequestType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceStaffAssignmentModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Hometown_Application.Models.StaffProfileModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.VehicleGatepassModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.VisitorGatepassModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hometown_Application.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAssignmentModel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillItemsModel", b =>
                {
                    b.Navigation("BillItems");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillModel", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Hometown_Application.Models.FacilityModel", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Hometown_Application.Models.HouseModel", b =>
                {
                    b.Navigation("Homeowners");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollModel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollQuestionModel", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Hometown_Application.Models.PostModel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Hometown_Application.Models.QuestionOptionModel", b =>
                {
                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
