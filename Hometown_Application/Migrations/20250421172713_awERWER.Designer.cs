// <auto-generated />
using System;
using Hometown_Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hometown_Application.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250421172713_awERWER")]
    partial class awERWER
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hometown_Application.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AdminProfilesAdminId")
                        .HasColumnType("int");

                    b.Property<int?>("BillAssignModelBillAssignId")
                        .HasColumnType("int");

                    b.Property<int?>("BillAssignmentModelBillAssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FacebookProfile")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("HomeownerProfilesHomeownerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActiveUser")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBirthdayPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGenderPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LinkedInProfile")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("MakeFacebookPublic")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffProfilesStaffId")
                        .HasColumnType("int");

                    b.Property<string>("TwitterProfile")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AdminProfilesAdminId");

                    b.HasIndex("BillAssignModelBillAssignId");

                    b.HasIndex("BillAssignmentModelBillAssignmentId");

                    b.HasIndex("HomeownerProfilesHomeownerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StaffProfilesStaffId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "100",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c99afa1a-ac2f-4fe0-b606-19ad65f5ba91",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elon.musk@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elon",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Musk",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "ELON.MUSK@EXAMPLE.COM",
                            NormalizedUserName = "ELON.MUSK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJCBiQTPDBaf2o3Kc3Y5ygg0UQ7r76tq0NX0kFt3NVkatwco8XGfSam+MkZOWOJxig==",
                            PhoneNumberConfirmed = false,
                            ProfilePicturePath = "wwwroot/images/picc.png",
                            SecurityStamp = "40ae58bc-59c8-41bf-9b65-e729bcee666e",
                            TwoFactorEnabled = false,
                            UserName = "elon.musk@example.com"
                        },
                        new
                        {
                            Id = "102",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06fed77d-0f95-44ab-a7e9-3abfba4ce5e0",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bill.gates@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bill",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Gates",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "BILL.GATES@EXAMPLE.COM",
                            NormalizedUserName = "BILL.GATES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEuMd2vxTJJekMM3HWZXVeOTBvz3/EywfRcE9uVM48mzgnWmAHkPyuni34IEZIHMxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0dacd6e9-c5b6-4246-b503-22b6759989cc",
                            TwoFactorEnabled = false,
                            UserName = "bill.gates@example.com"
                        },
                        new
                        {
                            Id = "103",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5abaae8-e4e3-4616-a0e1-1982ffb52d3c",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mark.zuckerberg@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Zuckerberg",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARK.ZUCKERBERG@EXAMPLE.COM",
                            NormalizedUserName = "MARK.ZUCKERBERG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIgeFloqlCurdXtXxNpr2rmnpzZdRPZmRSjdmdFI/wgzYRVTUbSyMtZiQ6zhPWQ92Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05180134-f298-4054-9566-787bad199b0e",
                            TwoFactorEnabled = false,
                            UserName = "mark.zuckerberg@example.com"
                        },
                        new
                        {
                            Id = "104",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ef09b92-3cf8-4088-89ac-8686979a1beb",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sundar.pichai@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sundar",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Pichai",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SUNDAR.PICHAI@EXAMPLE.COM",
                            NormalizedUserName = "SUNDAR.PICHAI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPcvySwWC36Tp6v3iL2Jy3QL00MbPux8iu1Yav0gDJ8zGDJxKj7icx2qX4se9Uwr2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "adf927ca-84b7-48ed-a60e-0218fb56fa53",
                            TwoFactorEnabled = false,
                            UserName = "sundar.pichai@example.com"
                        },
                        new
                        {
                            Id = "105",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ded7c19-817f-429f-9c83-0b645475cd44",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tim.cook@example.com",
                            EmailConfirmed = true,
                            FirstName = "Tim",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Cook",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "TIM.COOK@EXAMPLE.COM",
                            NormalizedUserName = "TIM.COOK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG19fOtsvOKVb1iP4g8NHZFesBSXj9tLDBC2KN0W3lQGBOQyBqtzeMwoEAyMY02tfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3eeaba13-d558-4919-b1de-4fcfcddc542b",
                            TwoFactorEnabled = false,
                            UserName = "tim.cook@example.com"
                        },
                        new
                        {
                            Id = "106",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc1b6d4f-ad5b-400c-9a2b-c257ad23cb2a",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "satya.nadella@example.com",
                            EmailConfirmed = true,
                            FirstName = "Satya",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Nadella",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SATYA.NADELLA@EXAMPLE.COM",
                            NormalizedUserName = "SATYA.NADELLA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJfhq1AY4J3a95z6iI8coDYE5Cm4VphAisis8kxltWafAL5MgoGGV0dVgHcWsulvWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "08e68bef-b97a-4723-9a18-007a944d1db1",
                            TwoFactorEnabled = false,
                            UserName = "satya.nadella@example.com"
                        },
                        new
                        {
                            Id = "107",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c2ac445-9be7-4c3b-9f61-88a131b50b1a",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jack.dorsey@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jack",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Dorsey",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JACK.DORSEY@EXAMPLE.COM",
                            NormalizedUserName = "JACK.DORSEY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJTSv7cMQeu3I46HxVA176TYD+a2/msmwxxtGVoxGn6LeD3hiwRKfr+fnG9qZ8uRwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20de8eda-ee65-4f84-90ab-87e8998d7ae4",
                            TwoFactorEnabled = false,
                            UserName = "jack.dorsey@example.com"
                        },
                        new
                        {
                            Id = "108",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "040048dd-0d60-43b5-bfd1-ddb7ec76062d",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "larry.page@example.com",
                            EmailConfirmed = true,
                            FirstName = "Larry",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Page",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "LARRY.PAGE@EXAMPLE.COM",
                            NormalizedUserName = "LARRY.PAGE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFKuFKL1JEqkd24SpQ91aJwrXjVaF+IDvdh/OVJ16Um+w6TcjpxeBk8uipvFVE8SXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b830a9f-fe3f-4675-a742-0d4ef5534f1b",
                            TwoFactorEnabled = false,
                            UserName = "larry.page@example.com"
                        },
                        new
                        {
                            Id = "109",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "408b80e2-3979-4ab4-b301-7c07081849c5",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sergey.brin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sergey",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Brin",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SERGEY.BRIN@EXAMPLE.COM",
                            NormalizedUserName = "SERGEY.BRIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEnMwBE0OG6Dzame2V7MDAJNuQEHY4k5yJQxyQ5rq+2ikjOmFAHK25CA1xPUnoqx5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "84887877-1d6b-4c50-b2c3-795099b3d212",
                            TwoFactorEnabled = false,
                            UserName = "sergey.brin@example.com"
                        },
                        new
                        {
                            Id = "110",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5117098d-aedb-4cfb-9c64-84b2f84ba6ed",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "steve.jobs@example.com",
                            EmailConfirmed = true,
                            FirstName = "Steve",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Jobs",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "STEVE.JOBS@EXAMPLE.COM",
                            NormalizedUserName = "STEVE.JOBS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAzc0JE+ySW7rtv5zsPKLh7fM50f5m2KEqy3Tei3r7azcWsAfjBMorqZfRfG06/oeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d55bb33a-116c-4864-afd4-438b3066c992",
                            TwoFactorEnabled = false,
                            UserName = "steve.jobs@example.com"
                        },
                        new
                        {
                            Id = "111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2fea902f-490b-47b8-8bde-b7f7b2298e02",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sheryl.sandberg@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sheryl",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Sandberg",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SHERYL.SANDBERG@EXAMPLE.COM",
                            NormalizedUserName = "SHERYL.SANDBERG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGZomKKJ1S08TzethtqG40EuTi29gEUHcl2g/PMlGfKqY9EnrMnHXTNPV7Nztb4HsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "03c6cb28-98e2-424d-bcd8-b808a869a4d9",
                            TwoFactorEnabled = false,
                            UserName = "sheryl.sandberg@example.com"
                        },
                        new
                        {
                            Id = "112",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06b3148e-3e99-49fa-973b-e8df377e74a7",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "reed.hastings@example.com",
                            EmailConfirmed = true,
                            FirstName = "Reed",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Hastings",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "REED.HASTINGS@EXAMPLE.COM",
                            NormalizedUserName = "REED.HASTINGS@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL31rftGXNTdZFgXvHlrk1o05mQ6o6ZqknMkDLdeNYbWXohvGnEgvyu4iWIX1mSeiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81dadba1-1026-4901-87fd-599f50463cd5",
                            TwoFactorEnabled = false,
                            UserName = "reed.hastings@example.com"
                        },
                        new
                        {
                            Id = "113",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2077a01-e3fb-44e5-90a1-2002b26c3806",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marissa.mayer@example.com",
                            EmailConfirmed = true,
                            FirstName = "Marissa",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Mayer",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARISSA.MAYER@EXAMPLE.COM",
                            NormalizedUserName = "MARISSA.MAYER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDdmqBKPcYq7eV172fwhBmAL052i5XD7AFXOeYAvqd7AoZGmZNbnknSsjXoN17QVlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51494cb3-f8e5-4184-9af8-7780c582c885",
                            TwoFactorEnabled = false,
                            UserName = "marissa.mayer@example.com"
                        },
                        new
                        {
                            Id = "114",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0190cf58-62de-40df-a61c-432366e6a34c",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elizabeth.holmes@example.com",
                            EmailConfirmed = true,
                            FirstName = "Elizabeth",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Holmes",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "ELIZABETH.HOLMES@EXAMPLE.COM",
                            NormalizedUserName = "ELIZABETH.HOLMES@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG8WxC8wKu24h8o9cs4bxUc51kt0nR1EPmpC4Jilz7BKBZje+bXwBhDATmg7u/szFQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78de8900-71e4-4780-8f9f-4df69ab1a923",
                            TwoFactorEnabled = false,
                            UserName = "elizabeth.holmes@example.com"
                        },
                        new
                        {
                            Id = "115",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4bf93ac4-dd61-4f7c-9268-2b6910e84304",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "susan.wojcicki@example.com",
                            EmailConfirmed = true,
                            FirstName = "Susan",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Wojcicki",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SUSAN.WOJCICKI@EXAMPLE.COM",
                            NormalizedUserName = "SUSAN.WOJCICKI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJTzMO0OAKZRP9Qdb3lfrLf0iWRLyXFuch8LNeEzII/9a4nOkqBfg3ItSjZ9ZbAH3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ebc4e99-3ba8-4e03-953e-6d2c9da2e1ac",
                            TwoFactorEnabled = false,
                            UserName = "susan.wojcicki@example.com"
                        },
                        new
                        {
                            Id = "116",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a5402b3-3b64-4b2a-8769-30304f5d7b12",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tim.arnold@example.com",
                            EmailConfirmed = true,
                            FirstName = "Tim",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Arnold",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "TIM.ARNOLD@EXAMPLE.COM",
                            NormalizedUserName = "TIM.ARNOLD@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMT+2f0EyqircGQGySDyMY5FzxFtls9MwFKca7XEB0cJCFlYHs/4cWhYYHNVN1iHng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18bb47e0-9d44-4611-994d-045df93785b7",
                            TwoFactorEnabled = false,
                            UserName = "tim.arnold@example.com"
                        },
                        new
                        {
                            Id = "117",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9877a817-5d5d-43a3-a9b3-e555f7db905c",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.iger@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Iger",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "BOB.IGER@EXAMPLE.COM",
                            NormalizedUserName = "BOB.IGER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJZgMyXGyRyhW6sY0nOocsPiAGYJMX6kPkkVurN8OP79PzEI979SxMkOGTIcBbt3zQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d08acd0d-13a3-4b30-ae8e-6e1913cc908c",
                            TwoFactorEnabled = false,
                            UserName = "bob.iger@example.com"
                        },
                        new
                        {
                            Id = "118",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6f10820-8aa1-4fde-82e3-3ede32198067",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "larry.ellison@example.com",
                            EmailConfirmed = true,
                            FirstName = "Larry",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Ellison",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "LARRY.ELLISON@EXAMPLE.COM",
                            NormalizedUserName = "LARRY.ELLISON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBYw47bHbZDYQQtUmkBw8gH0R/ebeNyAFlhYfZ0er9JtF0dZoMgPeYHcvQQdNn1R+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7efcfcfc-fdc1-48e5-9394-aec34d1c56a3",
                            TwoFactorEnabled = false,
                            UserName = "larry.ellison@example.com"
                        },
                        new
                        {
                            Id = "119",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "80463cad-1836-4e58-82a3-6d95a3bdaa77",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "richard.branson@example.com",
                            EmailConfirmed = true,
                            FirstName = "Richard",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Branson",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "RICHARD.BRANSON@EXAMPLE.COM",
                            NormalizedUserName = "RICHARD.BRANSON@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMpIB1PfmOpQgM1pfojyHiWub8IT/qR51b+5LeDS9/dbWSwsvz5mIaJmy9glmU5jEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8bbcc2e6-9b09-4320-8cd5-a56b9a542a41",
                            TwoFactorEnabled = false,
                            UserName = "richard.branson@example.com"
                        },
                        new
                        {
                            Id = "120",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52a02d61-d2a8-4179-bdc9-a73a21a6e413",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jack.ma@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jack",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Ma",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JACK.MA@EXAMPLE.COM",
                            NormalizedUserName = "JACK.MA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPbNP9I/nWqRR+MZAunmIsfHvGWdbpBzpONAyn6Fmv657wvbI0oLQw/KDI7Mjm0T3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dbd2b651-084a-4d08-830e-9cb401bd2b37",
                            TwoFactorEnabled = false,
                            UserName = "jack.ma@example.com"
                        },
                        new
                        {
                            Id = "121",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9014bc7b-8856-4673-8927-95da5e723102",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warren.buffett@example.com",
                            EmailConfirmed = true,
                            FirstName = "Warren",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Buffett",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "WARREN.BUFFETT@EXAMPLE.COM",
                            NormalizedUserName = "WARREN.BUFFETT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECRZ5u+aZPZ9xDlYu9NlxynJQctmBLHdXA4wd/1y3zuabDOdxTdsndM78StI9dpbIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b45c42fa-e738-4f67-afd0-811bfd3d2dcd",
                            TwoFactorEnabled = false,
                            UserName = "warren.buffett@example.com"
                        },
                        new
                        {
                            Id = "122",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cec59bfa-98ce-4a33-93a1-05cb63ddfa4c",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mary.barrett@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mary",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Barrett",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARY.BARRETT@EXAMPLE.COM",
                            NormalizedUserName = "MARY.BARRETT@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEu+dSONfFLmyP1+S1dmXtPKfYmT3IvCEI1dnPN1fgiFFx51Bd2RUVKaezq/1/Mqyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "650042fc-247f-4820-bdfb-3dad2e6b9577",
                            TwoFactorEnabled = false,
                            UserName = "mary.barrett@example.com"
                        },
                        new
                        {
                            Id = "123",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48e877ef-8e39-4ab6-bbdf-eac6dfe5dacf",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ginni.rometty@example.com",
                            EmailConfirmed = true,
                            FirstName = "Ginni",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Rometty",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "GINNI.ROMETTY@EXAMPLE.COM",
                            NormalizedUserName = "GINNI.ROMETTY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAAHCELbItcWS2MYlRnC1vJASn+LKj3IJxx6EsrreEhBInJQsaQpNjG52kfqCojYvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ecd49c52-6a66-489b-b2cd-c8584a5c9f24",
                            TwoFactorEnabled = false,
                            UserName = "ginni.rometty@example.com"
                        },
                        new
                        {
                            Id = "124",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "795198f0-6fc6-4f5b-94e2-2d74305f0655",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mark.benioff@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Benioff",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MARK.BENIOFF@EXAMPLE.COM",
                            NormalizedUserName = "MARK.BENIOFF@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELmKf4j1InSFr09EmMdkzOixw2MHkNqbFAA3Y87q4HEap+4uNJ7gJ1+GGzukOCjbSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c54dd67-12b6-4f07-af6c-dbc90a299ecd",
                            TwoFactorEnabled = false,
                            UserName = "mark.benioff@example.com"
                        },
                        new
                        {
                            Id = "125",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c0577b8-0241-41f9-8a05-5cc2815caa50",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kevin.systrom@example.com",
                            EmailConfirmed = true,
                            FirstName = "Kevin",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Systrom",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "KEVIN.SYSTROM@EXAMPLE.COM",
                            NormalizedUserName = "KEVIN.SYSTROM@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEACaC/LH7233/C2qZNQcSa1Vog1ZVuw2zfFlPZE4CtgeBvT8gNgjc7WjQUwNfC9X/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1931cfab-d6ae-44e6-bd65-69d35f6cf77f",
                            TwoFactorEnabled = false,
                            UserName = "kevin.systrom@example.com"
                        },
                        new
                        {
                            Id = "126",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7211fc00-0555-475c-8e01-98534c2cf7d9",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "evan.spiegel@example.com",
                            EmailConfirmed = true,
                            FirstName = "Evan",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Spiegel",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "EVAN.SPIEGEL@EXAMPLE.COM",
                            NormalizedUserName = "EVAN.SPIEGEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM56dHw3BB/0qJlF8oQH8Z/1OjqxgM1r17rXFLILV4xfBArR3CtMRObAJKwrMPyoPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f2b8f0e-5270-4990-8e14-4bf4a262ebc5",
                            TwoFactorEnabled = false,
                            UserName = "evan.spiegel@example.com"
                        },
                        new
                        {
                            Id = "127",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9088406-8170-43c3-b5e8-6ef27a57e4c6",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jan.koum@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jan",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Koum",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JAN.KOUM@EXAMPLE.COM",
                            NormalizedUserName = "JAN.KOUM@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFWIJleIXSkSEe7BMXneGxYWopGuWgU5x+QMeesgd5osWggbgm/L/ffgNN5G5IDXdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c1a8fa7-6d93-4c64-b6b7-a2a51900a777",
                            TwoFactorEnabled = false,
                            UserName = "jan.koum@example.com"
                        },
                        new
                        {
                            Id = "128",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09b143e3-e9cf-4f07-ad71-cca070bce952",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "janice.fang@example.com",
                            EmailConfirmed = true,
                            FirstName = "Janice",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Fang",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JANICE.FANG@EXAMPLE.COM",
                            NormalizedUserName = "JANICE.FANG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHIvab9p8azwkCK3oObu1Ect4cpNcQga5q4SrXuiue0OOeBc6EvVL5I0HqYEjjSgCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bae9382d-cee1-4653-a679-9656365aa230",
                            TwoFactorEnabled = false,
                            UserName = "janice.fang@example.com"
                        },
                        new
                        {
                            Id = "129",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d5772a1-8bfa-4dc4-a8df-f9f6a1052aaf",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sergey.gladkikh@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sergey",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Gladkikh",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "SERGEY.GLADKIKH@EXAMPLE.COM",
                            NormalizedUserName = "SERGEY.GLADKIKH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENUkgHKUeG2cDhqnZElNOmIrvbIteCeq3jfsq5aPhcr7I5DT65rleQ5nYTDq0uPdFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff5141f5-25e7-4e1e-8a7e-53234c7f1f9f",
                            TwoFactorEnabled = false,
                            UserName = "sergey.gladkikh@example.com"
                        },
                        new
                        {
                            Id = "130",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45ff5a39-846d-4c37-a100-8abb6f7c6df1",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tony.hsieh@example.com",
                            EmailConfirmed = true,
                            FirstName = "Tony",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Hsieh",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "TONY.HSIEH@EXAMPLE.COM",
                            NormalizedUserName = "TONY.HSIEH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED+RxT5/dvZ2D8qvfjTSIxlmUdI8boSD0vab3YsLyTNgpx9jYuieJ1Sotexe97e/iw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3aadd33f-9741-4646-95ef-240c5acb6024",
                            TwoFactorEnabled = false,
                            UserName = "tony.hsieh@example.com"
                        },
                        new
                        {
                            Id = "131",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "655963a4-9ee7-4fda-b1b1-10529535d621",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "richard.hyne@example.com",
                            EmailConfirmed = true,
                            FirstName = "Richard",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Hyne",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "RICHARD.HYNE@EXAMPLE.COM",
                            NormalizedUserName = "RICHARD.HYNE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHsRuAWLmgQpOHMnkOZ1yngbKjSNMlhQBntZWpc8ofX/kvg4z4+Ot/KnYH6GZHN6HQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81c28880-82b9-4261-83a1-7fcc2815af42",
                            TwoFactorEnabled = false,
                            UserName = "richard.hyne@example.com"
                        },
                        new
                        {
                            Id = "132",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2abfd9f8-db60-4d77-8e50-67af251d7f05",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "peter.thiel@example.com",
                            EmailConfirmed = true,
                            FirstName = "Peter",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Thiel",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "PETER.THIEL@EXAMPLE.COM",
                            NormalizedUserName = "PETER.THIEL@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI1uU7LSiLK/rHBiJfjwYfNwz6NRf8gZyyy8L4SEq3egpDdFUTGYOynNmCPJju+wiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e849dcb-38f5-4f7c-8f93-6aa45601268f",
                            TwoFactorEnabled = false,
                            UserName = "peter.thiel@example.com"
                        },
                        new
                        {
                            Id = "133",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dfcb426a-2b87-4618-a24d-a928281a00fd",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "steve.wozniak@example.com",
                            EmailConfirmed = true,
                            FirstName = "Steve",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Wozniak",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "STEVE.WOZNIAK@EXAMPLE.COM",
                            NormalizedUserName = "STEVE.WOZNIAK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECDODfyJht11YsHxLf0biIv2V6gDKRRSU6/2IlkCNVjQ8iqCpJr38888f//5r2V2cQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9336914c-e272-4e5a-9655-fe3624430607",
                            TwoFactorEnabled = false,
                            UserName = "steve.wozniak@example.com"
                        },
                        new
                        {
                            Id = "134",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "708f82da-2b37-46f5-84a5-9dd6b89f7765",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.carmack@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Carmack",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JOHN.CARMACK@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.CARMACK@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOtQ+OKY+9MVj1psGB0VzLrwjzudFvu66nL3u4O2PnePPqp5RTKnjaFzUGuq6miVKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1d61bfd-1d1b-4e75-ba14-8a1139ef8d79",
                            TwoFactorEnabled = false,
                            UserName = "john.carmack@example.com"
                        },
                        new
                        {
                            Id = "135",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8970669-0d86-408a-bb82-9258ae957a52",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mike.zyda@example.com",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Zyda",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "MIKE.ZYDA@EXAMPLE.COM",
                            NormalizedUserName = "MIKE.ZYDA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH3KJICJqXty1VsHusr1+0TXAHwhMFsGT0k8wdsQyWYGPfyvuZAu1CbyaL8+DMA+xg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35e42f4c-2fd9-4319-80d0-c33fa3a1b1ea",
                            TwoFactorEnabled = false,
                            UserName = "mike.zyda@example.com"
                        },
                        new
                        {
                            Id = "136",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6748959-7cc7-4eca-b01c-7dc338b4b127",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cheryl.sandberg@example.com",
                            EmailConfirmed = true,
                            FirstName = "Cheryl",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Sandberg",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "CHERYL.SANDBERG@EXAMPLE.COM",
                            NormalizedUserName = "CHERYL.SANDBERG@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEASyevBo5Zoq3Ndy1RDvq1gYS/0ZEUW6aLaeRzCB5EQ/IpBpKlvRZ4NHk/6dIyh53A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd9fd296-5235-4303-94c6-07d064e80a97",
                            TwoFactorEnabled = false,
                            UserName = "cheryl.sandberg@example.com"
                        },
                        new
                        {
                            Id = "137",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f4db61c-819c-42d9-965e-0c7eca41145f",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "karen.smith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Karen",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "KAREN.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "KAREN.SMITH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMbvQMZK9ZE244+V/ptRVg13eGLZXNoEw1WaDYV+UbrrVxj4sBTsWCONOI6EHmTsDA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc04a9ac-e57c-4666-badc-74c2c702c53d",
                            TwoFactorEnabled = false,
                            UserName = "karen.smith@example.com"
                        },
                        new
                        {
                            Id = "138",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76bf338b-a765-48c5-84f3-3dbc411c0335",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "david.lee@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Lee",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "DAVID.LEE@EXAMPLE.COM",
                            NormalizedUserName = "DAVID.LEE@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEItKyTntuligr5w61OsTHp4dh4rt2lsjqn4NPSQGI79NuhnzBWKF3qu3I2XzRzsSRg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f844398d-1430-48ae-9bf5-abeacfa58c43",
                            TwoFactorEnabled = false,
                            UserName = "david.lee@example.com"
                        },
                        new
                        {
                            Id = "139",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee361679-b7fd-485a-978a-a22abb5fe90f",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "james.taylor@example.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            IsActiveUser = true,
                            IsApproved = false,
                            IsBirthdayPublic = false,
                            IsGenderPublic = false,
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            MakeFacebookPublic = false,
                            NormalizedEmail = "JAMES.TAYLOR@EXAMPLE.COM",
                            NormalizedUserName = "JAMES.TAYLOR@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELySgZws3Q5/zn7Cz0aVQ7YsQr7i2kPVF97bS0Tr383GJxmT/gs+oBzNXJ6/ExYYxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f1fc5aa-4106-4b86-b14d-388c2cd722a5",
                            TwoFactorEnabled = false,
                            UserName = "james.taylor@example.com"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.AdminProfileModel", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("AdminRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("AppointedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("AdminProfiles");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAssignModel", b =>
                {
                    b.Property<int>("BillAssignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillAssignId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillAssignId");

                    b.HasIndex("UserId");

                    b.ToTable("BillAssign");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAssignmentModel", b =>
                {
                    b.Property<int>("BillAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillAssignmentId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BillId")
                        .HasColumnType("int");

                    b.Property<string>("BillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillAssignmentId");

                    b.HasIndex("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("BillAssignment");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillFeeModel", b =>
                {
                    b.Property<int>("BillFeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillFeeID"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BillAssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BillFeeID");

                    b.HasIndex("BillAssignmentId");

                    b.ToTable("BillFee");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillItemsModel", b =>
                {
                    b.Property<int>("BillItemsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillItemsID"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BillItemsModelBillItemsID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BillItemsID");

                    b.HasIndex("BillItemsModelBillItemsID");

                    b.ToTable("BillItems");

                    b.HasData(
                        new
                        {
                            BillItemsID = 1,
                            AddedOn = new DateTime(2025, 4, 21, 17, 27, 9, 588, DateTimeKind.Utc).AddTicks(1817),
                            Amount = 2000.00m,
                            Description = "Monthly HOA dues for maintenance, security, and amenities.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Homeowners Association (HOA) Fees",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 2,
                            AddedOn = new DateTime(2025, 4, 21, 17, 27, 9, 588, DateTimeKind.Utc).AddTicks(1824),
                            Amount = 350.00m,
                            Description = "Monthly water consumption charges.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Water Bill",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 4,
                            AddedOn = new DateTime(2025, 4, 21, 17, 27, 9, 588, DateTimeKind.Utc).AddTicks(1826),
                            Amount = 200.00m,
                            Description = "Monthly fee for waste disposal services.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Garbage Collection Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 5,
                            AddedOn = new DateTime(2025, 4, 21, 17, 27, 9, 588, DateTimeKind.Utc).AddTicks(1827),
                            Amount = 1000.00m,
                            Description = "Monthly fee for 24/7 subdivision security services.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Security Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 6,
                            AddedOn = new DateTime(2025, 4, 21, 17, 27, 9, 588, DateTimeKind.Utc).AddTicks(1828),
                            Amount = 300.00m,
                            Description = "Monthly fee for streetlight maintenance and electricity.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Street Lighting Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 7,
                            AddedOn = new DateTime(2025, 4, 21, 17, 27, 9, 588, DateTimeKind.Utc).AddTicks(1829),
                            Amount = 500.00m,
                            Description = "Monthly fee for clubhouse upkeep and utilities.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Clubhouse Maintenance Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 8,
                            AddedOn = new DateTime(2025, 4, 21, 17, 27, 9, 588, DateTimeKind.Utc).AddTicks(1831),
                            Amount = 1000.00m,
                            Description = "Monthly contribution toward shared property tax obligations.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Property Tax Contribution",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 9,
                            AddedOn = new DateTime(2025, 4, 21, 17, 27, 9, 588, DateTimeKind.Utc).AddTicks(1832),
                            Amount = 800.00m,
                            Description = "Monthly contribution to the long-term repair and reserve fund.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Sinking Fund Contribution",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 10,
                            AddedOn = new DateTime(2025, 4, 21, 17, 27, 9, 588, DateTimeKind.Utc).AddTicks(1833),
                            Amount = 250.00m,
                            Description = "Monthly fee for regular pest control services.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Pest Control Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BillItemsID = 11,
                            AddedOn = new DateTime(2025, 4, 21, 17, 27, 9, 588, DateTimeKind.Utc).AddTicks(1834),
                            Amount = 700.00m,
                            Description = "Monthly fee for road repair and upkeep.",
                            IsDeleted = false,
                            PaymentDuration = "Monthly",
                            PaymentName = "Road Maintenance Fee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.BillModel", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RemainingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillPaymentModel", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BillAssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("BillAssignmentModelBillAssignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("BillId")
                        .HasColumnType("int");

                    b.Property<int?>("BillModelBillId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BillAssignmentId");

                    b.HasIndex("BillAssignmentModelBillAssignmentId");

                    b.HasIndex("BillId");

                    b.HasIndex("BillModelBillId");

                    b.ToTable("BillPayment");
                });

            modelBuilder.Entity("Hometown_Application.Models.ChatMessageModel", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ApplicationUserId1");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Hometown_Application.Models.CommentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Hometown_Application.Models.ContactModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Hometown_Application.Models.DocumentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Hometown_Application.Models.EventModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isAllDay")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Hometown_Application.Models.FacilityModel", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilityId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(252)
                        .HasColumnType("nvarchar(252)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OtherType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RatePerHour")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("FacilityId");

                    b.ToTable("Facility");
                });

            modelBuilder.Entity("Hometown_Application.Models.FeedbackComplaintModel", b =>
                {
                    b.Property<int>("FeedbackComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackComplaintId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdminNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminReply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackComplaintId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedbackComplaints");
                });

            modelBuilder.Entity("Hometown_Application.Models.HomeownerProfileModel", b =>
                {
                    b.Property<int>("HomeownerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HomeownerId"));

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HouseModelHouseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPromotedToAdmin")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPromotedToStaff")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MoveInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MoveOutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RegisteredOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HomeownerId");

                    b.HasIndex("HouseModelHouseId");

                    b.HasIndex("UserId");

                    b.ToTable("HomeownerProfiles");

                    b.HasData(
                        new
                        {
                            HomeownerId = 1,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8253),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8252),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8252),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8253),
                            UserId = "111"
                        },
                        new
                        {
                            HomeownerId = 2,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8257),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8256),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8257),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8258),
                            UserId = "112"
                        },
                        new
                        {
                            HomeownerId = 3,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8259),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8258),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8259),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8260),
                            UserId = "113"
                        },
                        new
                        {
                            HomeownerId = 4,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8262),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8261),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8261),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8262),
                            UserId = "114"
                        },
                        new
                        {
                            HomeownerId = 5,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8264),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8263),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8263),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8264),
                            UserId = "115"
                        },
                        new
                        {
                            HomeownerId = 6,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8266),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8265),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8266),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8267),
                            UserId = "116"
                        },
                        new
                        {
                            HomeownerId = 7,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8268),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8267),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8268),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8269),
                            UserId = "117"
                        },
                        new
                        {
                            HomeownerId = 8,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8271),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8269),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8270),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8271),
                            UserId = "118"
                        },
                        new
                        {
                            HomeownerId = 9,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8273),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8272),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8272),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8273),
                            UserId = "119"
                        },
                        new
                        {
                            HomeownerId = 10,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8275),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8274),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8274),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8275),
                            UserId = "120"
                        },
                        new
                        {
                            HomeownerId = 11,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8277),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8276),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8276),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8277),
                            UserId = "121"
                        },
                        new
                        {
                            HomeownerId = 12,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8279),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8278),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8279),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8280),
                            UserId = "122"
                        },
                        new
                        {
                            HomeownerId = 13,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8281),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8280),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8281),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8282),
                            UserId = "123"
                        },
                        new
                        {
                            HomeownerId = 14,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8284),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8283),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8283),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8284),
                            UserId = "124"
                        },
                        new
                        {
                            HomeownerId = 15,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8286),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8285),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8285),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8286),
                            UserId = "125"
                        },
                        new
                        {
                            HomeownerId = 16,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8288),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8287),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8287),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8288),
                            UserId = "126"
                        },
                        new
                        {
                            HomeownerId = 17,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8290),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8289),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8290),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8291),
                            UserId = "127"
                        },
                        new
                        {
                            HomeownerId = 18,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8292),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8291),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8292),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8293),
                            UserId = "128"
                        },
                        new
                        {
                            HomeownerId = 19,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8294),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8293),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8294),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8295),
                            UserId = "129"
                        },
                        new
                        {
                            HomeownerId = 20,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8297),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8296),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8296),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8297),
                            UserId = "130"
                        },
                        new
                        {
                            HomeownerId = 21,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8299),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8298),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8298),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8299),
                            UserId = "131"
                        },
                        new
                        {
                            HomeownerId = 22,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8301),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8300),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8301),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8302),
                            UserId = "132"
                        },
                        new
                        {
                            HomeownerId = 23,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8303),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8302),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8303),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8304),
                            UserId = "133"
                        },
                        new
                        {
                            HomeownerId = 24,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8305),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8304),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8305),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8306),
                            UserId = "134"
                        },
                        new
                        {
                            HomeownerId = 25,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8308),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8307),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8307),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8308),
                            UserId = "135"
                        },
                        new
                        {
                            HomeownerId = 26,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8310),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8309),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8309),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8310),
                            UserId = "136"
                        },
                        new
                        {
                            HomeownerId = 27,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8312),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8311),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8311),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8312),
                            UserId = "137"
                        },
                        new
                        {
                            HomeownerId = 28,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8314),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8313),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8314),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8315),
                            UserId = "138"
                        },
                        new
                        {
                            HomeownerId = 29,
                            ApprovedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8317),
                            IsApproved = true,
                            IsBanned = false,
                            IsPromotedToAdmin = false,
                            IsPromotedToStaff = false,
                            MoveInDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8315),
                            MoveOutDate = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8316),
                            RegisteredOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8317),
                            UserId = "139"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.HouseModel", b =>
                {
                    b.Property<int?>("HouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("HouseId"));

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<int>("LotNumber")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HouseId");

                    b.HasIndex("UserId");

                    b.HasIndex("BlockName", "LotNumber", "StreetName")
                        .IsUnique();

                    b.ToTable("Houses");

                    b.HasData(
                        new
                        {
                            HouseId = 1,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Ashwood Lane",
                            UserId = "100"
                        },
                        new
                        {
                            HouseId = 2,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Ashwood Lane",
                            UserId = "102"
                        },
                        new
                        {
                            HouseId = 3,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Ashwood Lane",
                            UserId = "103"
                        },
                        new
                        {
                            HouseId = 4,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Ashwood Lane",
                            UserId = "104"
                        },
                        new
                        {
                            HouseId = 5,
                            BlockName = "AspenHeight",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Ashwood Lane",
                            UserId = "105"
                        },
                        new
                        {
                            HouseId = 6,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Birchwood Avenue",
                            UserId = "106"
                        },
                        new
                        {
                            HouseId = 7,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Birchwood Avenue",
                            UserId = "107"
                        },
                        new
                        {
                            HouseId = 8,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Birchwood Avenue",
                            UserId = "108"
                        },
                        new
                        {
                            HouseId = 9,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Birchwood Avenue",
                            UserId = "109"
                        },
                        new
                        {
                            HouseId = 10,
                            BlockName = "BirchHaven",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Birchwood Avenue",
                            UserId = "110"
                        },
                        new
                        {
                            HouseId = 11,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Cedar Hollow Road",
                            UserId = "111"
                        },
                        new
                        {
                            HouseId = 12,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Cedar Hollow Road",
                            UserId = "112"
                        },
                        new
                        {
                            HouseId = 13,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Cedar Hollow Road",
                            UserId = "113"
                        },
                        new
                        {
                            HouseId = 14,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Cedar Hollow Road",
                            UserId = "114"
                        },
                        new
                        {
                            HouseId = 15,
                            BlockName = "CedarCrest",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Cedar Hollow Road",
                            UserId = "115"
                        },
                        new
                        {
                            HouseId = 16,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Chestnut Boulevard",
                            UserId = "116"
                        },
                        new
                        {
                            HouseId = 17,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Chestnut Boulevard",
                            UserId = "117"
                        },
                        new
                        {
                            HouseId = 18,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Chestnut Boulevard",
                            UserId = "118"
                        },
                        new
                        {
                            HouseId = 19,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Chestnut Boulevard",
                            UserId = "119"
                        },
                        new
                        {
                            HouseId = 20,
                            BlockName = "ChestnutGrove",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Chestnut Boulevard",
                            UserId = "120"
                        },
                        new
                        {
                            HouseId = 21,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Crystal Drive",
                            UserId = "121"
                        },
                        new
                        {
                            HouseId = 22,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Crystal Drive",
                            UserId = "122"
                        },
                        new
                        {
                            HouseId = 23,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Crystal Drive",
                            UserId = "123"
                        },
                        new
                        {
                            HouseId = 24,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Crystal Drive",
                            UserId = "124"
                        },
                        new
                        {
                            HouseId = 25,
                            BlockName = "CrystalLake",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Crystal Drive",
                            UserId = "125"
                        },
                        new
                        {
                            HouseId = 26,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 1,
                            StreetName = "Elmwood Drive",
                            UserId = "126"
                        },
                        new
                        {
                            HouseId = 27,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 2,
                            StreetName = "Elmwood Drive",
                            UserId = "127"
                        },
                        new
                        {
                            HouseId = 28,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 3,
                            StreetName = "Elmwood Drive",
                            UserId = "128"
                        },
                        new
                        {
                            HouseId = 29,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 4,
                            StreetName = "Elmwood Drive",
                            UserId = "129"
                        },
                        new
                        {
                            HouseId = 30,
                            BlockName = "ElmwoodBlock",
                            IsOccupied = true,
                            LotNumber = 5,
                            StreetName = "Elmwood Drive",
                            UserId = "130"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.PollModel", b =>
                {
                    b.Property<int>("PollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PollId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PollId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Polls");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollQuestionModel", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("PollId");

                    b.ToTable("PollQuestions");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollResponseModel", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseId"));

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("RespondentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SelectedOptionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TextResponse")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("ResponseId");

                    b.HasIndex("PollId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("RespondentId");

                    b.HasIndex("SelectedOptionId");

                    b.ToTable("PollResponses");
                });

            modelBuilder.Entity("Hometown_Application.Models.PostModel", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Hometown_Application.Models.QuestionOptionModel", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("Hometown_Application.Models.ReactionModel", b =>
                {
                    b.Property<int>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReactionId"));

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReactionId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("Hometown_Application.Models.RequestTypeModel", b =>
                {
                    b.Property<int>("RequestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestTypeId"));

                    b.Property<int>("AssignedDepartment")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RequestTypeId");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new
                        {
                            RequestTypeId = 1,
                            AssignedDepartment = 0,
                            Description = "Request for pool maintenance.",
                            IsActive = true,
                            Name = "Pool Cleaning"
                        },
                        new
                        {
                            RequestTypeId = 2,
                            AssignedDepartment = 1,
                            Description = "Report or ask about lost items.",
                            IsActive = true,
                            Name = "Lost and Found Inquiry"
                        },
                        new
                        {
                            RequestTypeId = 3,
                            AssignedDepartment = 2,
                            Description = "Concerns about billing and payments.",
                            IsActive = true,
                            Name = "Billing Issue"
                        },
                        new
                        {
                            RequestTypeId = 4,
                            AssignedDepartment = 3,
                            Description = "Report issues with internet connectivity.",
                            IsActive = true,
                            Name = "Internet Issue"
                        },
                        new
                        {
                            RequestTypeId = 5,
                            AssignedDepartment = 4,
                            Description = "Request lawn maintenance services.",
                            IsActive = true,
                            Name = "Lawn Mowing"
                        },
                        new
                        {
                            RequestTypeId = 6,
                            AssignedDepartment = 5,
                            Description = "Report plumbing issues like leaks.",
                            IsActive = true,
                            Name = "Plumbing Repair"
                        },
                        new
                        {
                            RequestTypeId = 7,
                            AssignedDepartment = 6,
                            Description = "Report security concerns or suspicious activity.",
                            IsActive = true,
                            Name = "Suspicious Activity"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.ReservationModel", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReservationId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceRequestModel", b =>
                {
                    b.Property<int>("ServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceRequestId"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancelReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CancelledOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HomeownerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RejectedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectedReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Schedule")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Urgency")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ServiceRequestId");

                    b.HasIndex("HomeownerId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceStaffAssignmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnavailable")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("ServiceStaffAssignments");
                });

            modelBuilder.Entity("Hometown_Application.Models.StaffProfileModel", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("AccountCreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AccountCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmergencyContactNumber")
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("EmergencyContactRelation")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActiveEmployee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAlsoHomeOwner")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFired")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Salary")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("StaffProfiles");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(7913),
                            Address = "123 Main St",
                            Department = 6,
                            EmergencyContactName = "Jane Doe",
                            EmergencyContactNumber = "1234567890",
                            EmergencyContactRelation = "Spouse",
                            HireDate = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Security Officer",
                            Salary = 25000.00m,
                            UserId = "100"
                        },
                        new
                        {
                            StaffId = 2,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(7923),
                            Address = "456 Oak St",
                            Department = 5,
                            EmergencyContactName = "John Smith",
                            EmergencyContactNumber = "0987654321",
                            EmergencyContactRelation = "Brother",
                            HireDate = new DateTime(2021, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Maintenance Supervisor",
                            Salary = 30000.00m,
                            UserId = "102"
                        },
                        new
                        {
                            StaffId = 3,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(7931),
                            Address = "789 Pine St",
                            Department = 3,
                            EmergencyContactName = "Alice Brown",
                            EmergencyContactNumber = "5678901234",
                            EmergencyContactRelation = "Sister",
                            HireDate = new DateTime(2020, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "System Administrator",
                            Salary = 35000.00m,
                            UserId = "103"
                        },
                        new
                        {
                            StaffId = 4,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(7938),
                            Address = "987 Cedar St",
                            Department = 2,
                            EmergencyContactName = "Bob White",
                            EmergencyContactNumber = "2345678901",
                            EmergencyContactRelation = "Father",
                            HireDate = new DateTime(2019, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Finance Manager",
                            Salary = 40000.00m,
                            UserId = "104"
                        },
                        new
                        {
                            StaffId = 5,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(7945),
                            Address = "654 Birch St",
                            Department = 0,
                            EmergencyContactName = "Chris Green",
                            EmergencyContactNumber = "3456789012",
                            EmergencyContactRelation = "Friend",
                            HireDate = new DateTime(2021, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Amenities Coordinator",
                            Salary = 28000.00m,
                            UserId = "105"
                        },
                        new
                        {
                            StaffId = 6,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(7951),
                            Address = "321 Maple St",
                            Department = 1,
                            EmergencyContactName = "Diana Blue",
                            EmergencyContactNumber = "4567890123",
                            EmergencyContactRelation = "Cousin",
                            HireDate = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Customer Service Representative",
                            Salary = 26000.00m,
                            UserId = "106"
                        },
                        new
                        {
                            StaffId = 7,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(7957),
                            Address = "159 Elm St",
                            Department = 4,
                            EmergencyContactName = "Evan Red",
                            EmergencyContactNumber = "5678901234",
                            EmergencyContactRelation = "Uncle",
                            HireDate = new DateTime(2020, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Head Gardener",
                            Salary = 27000.00m,
                            UserId = "107"
                        },
                        new
                        {
                            StaffId = 8,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8030),
                            Address = "123 Main St",
                            Department = 6,
                            EmergencyContactName = "Jane Doe",
                            EmergencyContactNumber = "1234567890",
                            EmergencyContactRelation = "Spouse",
                            HireDate = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Security Officer",
                            Salary = 25000.00m,
                            UserId = "108"
                        },
                        new
                        {
                            StaffId = 9,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8035),
                            Address = "456 Oak St",
                            Department = 5,
                            EmergencyContactName = "John Smith",
                            EmergencyContactNumber = "0987654321",
                            EmergencyContactRelation = "Brother",
                            HireDate = new DateTime(2021, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "Maintenance Supervisor",
                            Salary = 30000.00m,
                            UserId = "109"
                        },
                        new
                        {
                            StaffId = 10,
                            AccountCreatedBy = "admin",
                            AccountCreatedOn = new DateTime(2025, 4, 21, 17, 27, 11, 887, DateTimeKind.Utc).AddTicks(8186),
                            Address = "789 Pine St",
                            Department = 3,
                            EmergencyContactName = "Alice Brown",
                            EmergencyContactNumber = "5678901234",
                            EmergencyContactRelation = "Sister",
                            HireDate = new DateTime(2020, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActiveEmployee = true,
                            IsAlsoHomeOwner = true,
                            IsDeleted = false,
                            IsFired = false,
                            Position = "System Administrator",
                            Salary = 35000.00m,
                            UserId = "110"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.StatusModel", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "Available"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "Unavailable"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Pending"
                        },
                        new
                        {
                            StatusId = 4,
                            StatusName = "In Progress"
                        },
                        new
                        {
                            StatusId = 5,
                            StatusName = "Resolved"
                        },
                        new
                        {
                            StatusId = 6,
                            StatusName = "Closed"
                        });
                });

            modelBuilder.Entity("Hometown_Application.Models.VehicleGatepassModel", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("AddedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GatePassExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GatePassIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleBrand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("VehicleImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("VehiclePlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleId");

                    b.HasIndex("UserId");

                    b.ToTable("VehicleGatepasses");
                });

            modelBuilder.Entity("Hometown_Application.Models.VisitorGatepassModel", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdminNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpectedArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GatePassExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GatePassIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsArrived")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExited")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfVisitors")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleColor")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehiclePlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehicleType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VisitorId");

                    b.HasIndex("UserId");

                    b.ToTable("VisitorGatepasses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "HomeOwner",
                            NormalizedName = "HOMEOWNER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "100",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "102",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "103",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "104",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "105",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "106",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "107",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "108",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "109",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "110",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "111",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "112",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "113",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "114",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "115",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "116",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "117",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "118",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "119",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "120",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "121",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "122",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "123",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "124",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "125",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "126",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "127",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "128",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "129",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "130",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "131",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "132",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "133",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "134",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "135",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "136",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "137",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "138",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "139",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Hometown_Application.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.HasOne("Hometown_Application.Models.AdminProfileModel", "AdminProfiles")
                        .WithMany()
                        .HasForeignKey("AdminProfilesAdminId");

                    b.HasOne("Hometown_Application.Models.BillAssignModel", null)
                        .WithMany("Users")
                        .HasForeignKey("BillAssignModelBillAssignId");

                    b.HasOne("Hometown_Application.Models.BillAssignmentModel", null)
                        .WithMany("Users")
                        .HasForeignKey("BillAssignmentModelBillAssignmentId");

                    b.HasOne("Hometown_Application.Models.HomeownerProfileModel", "HomeownerProfiles")
                        .WithMany()
                        .HasForeignKey("HomeownerProfilesHomeownerId");

                    b.HasOne("Hometown_Application.Models.StaffProfileModel", "StaffProfiles")
                        .WithMany()
                        .HasForeignKey("StaffProfilesStaffId");

                    b.Navigation("AdminProfiles");

                    b.Navigation("HomeownerProfiles");

                    b.Navigation("StaffProfiles");
                });

            modelBuilder.Entity("Hometown_Application.Models.AdminProfileModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAssignModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAssignmentModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillModel", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillFeeModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillAssignmentModel", "BillAssignment")
                        .WithMany()
                        .HasForeignKey("BillAssignmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BillAssignment");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillItemsModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillItemsModel", null)
                        .WithMany("BillItems")
                        .HasForeignKey("BillItemsModelBillItemsID");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillPaymentModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.BillAssignmentModel", "BillAssignment")
                        .WithMany()
                        .HasForeignKey("BillAssignmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Hometown_Application.Models.BillAssignmentModel", null)
                        .WithMany("Payments")
                        .HasForeignKey("BillAssignmentModelBillAssignmentId");

                    b.HasOne("Hometown_Application.Models.BillModel", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Hometown_Application.Models.BillModel", null)
                        .WithMany("Payments")
                        .HasForeignKey("BillModelBillId");

                    b.Navigation("Bill");

                    b.Navigation("BillAssignment");
                });

            modelBuilder.Entity("Hometown_Application.Models.ChatMessageModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany("SentMessages")
                        .HasForeignKey("ApplicationUserId1");

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Hometown_Application.Models.CommentModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PostModel", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Hometown_Application.Models.FeedbackComplaintModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.StatusModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Hometown_Application.Models.HomeownerProfileModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.HouseModel", null)
                        .WithMany("Homeowners")
                        .HasForeignKey("HouseModelHouseId");

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.HouseModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollQuestionModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PollModel", "Poll")
                        .WithMany("Questions")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollResponseModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PollModel", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Models.PollQuestionModel", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Respondent")
                        .WithMany()
                        .HasForeignKey("RespondentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hometown_Application.Models.QuestionOptionModel", "SelectedOption")
                        .WithMany("Responses")
                        .HasForeignKey("SelectedOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Poll");

                    b.Navigation("Question");

                    b.Navigation("Respondent");

                    b.Navigation("SelectedOption");
                });

            modelBuilder.Entity("Hometown_Application.Models.PostModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.QuestionOptionModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PollQuestionModel", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Hometown_Application.Models.ReactionModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.PostModel", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Hometown_Application.Models.ReservationModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.FacilityModel", "Facility")
                        .WithMany("Reservations")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceRequestModel", b =>
                {
                    b.HasOne("Hometown_Application.Models.HomeownerProfileModel", "Homeowner")
                        .WithMany()
                        .HasForeignKey("HomeownerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Hometown_Application.Models.RequestTypeModel", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Models.StatusModel", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Homeowner");

                    b.Navigation("RequestType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Hometown_Application.Models.ServiceStaffAssignmentModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Hometown_Application.Models.StaffProfileModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.VehicleGatepassModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Hometown_Application.Models.VisitorGatepassModel", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hometown_Application.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hometown_Application.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAssignModel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillAssignmentModel", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillItemsModel", b =>
                {
                    b.Navigation("BillItems");
                });

            modelBuilder.Entity("Hometown_Application.Models.BillModel", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Hometown_Application.Models.FacilityModel", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Hometown_Application.Models.HouseModel", b =>
                {
                    b.Navigation("Homeowners");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollModel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Hometown_Application.Models.PollQuestionModel", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Hometown_Application.Models.PostModel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Hometown_Application.Models.QuestionOptionModel", b =>
                {
                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
