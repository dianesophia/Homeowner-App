CONTACTCONTROLLER----

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Hometown_Application.Data;
using Hometown_Application.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Hometown_Application.Areas.Identity.Data;
using Microsoft.AspNetCore.Mvc.Rendering; // ✅ Required for SelectListItem

namespace Hometown_Application.Controllers
{
    [Authorize]
    public class ContactController : Controller
    {
        private readonly ApplicationDBContext _context;
        private readonly UserManager<ApplicationUser> _userManager;

        public ContactController(ApplicationDBContext context, UserManager<ApplicationUser> userManager)
        {
            _context = context;
            _userManager = userManager;
        }

        public async Task<IActionResult> Index()
        {
            var contacts = await _context.Contacts
                .Where(c => !c.IsDeleted)
                .OrderBy(c => c.ContactType)
                .ToListAsync();
            return View(contacts);
        }

        // ✅ GET: Load form for create/edit contact
        [HttpGet]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> CreateEditContact(int? id)
        {
            ViewBag.ContactTypes = GetContactTypes(); // Ensure dropdowns load

            if (id == null)
            {
                return View(new ContactModel()); // Create new contact
            }

            var contactInDb = await _context.Contacts.FindAsync(id);
            if (contactInDb == null)
            {
                return NotFound();
            }

            return View(contactInDb); // Edit existing contact
        }

        // ✅ POST: Save contact (create or update)
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> CreateEditContactForm(ContactModel model)
        {
            var user = await _userManager.GetUserAsync(User);
            var contactInDb = await _context.Contacts.SingleOrDefaultAsync(c => c.Id == model.Id);

            if (contactInDb == null)
            {
                model.AddedOn = DateTime.Now;
                model.AddedBy = user.Id;

                _context.Contacts.Add(model);
            }
            else
            {
                contactInDb.ContactType = model.ContactType;
                contactInDb.Description = model.Description;
                contactInDb.Number = model.Number;

                _context.Contacts.Update(contactInDb);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction("Index");
        }


        // ✅ Soft delete contact
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> DeleteContact(int id)
        {
            var contactInDb = await _context.Contacts.FindAsync(id);
            if (contactInDb == null)
            {
                TempData["Message"] = "Contact not found.";
                return RedirectToAction(nameof(Index));
            }

            contactInDb.IsDeleted = true; // ✅ Soft delete
            await _context.SaveChangesAsync();

            TempData["Message"] = "Contact deleted successfully!";
            return RedirectToAction(nameof(Index));
        }

        // ✅ Populate contact types dropdown
        private List<SelectListItem> GetContactTypes()
        {
            return new List<SelectListItem>
            {
                new SelectListItem { Value = "Resident", Text = "Resident" },
                new SelectListItem { Value = "Security", Text = "Security" },
                new SelectListItem { Value = "Admin", Text = "Admin" },
                new SelectListItem { Value = "Emergency - General", Text = "Emergency - General" },
                new SelectListItem { Value = "Emergency - Fire Department", Text = "Emergency - Fire Department" },
                new SelectListItem { Value = "Emergency - Medical", Text = "Emergency - Medical" },
                new SelectListItem { Value = "Emergency - Disaster Response", Text = "Emergency - Disaster Response" },
                new SelectListItem { Value = "Maintenance - General", Text = "Maintenance - General" },
                new SelectListItem { Value = "Maintenance - Plumbing", Text = "Maintenance - Plumbing" },
                new SelectListItem { Value = "Maintenance - Electrical", Text = "Maintenance - Electrical" },
                new SelectListItem { Value = "Maintenance - Landscaping", Text = "Maintenance - Landscaping" },
                new SelectListItem { Value = "Maintenance - Pest Control", Text = "Maintenance - Pest Control" },
                new SelectListItem { Value = "Religious - Priest", Text = "Religious - Priest" },
                new SelectListItem { Value = "Religious - Pastor", Text = "Religious - Pastor" },
                new SelectListItem { Value = "Religious - Other", Text = "Religious - Other" }
            };
        }
    }
}


--------------------------------

CONTACT INDEX

<!--CONTACT-->

@model IEnumerable<Hometown_Application.Models.ContactModel>
@using Hometown_Application.Areas.Identity.Data
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contact List</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #6F754E;
            --primary-light: #8a916a;
            --secondary-color: #A08D67;
            --background-color: #E6DDC4;
            --text-color: #2F3A31;
            --card-bg: #FFFFFF;
            --danger-color: #dc3545;
            --success-color: #198754;
            --border-radius: 16px;
            --shadow: 0px 6px 12px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        .navbar {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: var(--primary-color);
            box-shadow: var(--shadow);
            z-index: 1000;
            min-height: 100px;
            padding: 15px 20px;
            font-family: 'Marcellus', serif;
        }

        .navbar-brand {
            font-size: 1.2rem;
            font-weight: normal;
            color: white;
        }

            .navbar-brand:hover {
                transform: scale(1.05);
            }

        .navbar-nav .nav-link {
            color: white;
            font-weight: 500;
            margin: 0 10px;
            padding: 8px 16px;
            border-radius: var(--border-radius);
            transition: var(--transition);
        }

            .navbar-nav .nav-link:hover {
                background: var(--primary-light);
                color: white;
                transform: translateY(-2px);
            }

        .user-info {
            background: var(--primary-light);
            padding: 8px 16px;
            border-radius: var(--border-radius);
            display: flex;
            align-items: center;
            gap: 8px;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

            .user-info i {
                font-size: 1.2rem;
            }

        .content {
            flex: 1;
        }

        /* Prevent content from being hidden under the fixed header */
        body {
            padding-top: 120px;
            background-color: var(--background-color);
            color: var(--text-color);
            font-family: 'Marcellus', serif;
            min-height: 100vh;
            width: 100%;
            margin: 0;
            padding-bottom: 30px;
        }

        .page-container {
            display: flex;
            flex-direction: column;
            justify-content: center; 
            align-items: center; 
        }


        .body-container {
            width: 90%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            margin-bottom: 50px;
        }

        .header-container {
            width: 87%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            text-align: center;
            flex-grow: 1;
            min-width: 600px;
            gap: 15px;

        }

        .page-title {
            color: var(--text-color);
            font-size: 2rem;
            font-weight: 700;
            margin: 0;
        }

        .btn-add-contact {
            background-color: var(--primary-color);
            border: none;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: var(--border-radius);
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 500;
            text-decoration: none;
        }

            .btn-add-contact:hover {
                background-color: var(--primary-light);
                transform: translateY(-2px);
                color: white;
            }

        .cards-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }

        .contact-card {
            background-color: var(--card-bg);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            overflow: hidden;
            transition: var(--transition);
            position: relative;
        }

            .contact-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 12px 20px rgba(0, 0, 0, 0.15);
            }

        .card-header {
            background-color: var(--primary-color);
            color: white;
            padding: 15px 20px;
            font-weight: 500;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .contact-type-badge {
            background-color: rgba(255, 255, 255, 0.2);
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
        }

        .card-body {
            padding: 20px;
        }

        .contact-info {
            margin-bottom: 15px;
        }

        .info-label {
            color: var(--secondary-color);
            font-size: 0.9rem;
            margin-bottom: 5px;
        }

        .info-value {
            font-size: 1.1rem;
            word-break: break-word;
        }

        .card-footer {
            padding: 15px 20px;
            background-color: rgba(0, 0, 0, 0.02);
            border-top: 1px solid rgba(0, 0, 0, 0.05);
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        .btn-edit {
            background-color: #ffc107;
            color: #212529;
            border: none;
            padding: 8px 15px;
            border-radius: var(--border-radius);
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }

            .btn-edit:hover {
                background-color: #e0a800;
                transform: translateY(-2px);
            }

        .btn-delete {
            background-color: var(--danger-color);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: var(--border-radius);
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

            .btn-delete:hover {
                background-color: #c82333;
                transform: translateY(-2px);
            }

        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 60px 20px;
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            text-align: center;
            grid-column: 1 / -1;
        }

            .empty-state i {
                color: var(--secondary-color);
                opacity: 0.7;
                font-size: 4rem;
                margin-bottom: 20px;
            }

            .empty-state p {
                color: var(--text-color);
                font-size: 1.2rem;
                margin: 0;
            }

        .contact-icon {
            font-size: 2rem;
            color: var(--primary-light);
            text-align: center;
            margin-bottom: 10px;
        }


    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">
                <i class="fas fa-home me-2"></i>
                Golden Haven
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    @if (SignInManager.IsSignedIn(User))
                    {
                        var user = await UserManager.GetUserAsync(User);
                        if (user != null)
                        {
                            <div class="nav-item">
                                <a class="nav-link" asp-controller="Dashboard" asp-action="Index">
                                    <i class="fas fa-user"></i>
                                    <span>@user.FirstName @user.LastName</span>
                                </a>
                            </div>
                        }
                    }
                    @if (SignInManager.IsSignedIn(User))
                    {
                        if (User.IsInRole("Admin"))
                        {
                            <li class="nav-item"><a class="nav-link" asp-controller="UserManagement" asp-action="Index"><i class="fas fa-users-cog me-2"></i>User Management</a></li>
                        }
                    }
                    <li class="nav-item">
                        <div class="user-info @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Contact" ? "active-tab" : "")">
                            <i class="fas fa-address-book me-2"></i>
                            <span>Contacts</span>
                        </div>
                    </li>
                    <li class="nav-item"><a class="nav-link" asp-controller="Event" asp-action="Index"><i class="fas fa-calendar me-2"></i>Calendar</a></li>
                    <li class="nav-item"><a class="nav-link" asp-controller="Document" asp-action="Index"><i class="fas fa-upload me-2"></i>Upload</a></li>
                    <li class="nav-item"><a class="nav-link" asp-controller="Document" asp-action="FileDownload"><i class="fas fa-download me-2"></i>Download</a></li>
                    <li class="nav-item"><a class="nav-link" asp-controller="FeedbackComplaint" asp-action="Index"><i class="fas fa-exclamation-circle me-2"></i>Issues</a></li>
                    <li class="nav-item"><a class="nav-link" asp-controller="Home" asp-action="Index"><i class="fas fa-sign-out-alt me-2"></i>Logout</a></li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="page-container">
        <div class="header-container">
            <h2 class="page-title">Contact List</h2>
            @if (User.IsInRole("Admin"))
            {
                <a asp-action="CreateEditContact" class="btn-add-contact">
                    <i class="fas fa-plus-circle"></i>
                    <span>Add Contact</span>
                </a>
            }
        </div>
        <div class="body-container">
        <div class="cards-container">
            @if (Model != null && Model.Any())
            {
                @foreach (var contact in Model)
                {
                    <div class="contact-card">
                        <div class="card-header">
                            <span>Contact Details</span>
                            <span class="contact-type-badge">@contact.ContactType</span>
                        </div>
                        <div class="card-body">
                            <div class="contact-icon">
                                @if (contact.ContactType.ToLower().Contains("emergency"))
                                {
                                    <i class="fas fa-ambulance"></i>
                                }
                                else if (contact.ContactType.ToLower().Contains("police") || contact.ContactType.ToLower().Contains("security"))
                                {
                                    <i class="fas fa-shield-alt"></i>
                                }
                                else if (contact.ContactType.ToLower().Contains("fire"))
                                {
                                    <i class="fas fa-fire-extinguisher"></i>
                                }
                                else if (contact.ContactType.ToLower().Contains("hospital") || contact.ContactType.ToLower().Contains("medical"))
                                {
                                    <i class="fas fa-hospital"></i>
                                }
                                else if (contact.ContactType.ToLower().Contains("utility") || contact.ContactType.ToLower().Contains("electric") || contact.ContactType.ToLower().Contains("water"))
                                {
                                    <i class="fas fa-bolt"></i>
                                }
                                else if (contact.ContactType.ToLower().Contains("school"))
                                {
                                    <i class="fas fa-school"></i>
                                }
                                else if (contact.ContactType.ToLower().Contains("government") || contact.ContactType.ToLower().Contains("city"))
                                {
                                    <i class="fas fa-landmark"></i>
                                }
                                else
                                {
                                    <i class="fas fa-phone-alt"></i>
                                }
                            </div>
                            <div class="contact-info">
                                <div class="info-label">Description</div>
                                <div class="info-value">@contact.Description</div>
                            </div>
                            <div class="contact-info">
                                <div class="info-label">Number</div>
                                <div class="info-value">@contact.Number</div>
                            </div>
                        </div>
                        @if (User.IsInRole("Admin"))
                        {
                            <div class="card-footer">
                                <a asp-action="CreateEditContact" asp-route-id="@contact.Id" class="btn-edit">
                                    <i class="fas fa-edit"></i>
                                    <span>Edit</span>
                                </a>
                                <form asp-action="DeleteContact" asp-route-id="@contact.Id" method="post" style="display:inline;">
                                    <button type="submit" class="btn-delete" onclick="return confirm('Are you sure you want to delete this contact?')">
                                        <i class="fas fa-trash-alt"></i>
                                        <span>Delete</span>
                                    </button>
                                </form>
                            </div>
                        }
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <i class="fas fa-address-book"></i>
                    <p>No contacts found. Add your first contact to get started!</p>
                </div>
            }
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>



--------------------------------
EDIT CONTACT


@model Hometown_Application.Models.ContactModel
@using Hometown_Application.Areas.Identity.Data
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@(Model.Id == 0 ? "Add Contact" : "Edit Contact")</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Marcellus&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #6F754E;
            --primary-light: #8a916a;
            --secondary-color: #A08D67;
            --background-color: #E6DDC4;
            --text-color: #2F3A31;
            --card-bg: #FFFFFF;
            --danger-color: #dc3545;
            --success-color: #198754;
            --border-radius: 16px;
            --shadow: 0px 6px 12px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        .navbar {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: var(--primary-color);
            box-shadow: var(--shadow);
            z-index: 1000;
            min-height: 100px;
            padding: 15px 20px;
            font-family: 'Marcellus', serif;
        }

        .navbar-brand {
            font-size: 1.2rem;
            font-weight: normal;
            color: white;
        }

            .navbar-brand:hover {
                transform: scale(1.05);
            }

        .navbar-nav .nav-link {
            color: white;
            font-weight: 500;
            margin: 0 10px;
            padding: 8px 16px;
            border-radius: var(--border-radius);
            transition: var(--transition);
        }

            .navbar-nav .nav-link:hover {
                background: var(--primary-light);
                color: white;
                transform: translateY(-2px);
            }

        .user-info {
            background: var(--primary-light);
            padding: 8px 16px;
            border-radius: var(--border-radius);
            display: flex;
            align-items: center;
            gap: 8px;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

            .user-info i {
                font-size: 1.2rem;
            }

        .content {
            flex: 1;
        }

        /* Prevent content from being hidden under the fixed header */
        body {
            padding-top: 150px;
            background-color: var(--background-color);
            color: var(--text-color);
            font-family: 'Marcellus', serif;
            min-height: 100vh;
            width: 100%;
            margin: 0;
            margin-top: 50px
            padding: 0;
        }

        .page-container {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            margin-top: 3rem;
        }

        .body-container {
            width: 90%;
            max-width: 800px;
            background-color: var(--card-bg);
            padding: 20px;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
        }

        .header-container {
            text-align: center;
            padding: 15px;
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            margin-bottom: 20px;
        }

        .page-title {
            font-size: 2rem;
            font-weight: 700;
            margin: 0;
            color: var(--text-color);
        }

        .form-card {
            background-color: var(--card-bg);
            border-radius: var(--border-radius);
            padding: 20px;
            box-shadow: var(--shadow);
        }

        .custom-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: var(--border-radius);
            transition: var(--transition);
            padding: 8px 20px;
        }

            .custom-btn:hover {
                background-color: var(--primary-light);
                opacity: 0.9;
            }

        .btn-secondary {
            background-color: var(--secondary-color);
        }

        .form-control {
            border-radius: 8px;
            padding: 10px;
        }

        .form-label {
            font-weight: 500;
            color: var(--text-color);
        }
    </style>
</head>
<body>
    
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">
                <i class="fas fa-home me-2"></i>
                Golden Haven
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    @if (SignInManager.IsSignedIn(User))
                    {
                        var user = await UserManager.GetUserAsync(User);
                        if (user != null)
                        {
                            <div class="nav-item">
                                <a class="nav-link" asp-controller="Dashboard" asp-action="Index">
                                    <i class="fas fa-user"></i>
                                    <span>@user.FirstName @user.LastName</span>
                                </a>
                            </div>
                        }
                    }
                    @if (SignInManager.IsSignedIn(User))
                    {
                        if (User.IsInRole("Admin"))
                        {
                            <li class="nav-item"><a class="nav-link" asp-controller="UserManagement" asp-action="Index"><i class="fas fa-users-cog me-2"></i>User Management</a></li>
                        }
                    }
                    <li class="nav-item">
                        <div class="user-info @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Contact" ? "active-tab" : "")">
                            <i class="fas fa-address-book me-2"></i>
                            <span>Contacts</span>
                        </div>
                    </li>
                    <li class="nav-item"><a class="nav-link" asp-controller="Event" asp-action="Index"><i class="fas fa-calendar me-2"></i>Calendar</a></li>
                    <li class="nav-item"><a class="nav-link" asp-controller="Document" asp-action="Index"><i class="fas fa-upload me-2"></i>Upload</a></li>
                    <li class="nav-item"><a class="nav-link" asp-controller="Document" asp-action="FileDownload"><i class="fas fa-download me-2"></i>Download</a></li>
                    <li class="nav-item"><a class="nav-link" asp-controller="FeedbackComplaint" asp-action="Index"><i class="fas fa-exclamation-circle me-2"></i>Issues</a></li>
                    <li class="nav-item"><a class="nav-link" asp-controller="Home" asp-action="Index"><i class="fas fa-sign-out-alt me-2"></i>Logout</a></li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="page-container">
        <div class="body-container">
            <div class="header-container">
                <h3 class="page-title">@(Model.Id == 0 ? "Add Contact" : "Edit Contact")</h3>
            </div>

            <div class="card form-card">
                <div class="card-body">
                    <form asp-action="CreateEditContactForm" method="post">
                        @Html.AntiForgeryToken()
                        <input type="hidden" asp-for="Id" />

                        <div class="mb-3">
                            <label asp-for="ContactType" class="form-label">Contact Type</label>
                            <select asp-for="ContactType" asp-items="ViewBag.ContactTypes" class="form-control">
                                <option value="">Select Contact Type</option>
                            </select>
                            <span asp-validation-for="ContactType" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Description" class="form-label">Description</label>
                            <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Number" class="form-label">Phone Number</label>
                            <input asp-for="Number" class="form-control" />
                            <span asp-validation-for="Number" class="text-danger"></span>
                        </div>

                        <div class="d-flex justify-content-between mt-4">
                            <button type="submit" class="btn custom-btn">Save</button>
                            <a asp-action="Index" class="btn custom-btn btn-secondary">Cancel</a>
                        </div>

                        @if (!ViewData.ModelState.IsValid)
                        {
                            <div class="alert alert-danger mt-3">
                                <ul>
                                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                                    {
                                        <li>@error.ErrorMessage</li>
                                    }
                                </ul>
                            </div>
                        }
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
</body>
</html>

-----------------------
EVENT


@model Hometown_Application.Models.ContactModel
@using Hometown_Application.Areas.Identity.Data
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = "Event Calendar";
}
<link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/toastr@2.1.4/build/toastr.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/toastr@2.1.4/build/toastr.min.js"></script>

<style>
    :root {
        --primary-color: #6F754E;
        --primary-light: #8a916a;
        --primary-dark: #5a604e;
        --secondary-color: #A08D67;
        --background-color: #E6DDC4;
        --text-color: #2F3A31;
        --white: #FFFFFF;
        --error: #dc3545;
        --success: #28a745;
        --warning: #e74c3c;
        --border-radius: 16px;
        --shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
        --transition: all 0.3s ease-in-out;
    }

    .navbar {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        background-color: var(--primary-color);
        box-shadow: var(--shadow);
        z-index: 1000;
        min-height: 100px;
        padding: 15px 20px;
        font-family: 'Marcellus', serif;
    }

    .navbar-brand {
        font-size: 1.2rem;
        font-weight: normal;
        color: white;
    }

        .navbar-brand:hover {
            transform: scale(1.05);
        }

    .navbar-nav .nav-link {
        color: white;
        font-weight: 500;
        margin: 0 10px;
        padding: 8px 16px;
        border-radius: var(--border-radius);
        transition: var(--transition);
    }

        .navbar-nav .nav-link:hover {
            background: var(--primary-light);
            color: white;
            transform: translateY(-2px);
        }

    .user-info {
        background: var(--primary-light);
        padding: 8px 16px;
        border-radius: var(--border-radius);
        display: flex;
        align-items: center;
        gap: 8px;
        backdrop-filter: blur(5px);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

        .user-info i {
            font-size: 1.2rem;
        }

    .content {
        flex: 1;
    }

    /* Prevent content from being hidden under the fixed header */
    body {
        padding-top: 50px;
        background-color: var(--background-color);
        color: var(--text-color);
        font-family: 'Marcellus', serif;
        min-height: 100vh;
        width: 100%;
        margin: 0;
        padding-bottom: 30px;
    }

    .page-header {
        text-align: center;
        margin-bottom: 30px;
        position: relative;
        padding-bottom: 15px;
        margin-top: 100px;
    }

        .page-header h2 {
            color: var(--primary-color);
            font-weight: 600;
            font-size: 2.2rem;
            margin-bottom: 5px;
        }

        .page-header p {
            color: var(--secondary-color);
            font-size: 1.1rem;
        }

        .page-header::after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

    .calendar-container {
        max-width: 1000px;
        margin: 0 auto;
        background: var(--white);
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
        padding: 25px;
        position: relative;
        margin-bottom: 150px;
    }

    #calendar {
        width: 100%;
    }

    /* FullCalendar Customization */
    .fc {
        --fc-border-color: #e2e8f0;
        --fc-button-bg-color: var(--primary-color);
        --fc-button-border-color: var(--primary-color);
        --fc-button-hover-bg-color: var(--primary-dark);
        --fc-button-hover-border-color: var(--primary-dark);
        --fc-button-active-bg-color: var(--primary-dark);
        --fc-button-active-border-color: var(--primary-dark);
    }

        .fc .fc-button-primary:not(:disabled):active,
        .fc .fc-button-primary:not(:disabled).fc-button-active {
            background-color: var(--primary-dark);
            border-color: var(--primary-dark);
        }

        .fc .fc-toolbar-title {
            font-size: 1.5rem !important;
            font-weight: 600;
            color: var(--primary-color);
        }

        .fc .fc-daygrid-day-top {
            display: flex;
            justify-content: center;
            padding-top: 5px;
        }

        .fc .fc-daygrid-day-number {
            font-size: 0.9rem;
            font-weight: 500;
            color: var(--text-color);
        }

        .fc .fc-daygrid-day-frame {
            min-height: 110px !important;
            display: flex;
            flex-direction: column;
        }

        .fc .fc-daygrid-day {
            transition: var(--transition);
        }

            .fc .fc-daygrid-day:hover {
                background: rgba(111, 117, 78, 0.1);
                cursor: pointer;
            }

        .fc .fc-day-today {
            background-color: rgba(111, 117, 78, 0.15) !important;
        }

        .fc .fc-col-header-cell {
            background-color: var(--primary-color);
            padding: 10px 0;
        }

        .fc .fc-col-header-cell-cushion {
            color: var(--white);
            font-weight: 500;
            text-decoration: none;
        }

        .fc .fc-event {
            background: var(--primary-color) !important;
            border-color: var(--primary-color) !important;
            color: var(--white) !important;
            border-radius: 6px;
            font-size: 0.85rem;
            padding: 3px 5px;
            margin-bottom: 2px;
            transition: var(--transition);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

            .fc .fc-event:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
            }

    .holiday-event {
        background-color: var(--warning) !important;
        border-color: var(--warning) !important;
        color: var(--white) !important;
    }

    /* Modal Styling */
    .modal-content {
        border-radius: var(--border-radius);
        border: none;
        box-shadow: var(--shadow);
    }

    .modal-header {
        background: var(--primary-color);
        color: var(--white);
        border-radius: calc(var(--border-radius) - 1px) calc(var(--border-radius) - 1px) 0 0;
        border-bottom: none;
        padding: 15px 20px;
    }

        .modal-header .close {
            color: var(--white);
            opacity: 0.8;
            text-shadow: none;
            transition: var(--transition);
        }

            .modal-header .close:hover {
                opacity: 1;
            }

    .modal-body {
        padding: 20px;
    }

    .modal-footer {
        border-top: 1px solid #edf2f7;
        padding: 15px 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            font-weight: 500;
            margin-bottom: 5px;
            color: var(--text-color);
            display: block;
        }

    .form-control {
        border-radius: 8px;
        padding: 10px 12px;
        border: 1px solid #ddd;
        transition: var(--transition);
        width: 100%;
    }

        .form-control:focus {
            border-color: var(--primary-light);
            box-shadow: 0 0 0 3px rgba(111, 117, 78, 0.2);
            outline: none;
        }

    .btn {
        border-radius: 8px;
        padding: 8px 16px;
        font-weight: 500;
        transition: var(--transition);
        cursor: pointer;
    }

    .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        color: white;
    }

        .btn-primary:hover {
            background-color: var(--primary-dark);
            border-color: var(--primary-dark);
        }

    .btn-success {
        background-color: var(--success);
        border-color: var(--success);
        color: white;
    }

    .btn-danger {
        background-color: var(--error);
        border-color: var(--error);
        color: white;
    }

    .btn-secondary {
        background-color: var(--secondary-color);
        border-color: var(--secondary-color);
        color: white;
    }

    .floating-add-btn {
        position: fixed;
        bottom: 30px;
        right: 30px;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: var(--primary-color);
        color: var(--white);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        cursor: pointer;
        transition: var(--transition);
        z-index: 1000;
    }

        .floating-add-btn:hover {
            background: var(--primary-dark);
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.25);
        }

    /* Responsive calendar toolbar */
    .fc .fc-toolbar-title {
        font-size: 1.2rem !important;
        margin: 10px 0;
        order: -1;
    }

    .fc-header-toolbar .fc-toolbar-chunk {
        display: flex;
        justify-content: center;
        margin-bottom: 10px;
        width: 100%;
    }

    .calendar-
    {
        padding: 15px;
    }

    .page-header h2 {
        font-size: 1.8rem;
    }

    /* Toast notification styling */
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
    }

    .toast {
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        margin-bottom: 10px;
        overflow: hidden;
        width: 300px;
        opacity: 0;
        transform: translateY(-20px);
        transition: all 0.3s ease-in-out;
    }

        .toast.show {
            opacity: 1;
            transform: translateY(0);
        }

    .toast-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 10px 15px;
        border-bottom: 1px solid #edf2f7;
    }

    .toast-success .toast-header {
        background-color: var(--success);
        color: white;
    }

    .toast-error .toast-header {
        background-color: var(--error);
        color: white;
    }

    .toast-body {
        padding: 10px 15px;
    }

    /* Event colors */
    .event-personal {
        background-color: #4CAF50 !important;
        border-color: #4CAF50 !important;
    }

    .event-work {
        background-color: #2196F3 !important;
        border-color: #2196F3 !important;
    }

    .event-other {
        background-color: #9C27B0 !important;
        border-color: #9C27B0 !important;
    }

    /* Color picker & category selector */
    .category-selector {
        display: flex;
        gap: 10px;
        margin-bottom: 15px;
    }

    .category-option {
        display: flex;
        align-items: center;
        gap: 5px;
        cursor: pointer;
    }

    .category-color {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        display: inline-block;
    }
</style>
<nav class="navbar navbar-expand-lg">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">
            <i class="fas fa-home me-2"></i>
            Golden Haven
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                @if (SignInManager.IsSignedIn(User))
                {
                    var user = await UserManager.GetUserAsync(User);
                    if (user != null)
                    {
                        <div class="nav-item">
                            <a class="nav-link" asp-controller="Dashboard" asp-action="Index">
                                <i class="fas fa-user"></i>
                                <span>@user.FirstName @user.LastName</span>
                            </a>
                        </div>
                    }
                }
                @if (SignInManager.IsSignedIn(User))
                {
                    if (User.IsInRole("Admin"))
                    {
                        <li class="nav-item"><a class="nav-link" asp-controller="UserManagement" asp-action="Index"><i class="fas fa-users-cog me-2"></i>User Management</a></li>
                    }
                }
                <li class="nav-item"><a class="nav-link" asp-controller="Contact" asp-action="Index"><i class="fas fa-calendar me-2"></i>Contact</a></li>  
                <li class="nav-item">
                    <div class="user-info @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Event" ? "active-tab" : "")">
                        <i class="fas fa-address-book me-2"></i>
                        <span>Calendar</span>
                    </div>
                </li>
                <li class="nav-item"><a class="nav-link" asp-controller="Document" asp-action="Index"><i class="fas fa-upload me-2"></i>Upload</a></li>
                <li class="nav-item"><a class="nav-link" asp-controller="Document" asp-action="FileDownload"><i class="fas fa-download me-2"></i>Download</a></li>
                <li class="nav-item"><a class="nav-link" asp-controller="FeedbackComplaint" asp-action="Index"><i class="fas fa-exclamation-circle me-2"></i>Issues</a></li>
                <li class="nav-item"><a class="nav-link" asp-controller="Home" asp-action="Index"><i class="fas fa-sign-out-alt me-2"></i>Logout</a></li>
            </ul>
        </div>
    </div>
</nav>
<!-- Toast Container -->
<div class="toast-container"></div>

<!-- Page Header -->
<div class="page-header">
    <h2>Event Calendar</h2>
    <p>Schedule and manage all your important events</p>
</div>

<!-- Calendar Container -->
<div class="calendar-container">
    <div id="calendar"></div>
</div>

<!-- Floating Add Button -->
<div class="floating-add-btn" id="addEventBtn">
    <i class="fas fa-plus"></i>
</div>

<!-- Event Modal -->
<div class="modal fade" id="eventModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Event</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="eventForm">
                    <input type="hidden" id="eventId">
                    <div class="form-group">
                        <label for="eventTitle"><i class="fas fa-heading me-2"></i>Title:</label>
                        <input type="text" id="eventTitle" class="form-control" required placeholder="Enter event title">
                    </div>
                    <div class="form-group">
                        <label for="eventCategory"><i class="fas fa-tag me-2"></i>Category:</label>
                        <div class="category-selector">
                            <label class="category-option">
                                <input type="radio" name="eventCategory" value="personal" checked>
                                <span class="ms-1">Personal</span>
                            </label>
                            <label class="category-option">
                                <input type="radio" name="eventCategory" value="work">
                                <span class="ms-1">Work</span>
                            </label>
                            <label class="category-option">
                                <input type="radio" name="eventCategory" value="other">
                                <span class="ms-1">Other</span>
                            </label>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="eventDescription"><i class="fas fa-align-left me-2"></i>Description:</label>
                        <textarea id="eventDescription" class="form-control" rows="3" placeholder="Enter event description (optional)"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="eventStart"><i class="fas fa-calendar-alt me-2"></i>Start Date & Time:</label>
                        <input type="datetime-local" id="eventStart" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label for="eventEnd"><i class="fas fa-calendar-check me-2"></i>End Date & Time:</label>
                        <input type="datetime-local" id="eventEnd" class="form-control">
                    </div>
                    <div class="form-group">
                        <label for="eventLocation"><i class="fas fa-map-marker-alt me-2"></i>Location:</label>
                        <input type="text" id="eventLocation" class="form-control" placeholder="Enter location (optional)">
                    </div>
                    <div class="form-group">
                        <label for="allDayEvent" class="d-flex align-items-center">
                            <input type="checkbox" id="allDayEvent" class="me-2">
                            <span>All day event</span>
                        </label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="saveEvent">Save Event</button>
                <button type="button" class="btn btn-success" id="updateEvent" style="display: none;">Update Event</button>
                <button type="button" class="btn btn-danger" id="deleteEvent" style="display: none;">Delete Event</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        var calendarEl = document.getElementById('calendar');
        var currentEventId = null;

        // Initialize toastr
        toastr.options = {
            closeButton: true,
            progressBar: true,
            positionClass: "toast-top-right",
            timeOut: 3000
        };

        var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            locale: 'en',
            selectable: true,
            editable: true, // Enable drag and drop
            fixedWeekCount: false,
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,listMonth'
            },
            events: "/Event/GetEvents", // Your API endpoint

            // Event rendering with improved design
            eventContent: function (arg) {
                let timeText = "";
                if (arg.timeText) {
                    let parts = arg.timeText.split(":");
                    let hour = parseInt(parts[0]);
                    let minute = parts.length > 1 ? parts[1] : "00";
                    let ampm = hour >= 12 ? "PM" : "AM";
                    hour = hour % 12 || 12;
                    timeText = `<span style="font-weight: 500; color: #fff; font-size: 0.8em;">${hour}:${minute} ${ampm}</span>`;
                }

                let titleText = `<div style="font-weight: 500; font-size: 0.85em; color: #fff; margin-top: 2px;">${arg.event.title}</div>`;
                let locationText = arg.event.extendedProps?.location
                    ? `<div style="font-size: 0.75em; color: rgba(255,255,255,0.8); font-style: italic;"><i class="fas fa-map-marker-alt"></i> ${arg.event.extendedProps.location}</div>`
                    : "";

                return {
                    html: `<div style="display: flex; flex-direction: column; padding: 2px 4px;">${timeText}${titleText}${locationText}</div>`
                };
            },

            // Date click event - create new event
            dateClick: function (info) {
                resetModalForm();
                $("#eventStart").val(info.dateStr + "T00:00");
                $("#eventEnd").val(info.dateStr + "T23:59");

                // Set modal title to Add New Event
                $(".modal-title").text("Add New Event");

                // Show add button, hide update/delete
                $("#saveEvent").show();
                $("#updateEvent, #deleteEvent").hide();

                $("#eventModal").modal("show");
            },

            // Event click event - edit existing event
            eventClick: function (info) {
                currentEventId = info.event.id;

                // Populate form with event data
                $("#eventId").val(currentEventId);
                $("#eventTitle").val(info.event.title);

                // Set category if available
                if (info.event.classNames.includes('event-personal')) {
                    $("input[name='eventCategory'][value='personal']").prop('checked', true);
                } else if (info.event.classNames.includes('event-work')) {
                    $("input[name='eventCategory'][value='work']").prop('checked', true);
                } else if (info.event.classNames.includes('event-other')) {
                    $("input[name='eventCategory'][value='other']").prop('checked', true);
                }

                // Set description if available
                $("#eventDescription").val(info.event.extendedProps?.description || "");

                // Format start date
                const startDate = info.event.start;
                const formattedStart = formatDateForInput(startDate);
                $("#eventStart").val(formattedStart);

                // Format end date if available
                if (info.event.end) {
                    const endDate = info.event.end;
                    const formattedEnd = formatDateForInput(endDate);
                    $("#eventEnd").val(formattedEnd);
                } else {
                    $("#eventEnd").val(formattedStart);
                }

                // Set location if available
                $("#eventLocation").val(info.event.extendedProps?.location || "");

                // Set all day checkbox
                $("#allDayEvent").prop('checked', info.event.allDay);

                // Update modal title and buttons
                $(".modal-title").text("Edit Event");
                $("#saveEvent").hide();
                $("#updateEvent, #deleteEvent").show();

                $("#eventModal").modal("show");
            },

            // Enable event drag and drop
            eventDrop: function(info) {
                updateEventTime(info.event);
            },

            // Enable event resize
            eventResize: function(info) {
                updateEventTime(info.event);
            }
        });

        calendar.render();

        // Helper function to format date for datetime-local input
        function formatDateForInput(date) {
            const year = date.getFullYear();
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const day = date.getDate().toString().padStart(2, '0');
            const hours = date.getHours().toString().padStart(2, '0');
            const minutes = date.getMinutes().toString().padStart(2, '0');

            return `${year}-${month}-${day}T${hours}:${minutes}`;
        }

        // Helper function to update event time after drag or resize
        function updateEventTime(event) {
            const eventData = {
                id: event.id,
                start: event.start,
                end: event.end || event.start,
                allDay: event.allDay
            };

            $.ajax({
                url: "/Event/UpdateEventTime",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(eventData),
                success: function(response) {
                    if (response.success) {
                        toastr.success(response.message);
                    } else {
                        toastr.error(response.message);
                        // Revert the change if failed
                        calendar.refetchEvents();
                    }
                },
                error: function() {
                    toastr.error("Failed to update event time");
                    // Revert the change if failed
                    calendar.refetchEvents();
                }
            });
        }

        // Fetch Public Holidays
        fetch('https://date.nager.at/api/v3/PublicHolidays/2024/PH')
            .then(response => response.json())
            .then(holidays => {
                holidays.forEach(holiday => {
                    calendar.addEvent({
                        title: holiday.name,
                        start: holiday.date,
                        classNames: ['holiday-event'],
                        editable: false // Public holidays shouldn't be editable
                    });
                });
            })
            .catch(error => console.error('Error fetching holidays:', error));

        // Floating Add Button
        $("#addEventBtn").click(function() {
            resetModalForm();
            const today = new Date();
            const formattedDate = today.toISOString().split('T')[0];
            $("#eventStart").val(formattedDate + "T00:00");
            $("#eventEnd").val(formattedDate + "T23:59");

            // Set modal title to Add New Event
            $(".modal-title").text("Add New Event");

            // Show add button, hide update/delete
            $("#saveEvent").show();
            $("#updateEvent, #deleteEvent").hide();

            $("#eventModal").modal("show");
        });

        // Reset Modal Form
        function resetModalForm() {
            $("#eventForm")[0].reset();
            $("#eventId").val("");
            $("#saveEvent").show();
            $("#updateEvent, #deleteEvent").hide();
            currentEventId = null;
        }

        // Add event listener for All-day checkbox
        $("#allDayEvent").change(function() {
            if ($(this).is(":checked")) {
                const startDate = $("#eventStart").val().split("T")[0];
                const endDate = $("#eventEnd").val().split("T")[0];

                $("#eventStart").val(startDate + "T00:00");
                $("#eventEnd").val(endDate + "T23:59");
            }
        });

        // Save Event
        $("#saveEvent").click(function () {
            if (!validateForm()) return;

            const category = $("input[name='eventCategory']:checked").val();

            var newEvent = {
                Title: $("#eventTitle").val(),
                Description: $("#eventDescription").val(),
                DateTimeStart: $("#eventStart").val(),
                DateTimeEnd: $("#eventEnd").val() || null,
                Location: $("#eventLocation").val(),
                Category: category,
                AllDay: $("#allDayEvent").is(":checked"),
                AddedBy: "Admin",
                UpdatedBy: "Admin"
            };

            $.ajax({
                url: "/Event/AddEvent",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(newEvent),
                success: function (response) {
                    if (response.success) {
                        toastr.success(response.message);
                        $("#eventModal").modal("hide");
                        calendar.refetchEvents
                    } else {
                        toastr.error("Failed: " + response.message);
                    }
                },
                error: function (xhr) {
                    toastr.error("Error: " + (xhr.responseText || "Unknown error"));
                }
            });
        });

        // Update Event
        $("#updateEvent").click(function() {
            if (!validateForm()) return;

            const category = $("input[name='eventCategory']:checked").val();

            var updatedEvent = {
                Id: $("#eventId").val(),
                Title: $("#eventTitle").val(),
                Description: $("#eventDescription").val(),
                DateTimeStart: $("#eventStart").val(),
                DateTimeEnd: $("#eventEnd").val() || null,
                Location: $("#eventLocation").val(),
                Category: category,
                AllDay: $("#allDayEvent").is(":checked"),
                UpdatedBy: "Admin"
            };

            $.ajax({
                url: "/Event/UpdateEvent",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(updatedEvent),
                success: function(response) {
                    if (response.success) {
                        toastr.success(response.message);
                        $("#eventModal").modal("hide");
                        calendar.refetchEvents(); // Refresh calendar
                    } else {
                        toastr.error("Failed: " + response.message);
                    }
                },
                error: function(xhr) {
                    toastr.error("Error: " + (xhr.responseText || "Unknown error"));
                }
            });
        });

        // Delete Event
        $("#deleteEvent").click(function() {
            if (confirm("Are you sure you want to delete this event?")) {
                $.ajax({
                    url: "/Event/DeleteEvent?id=" + $("#eventId").val(),
                    type: "DELETE",
                    success: function(response) {
                        if (response.success) {
                            toastr.success(response.message);
                            $("#eventModal").modal("hide");
                            calendar.refetchEvents(); // Refresh calendar
                        } else {
                            toastr.error("Error: " + response.message);
                        }
                    },
                    error: function() {
                        toastr.error("Failed to delete event");
                    }
                });
            }
        });

        // Form Validation
        function validateForm() {
            const title = $("#eventTitle").val();
            const start = $("#eventStart").val();

            if (!title || !title.trim()) {
                toastr.error("Please enter an event title");
                return false;
            }

            if (!start) {
                toastr.error("Please select a start date and time");
                return false;
            }

            // Validate end date is after start date
            const startDate = new Date($("#eventStart").val());
            const endDate = new Date($("#eventEnd").val());

            if ($("#eventEnd").val() && endDate < startDate) {
                toastr.error("End date must be after start date");
                return false;
            }

            return true;
        }

        // Close Modal
        $(".close, .btn-secondary").click(function () {
            $("#eventModal").modal("hide");
        });

        // Handle modal hidden event to reset form
        $("#eventModal").on("hidden.bs.modal", function() {
            resetModalForm();
        });
    });
</script>
